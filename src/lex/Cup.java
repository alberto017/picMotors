
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 29 13:13:34 CST 2017
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 29 13:13:34 CST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\010\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\012\000\002\002\012" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\013\000\002\002\014\000\002\002\015\000\002" +
    "\002\016\000\002\002\017\000\002\002\020\000\002\002" +
    "\021\000\002\002\022\000\002\002\023\000\002\002\024" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\024\000\002\002\013\000\002\002\014\000\002\002\015" +
    "\000\002\002\016\000\002\002\017\000\002\002\020\000" +
    "\002\002\021\000\002\002\022\000\002\002\023\000\002" +
    "\002\024\000\002\002\011\000\002\002\012\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\010\000\002" +
    "\002\010\000\002\002\011\000\002\002\011\000\002\002" +
    "\011\000\002\002\012\000\002\002\013\000\002\002\011" +
    "\000\002\002\012\000\002\002\013\000\002\002\010\000" +
    "\002\002\010\000\002\002\011\000\002\002\011\000\002" +
    "\003\004\000\002\003\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\006\005\000\002\037\005\000\002\040\005\000\002" +
    "\040\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\011\004\000\002\011\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\043\006" +
    "\000\002\012\010\000\002\012\007\000\002\014\003\000" +
    "\002\014\003\000\002\013\010\000\002\013\007\000\002" +
    "\015\003\000\002\015\003\000\002\017\011\000\002\020" +
    "\011\000\002\045\002\000\002\046\002\000\002\025\013" +
    "\000\002\025\007\000\002\025\010\000\002\025\010\000" +
    "\002\025\007\000\002\025\007\000\002\025\006\000\002" +
    "\025\006\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\023\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\005\000" +
    "\002\030\003\000\002\034\006\000\002\034\004\000\002" +
    "\035\010\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\003" +
    "\000\002\032\006\000\002\032\006\000\002\032\006\000" +
    "\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0275\000\010\003\005\004\006\073\004\001\002\000" +
    "\010\004\u01db\006\u01da\073\u01d9\001\002\000\004\004\u01d3" +
    "\001\002\000\010\006\015\007\013\073\011\001\002\000" +
    "\004\002\010\001\002\000\004\002\000\001\002\000\020" +
    "\006\u0185\010\u0102\011\375\045\u0101\065\376\073\u0184\106" +
    "\u0103\001\002\000\010\005\uffa3\007\uffa3\073\uffa3\001\002" +
    "\000\004\005\u0180\001\002\000\010\005\uffa6\007\uffa6\073" +
    "\u0121\001\002\000\010\005\233\007\232\073\231\001\002" +
    "\000\010\005\uffa4\007\uffa4\073\uffa4\001\002\000\010\005" +
    "\uffa5\007\uffa5\073\uffa5\001\002\000\004\007\021\001\002" +
    "\000\004\005\022\001\002\000\004\006\023\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\063\222\001\002\000\044\002\uff53" +
    "\007\uff53\014\uff53\015\uff53\016\uff53\017\uff53\021\uff53\025" +
    "\uff53\026\uff53\027\uff53\030\220\031\221\033\uff53\063\uff53" +
    "\072\uff53\073\uff53\101\uff53\001\002\000\040\002\uff8a\007" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\021\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\033\uff8a\063\uff8a\072\uff8a\073\uff8a\101" +
    "\uff8a\001\002\000\040\002\uff8b\007\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\021\uff8b\025\uff8b\026\uff8b\027\uff8b\033" +
    "\uff8b\063\uff8b\072\uff8b\073\uff8b\101\uff8b\001\002\000\004" +
    "\007\217\001\002\000\040\002\uff88\007\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\021\uff88\025\uff88\026\uff88\027\uff88" +
    "\033\uff88\063\uff88\072\uff88\073\uff88\101\uff88\001\002\000" +
    "\040\002\uff89\007\uff89\014\uff89\015\uff89\016\uff89\017\uff89" +
    "\021\uff89\025\uff89\026\uff89\027\uff89\033\uff89\063\uff89\072" +
    "\uff89\073\uff89\101\uff89\001\002\000\044\002\uff8f\007\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\033\uff8f\063\uff8f\066\104\070\103\072\uff8f" +
    "\073\uff8f\101\uff8f\001\002\000\006\003\207\063\210\001" +
    "\002\000\040\002\uff8e\007\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\021\uff8e\025\uff8e\026\uff8e\027\uff8e\033\uff8e\063" +
    "\uff8e\072\uff8e\073\uff8e\101\uff8e\001\002\000\050\002\uff5c" +
    "\007\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\021\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\033\uff5c\045\203\063\uff5c\066\uff5c" +
    "\067\uff5c\070\uff5c\072\uff5c\073\uff5c\101\uff5c\001\002\000" +
    "\040\002\uff94\007\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\021\uff94\025\uff94\026\uff94\027\uff94\033\uff94\063\uff94\072" +
    "\uff94\073\uff94\101\uff94\001\002\000\006\003\177\063\200" +
    "\001\002\000\006\063\135\064\134\001\002\000\040\002" +
    "\uff95\007\uff95\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\050\063\053\072\051\073" +
    "\036\101\046\001\002\000\060\002\uff61\007\uff61\014\uff61" +
    "\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61\025\uff61\026" +
    "\uff61\027\uff61\033\uff61\043\uff61\044\uff61\045\uff61\063\uff61" +
    "\064\uff61\066\uff61\067\107\070\uff61\072\uff61\073\uff61\101" +
    "\uff61\001\002\000\040\002\uff90\007\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\021\uff90\025\uff90\026\uff90\027\uff90\033" +
    "\uff90\063\uff90\072\uff90\073\uff90\101\uff90\001\002\000\040" +
    "\002\uff8c\007\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\033\uff8c\063\uff8c\072\uff8c" +
    "\073\uff8c\101\uff8c\001\002\000\004\063\124\001\002\000" +
    "\040\002\uff93\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\021\uff93\025\uff93\026\uff93\027\uff93\033\uff93\063\uff93\072" +
    "\uff93\073\uff93\101\uff93\001\002\000\004\063\121\001\002" +
    "\000\060\002\uff5e\007\uff5e\014\uff5e\015\uff5e\016\uff5e\017" +
    "\uff5e\020\uff5e\021\uff5e\025\uff5e\026\uff5e\027\uff5e\033\uff5e" +
    "\043\uff5e\044\uff5e\045\uff5e\063\uff5e\064\uff5e\066\uff5e\067" +
    "\uff5e\070\uff5e\072\uff5e\073\uff5e\101\uff5e\001\002\000\004" +
    "\063\112\001\002\000\010\063\053\072\051\073\101\001" +
    "\002\000\060\002\uff5f\007\uff5f\014\uff5f\015\uff5f\016\uff5f" +
    "\017\uff5f\020\uff5f\021\uff5f\025\uff5f\026\uff5f\027\uff5f\033" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\063\uff5f\064\uff5f\066\uff5f" +
    "\067\uff5f\070\uff5f\072\uff5f\073\uff5f\101\uff5f\001\002\000" +
    "\006\063\072\072\071\001\002\000\040\002\uff91\007\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\021\uff91\025\uff91\026" +
    "\uff91\027\uff91\033\uff91\063\uff91\072\uff91\073\uff91\101\uff91" +
    "\001\002\000\040\002\uff92\007\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\021\uff92\025\uff92\026\uff92\027\uff92\033\uff92" +
    "\063\uff92\072\uff92\073\uff92\101\uff92\001\002\000\040\002" +
    "\uff8d\007\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\033\uff8d\063\uff8d\072\uff8d\073" +
    "\uff8d\101\uff8d\001\002\000\004\063\062\001\002\000\004" +
    "\073\063\001\002\000\004\064\uff6b\001\002\000\004\064" +
    "\065\001\002\000\004\006\066\001\002\000\034\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\004\007\070\001\002\000\040\002\uff7d\007\uff7d\014" +
    "\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\033\uff7d\063\uff7d\072\uff7d\073\uff7d\101\uff7d\001" +
    "\002\000\004\064\100\001\002\000\006\064\074\072\073" +
    "\001\002\000\042\002\uff58\007\uff58\014\uff58\015\uff58\016" +
    "\uff58\017\uff58\021\uff58\025\uff58\026\uff58\027\uff58\033\uff58" +
    "\047\075\063\uff58\072\uff58\073\uff58\101\uff58\001\002\000" +
    "\040\002\uff57\007\uff57\014\uff57\015\uff57\016\uff57\017\uff57" +
    "\021\uff57\025\uff57\026\uff57\027\uff57\033\uff57\063\uff57\072" +
    "\uff57\073\uff57\101\uff57\001\002\000\004\032\076\001\002" +
    "\000\004\064\077\001\002\000\040\002\uff59\007\uff59\014" +
    "\uff59\015\uff59\016\uff59\017\uff59\021\uff59\025\uff59\026\uff59" +
    "\027\uff59\033\uff59\063\uff59\072\uff59\073\uff59\101\uff59\001" +
    "\002\000\040\002\uff56\007\uff56\014\uff56\015\uff56\016\uff56" +
    "\017\uff56\021\uff56\025\uff56\026\uff56\027\uff56\033\uff56\063" +
    "\uff56\072\uff56\073\uff56\101\uff56\001\002\000\060\002\uff5c" +
    "\007\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c\021" +
    "\uff5c\025\uff5c\026\uff5c\027\uff5c\033\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\063\uff5c\064\uff5c\066\uff5c\067\uff5c\070\uff5c\072" +
    "\uff5c\073\uff5c\101\uff5c\001\002\000\010\064\105\066\104" +
    "\070\103\001\002\000\010\063\053\072\051\073\101\001" +
    "\002\000\010\063\053\072\051\073\101\001\002\000\060" +
    "\002\uff5d\007\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020" +
    "\uff5d\021\uff5d\025\uff5d\026\uff5d\027\uff5d\033\uff5d\043\uff5d" +
    "\044\uff5d\045\uff5d\063\uff5d\064\uff5d\066\uff5d\067\uff5d\070" +
    "\uff5d\072\uff5d\073\uff5d\101\uff5d\001\002\000\060\002\uff63" +
    "\007\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021" +
    "\uff63\025\uff63\026\uff63\027\uff63\033\uff63\043\uff63\044\uff63" +
    "\045\uff63\063\uff63\064\uff63\066\uff63\067\107\070\uff63\072" +
    "\uff63\073\uff63\101\uff63\001\002\000\010\063\053\072\051" +
    "\073\101\001\002\000\060\002\uff60\007\uff60\014\uff60\015" +
    "\uff60\016\uff60\017\uff60\020\uff60\021\uff60\025\uff60\026\uff60" +
    "\027\uff60\033\uff60\043\uff60\044\uff60\045\uff60\063\uff60\064" +
    "\uff60\066\uff60\067\uff60\070\uff60\072\uff60\073\uff60\101\uff60" +
    "\001\002\000\060\002\uff62\007\uff62\014\uff62\015\uff62\016" +
    "\uff62\017\uff62\020\uff62\021\uff62\025\uff62\026\uff62\027\uff62" +
    "\033\uff62\043\uff62\044\uff62\045\uff62\063\uff62\064\uff62\066" +
    "\uff62\067\107\070\uff62\072\uff62\073\uff62\101\uff62\001\002" +
    "\000\004\073\113\001\002\000\004\047\114\001\002\000" +
    "\006\012\117\073\115\001\002\000\042\002\uff83\007\uff83" +
    "\014\uff83\015\uff83\016\uff83\017\uff83\021\uff83\025\uff83\026" +
    "\uff83\027\uff83\033\uff83\063\uff83\064\uff83\072\uff83\073\uff83" +
    "\101\uff83\001\002\000\042\002\uff85\007\uff85\014\uff85\015" +
    "\uff85\016\uff85\017\uff85\021\uff85\025\uff85\026\uff85\027\uff85" +
    "\033\uff85\063\uff85\064\120\072\uff85\073\uff85\101\uff85\001" +
    "\002\000\042\002\uff84\007\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\021\uff84\025\uff84\026\uff84\027\uff84\033\uff84\063" +
    "\uff84\064\uff84\072\uff84\073\uff84\101\uff84\001\002\000\040" +
    "\002\uff86\007\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021" +
    "\uff86\025\uff86\026\uff86\027\uff86\033\uff86\063\uff86\072\uff86" +
    "\073\uff86\101\uff86\001\002\000\004\072\122\001\002\000" +
    "\004\064\123\001\002\000\040\002\uff87\007\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\021\uff87\025\uff87\026\uff87\027" +
    "\uff87\033\uff87\063\uff87\072\uff87\073\uff87\101\uff87\001\002" +
    "\000\004\073\125\001\002\000\004\047\126\001\002\000" +
    "\006\013\130\073\127\001\002\000\042\002\uff7f\007\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\021\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\033\uff7f\063\uff7f\064\uff7f\072\uff7f\073\uff7f" +
    "\101\uff7f\001\002\000\042\002\uff80\007\uff80\014\uff80\015" +
    "\uff80\016\uff80\017\uff80\021\uff80\025\uff80\026\uff80\027\uff80" +
    "\033\uff80\063\uff80\064\uff80\072\uff80\073\uff80\101\uff80\001" +
    "\002\000\042\002\uff81\007\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\021\uff81\025\uff81\026\uff81\027\uff81\033\uff81\063" +
    "\uff81\064\132\072\uff81\073\uff81\101\uff81\001\002\000\040" +
    "\002\uff82\007\uff82\014\uff82\015\uff82\016\uff82\017\uff82\021" +
    "\uff82\025\uff82\026\uff82\027\uff82\033\uff82\063\uff82\072\uff82" +
    "\073\uff82\101\uff82\001\002\000\006\002\uff96\007\uff96\001" +
    "\002\000\004\006\173\001\002\000\022\006\146\020\145" +
    "\043\141\044\142\063\053\064\137\072\051\073\143\001" +
    "\002\000\012\063\053\064\uff6d\072\051\073\101\001\002" +
    "\000\004\006\166\001\002\000\024\020\145\043\141\044" +
    "\142\045\163\063\053\066\104\070\103\072\051\073\101" +
    "\001\002\000\012\063\uff66\064\uff66\072\uff66\073\uff66\001" +
    "\002\000\012\063\uff65\064\uff65\072\uff65\073\uff65\001\002" +
    "\000\030\020\uff5c\043\uff5c\044\uff5c\045\uff5c\063\uff5c\064" +
    "\uff6c\066\uff5c\067\uff5c\070\uff5c\072\uff5c\073\uff5c\001\002" +
    "\000\004\064\152\001\002\000\012\063\uff64\064\uff64\072" +
    "\uff64\073\uff64\001\002\000\036\007\150\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\151\001\002\000\040\002\uff73\007\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\021\uff73\025\uff73\026\uff73\027\uff73" +
    "\033\uff73\063\uff73\072\uff73\073\uff73\101\uff73\001\002\000" +
    "\040\002\uff75\007\uff75\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\021\uff75\025\uff75\026\uff75\027\uff75\033\uff75\063\uff75\072" +
    "\uff75\073\uff75\101\uff75\001\002\000\004\006\153\001\002" +
    "\000\036\007\155\014\uff7c\015\uff7c\016\uff7c\017\uff7c\021" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\033\uff7c\063\uff7c\072\uff7c" +
    "\073\uff7c\101\uff7c\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\040\002" +
    "\uff77\007\uff77\014\uff77\015\uff77\016\uff77\017\uff77\021\uff77" +
    "\025\uff77\026\uff77\027\uff77\033\uff77\063\uff77\072\uff77\073" +
    "\uff77\101\uff77\001\002\000\004\007\uff7b\001\002\000\004" +
    "\007\160\001\002\000\040\002\uff7a\007\uff7a\014\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\021\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\033\uff7a\063\uff7a\072\uff7a\073\uff7a\101\uff7a\001\002\000" +
    "\012\063\053\064\uff6e\072\051\073\101\001\002\000\010" +
    "\064\uff6f\066\104\070\103\001\002\000\010\063\053\072" +
    "\051\073\101\001\002\000\010\064\uff71\066\104\070\103" +
    "\001\002\000\010\064\uff72\066\104\070\103\001\002\000" +
    "\036\007\170\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\050\063\053\072\051\073" +
    "\036\101\046\001\002\000\004\007\171\001\002\000\040" +
    "\002\uff79\007\uff79\014\uff79\015\uff79\016\uff79\017\uff79\021" +
    "\uff79\025\uff79\026\uff79\027\uff79\033\uff79\063\uff79\072\uff79" +
    "\073\uff79\101\uff79\001\002\000\040\002\uff78\007\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\021\uff78\025\uff78\026\uff78" +
    "\027\uff78\033\uff78\063\uff78\072\uff78\073\uff78\101\uff78\001" +
    "\002\000\010\064\uff70\066\104\070\103\001\002\000\036" +
    "\007\175\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\176\001\002\000\040\002" +
    "\uff74\007\uff74\014\uff74\015\uff74\016\uff74\017\uff74\021\uff74" +
    "\025\uff74\026\uff74\027\uff74\033\uff74\063\uff74\072\uff74\073" +
    "\uff74\101\uff74\001\002\000\040\002\uff76\007\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\021\uff76\025\uff76\026\uff76\027" +
    "\uff76\033\uff76\063\uff76\072\uff76\073\uff76\101\uff76\001\002" +
    "\000\040\002\uff5a\007\uff5a\014\uff5a\015\uff5a\016\uff5a\017" +
    "\uff5a\021\uff5a\025\uff5a\026\uff5a\027\uff5a\033\uff5a\063\uff5a" +
    "\072\uff5a\073\uff5a\101\uff5a\001\002\000\004\072\201\001" +
    "\002\000\004\064\202\001\002\000\040\002\uff5b\007\uff5b" +
    "\014\uff5b\015\uff5b\016\uff5b\017\uff5b\021\uff5b\025\uff5b\026" +
    "\uff5b\027\uff5b\033\uff5b\063\uff5b\072\uff5b\073\uff5b\101\uff5b" +
    "\001\002\000\014\010\205\011\204\063\053\072\051\073" +
    "\101\001\002\000\040\002\uff9a\007\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\021\uff9a\025\uff9a\026\uff9a\027\uff9a\033" +
    "\uff9a\063\uff9a\072\uff9a\073\uff9a\101\uff9a\001\002\000\040" +
    "\002\uff9b\007\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\033\uff9b\063\uff9b\072\uff9b" +
    "\073\uff9b\101\uff9b\001\002\000\044\002\uff9c\007\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\033\uff9c\063\uff9c\066\104\070\103\072\uff9c\073" +
    "\uff9c\101\uff9c\001\002\000\040\002\uff4f\007\uff4f\014\uff4f" +
    "\015\uff4f\016\uff4f\017\uff4f\021\uff4f\025\uff4f\026\uff4f\027" +
    "\uff4f\033\uff4f\063\uff4f\072\uff4f\073\uff4f\101\uff4f\001\002" +
    "\000\010\022\212\023\213\024\211\001\002\000\004\064" +
    "\216\001\002\000\004\064\215\001\002\000\004\064\214" +
    "\001\002\000\040\002\uff51\007\uff51\014\uff51\015\uff51\016" +
    "\uff51\017\uff51\021\uff51\025\uff51\026\uff51\027\uff51\033\uff51" +
    "\063\uff51\072\uff51\073\uff51\101\uff51\001\002\000\040\002" +
    "\uff52\007\uff52\014\uff52\015\uff52\016\uff52\017\uff52\021\uff52" +
    "\025\uff52\026\uff52\027\uff52\033\uff52\063\uff52\072\uff52\073" +
    "\uff52\101\uff52\001\002\000\040\002\uff50\007\uff50\014\uff50" +
    "\015\uff50\016\uff50\017\uff50\021\uff50\025\uff50\026\uff50\027" +
    "\uff50\033\uff50\063\uff50\072\uff50\073\uff50\101\uff50\001\002" +
    "\000\004\002\uffb2\001\002\000\040\002\uff54\007\uff54\014" +
    "\uff54\015\uff54\016\uff54\017\uff54\021\uff54\025\uff54\026\uff54" +
    "\027\uff54\033\uff54\063\uff54\072\uff54\073\uff54\101\uff54\001" +
    "\002\000\040\002\uff55\007\uff55\014\uff55\015\uff55\016\uff55" +
    "\017\uff55\021\uff55\025\uff55\026\uff55\027\uff55\033\uff55\063" +
    "\uff55\072\uff55\073\uff55\101\uff55\001\002\000\004\073\223" +
    "\001\002\000\004\064\uff6a\001\002\000\004\064\225\001" +
    "\002\000\004\006\226\001\002\000\034\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\230\001\002\000\040\002\uff7e\007\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\021\uff7e\025\uff7e\026\uff7e\027\uff7e" +
    "\033\uff7e\063\uff7e\072\uff7e\073\uff7e\101\uff7e\001\002\000" +
    "\020\007\374\010\u0102\011\375\045\u0101\065\376\073\u0100" +
    "\106\u0103\001\002\000\006\005\361\007\360\001\002\000" +
    "\004\006\355\001\002\000\006\005\236\007\235\001\002" +
    "\000\010\005\244\007\243\073\242\001\002\000\004\006" +
    "\237\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\241\001\002" +
    "\000\004\002\uffb3\001\002\000\006\005\275\073\274\001" +
    "\002\000\004\005\267\001\002\000\036\006\246\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\004\007\266\001\002\000\036\007\250\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\006\002\uffa9\007\252\001\002\000\006\002\ufffe\007\251" +
    "\001\002\000\004\002\uffad\001\002\000\010\002\ufffd\007" +
    "\254\073\253\001\002\000\006\002\uffd4\073\255\001\002" +
    "\000\004\002\uffac\001\002\000\006\002\uffd3\073\256\001" +
    "\002\000\006\002\uffd2\073\257\001\002\000\006\002\uffd1" +
    "\073\260\001\002\000\006\002\uffd0\073\261\001\002\000" +
    "\006\002\uffcf\073\262\001\002\000\006\002\uffce\073\263" +
    "\001\002\000\006\002\uffcd\073\264\001\002\000\006\002" +
    "\uffcc\073\265\001\002\000\004\002\uffcb\001\002\000\004" +
    "\002\uffa8\001\002\000\004\006\270\001\002\000\036\007" +
    "\272\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\273\001\002\000\004\002\uffb0" +
    "\001\002\000\004\002\uffaf\001\002\000\006\005\302\073" +
    "\301\001\002\000\004\006\276\001\002\000\034\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\004\007\300\001\002\000\004\002\uffde\001\002\000" +
    "\006\005\307\073\306\001\002\000\004\006\303\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\305\001\002\000\004\002" +
    "\uffdd\001\002\000\006\005\314\073\313\001\002\000\004" +
    "\006\310\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\050\063\053" +
    "\072\051\073\036\101\046\001\002\000\004\007\312\001" +
    "\002\000\004\002\uffdc\001\002\000\006\005\321\073\320" +
    "\001\002\000\004\006\315\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\317\001\002\000\004\002\uffdb\001\002\000\006" +
    "\005\326\073\325\001\002\000\004\006\322\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\324\001\002\000\004\002\uffda" +
    "\001\002\000\006\005\333\073\332\001\002\000\004\006" +
    "\327\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\331\001\002" +
    "\000\004\002\uffd9\001\002\000\006\005\340\073\337\001" +
    "\002\000\004\006\334\001\002\000\034\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\336\001\002\000\004\002\uffd8\001\002\000\006\005" +
    "\345\073\344\001\002\000\004\006\341\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\050\063\053\072\051\073\036\101\046" +
    "\001\002\000\004\007\343\001\002\000\004\002\uffd7\001" +
    "\002\000\004\005\351\001\002\000\004\006\346\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\350\001\002\000\004\002" +
    "\uffd6\001\002\000\004\006\352\001\002\000\034\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\004\007\354\001\002\000\004\002\uffd5\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\357\001\002\000\004\002\uffb5" +
    "\001\002\000\004\005\371\001\002\000\036\006\363\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\370\001\002\000\036\007\365\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\006\002\uffab\007\367\001\002\000\006\002\001\007" +
    "\366\001\002\000\004\002\uffae\001\002\000\004\002\uffc0" +
    "\001\002\000\004\002\uffaa\001\002\000\004\006\372\001" +
    "\002\000\004\007\373\001\002\000\004\002\uffb1\001\002" +
    "\000\004\005\u017b\001\002\000\010\005\uff9f\007\uff9f\073" +
    "\uff9f\001\002\000\010\012\u0179\013\u017a\073\u0178\001\002" +
    "\000\004\007\u0173\001\002\000\020\007\u0107\010\u0102\011" +
    "\375\045\u0101\065\376\073\u0109\106\u0103\001\002\000\004" +
    "\072\u0106\001\002\000\010\005\uffa0\007\uffa0\073\uffa0\001" +
    "\002\000\014\005\uff9e\007\uff9e\010\u0105\011\u0104\073\uff9e" +
    "\001\002\000\010\005\uffa1\007\uffa1\073\uffa1\001\002\000" +
    "\010\005\uffa2\007\uffa2\073\uffa2\001\002\000\010\005\uff9d" +
    "\007\uff9d\073\uff9d\001\002\000\004\005\u016f\001\002\000" +
    "\004\007\u016a\001\002\000\020\007\u010a\010\u0102\011\375" +
    "\045\u0101\065\376\073\u010c\106\u0103\001\002\000\004\005" +
    "\u0166\001\002\000\004\007\u0161\001\002\000\020\007\u010d" +
    "\010\u0102\011\375\045\u0101\065\376\073\u010f\106\u0103\001" +
    "\002\000\004\005\u015d\001\002\000\004\007\u0158\001\002" +
    "\000\020\007\u0110\010\u0102\011\375\045\u0101\065\376\073" +
    "\u0112\106\u0103\001\002\000\004\005\u0154\001\002\000\004" +
    "\007\u014f\001\002\000\020\007\u0113\010\u0102\011\375\045" +
    "\u0101\065\376\073\u0115\106\u0103\001\002\000\004\005\u014b" +
    "\001\002\000\004\007\u0146\001\002\000\020\007\u0116\010" +
    "\u0102\011\375\045\u0101\065\376\073\u0118\106\u0103\001\002" +
    "\000\004\005\u0142\001\002\000\004\007\u013d\001\002\000" +
    "\020\007\u0119\010\u0102\011\375\045\u0101\065\376\073\u011b" +
    "\106\u0103\001\002\000\004\005\u0139\001\002\000\004\007" +
    "\u0134\001\002\000\020\007\u011c\010\u0102\011\375\045\u0101" +
    "\065\376\073\u011e\106\u0103\001\002\000\004\005\u0130\001" +
    "\002\000\004\007\u012b\001\002\000\020\007\u011f\010\u0102" +
    "\011\375\045\u0101\065\376\073\u0121\106\u0103\001\002\000" +
    "\004\005\u0127\001\002\000\004\007\u0122\001\002\000\014" +
    "\010\u0102\011\375\045\u0101\065\376\106\u0103\001\002\000" +
    "\004\005\u0123\001\002\000\004\006\u0124\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\050\063\053\072\051\073\036\101\046" +
    "\001\002\000\004\007\u0126\001\002\000\004\002\uffc1\001" +
    "\002\000\004\006\u0128\001\002\000\034\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\u012a\001\002\000\004\002\uffb6\001\002\000\004\005" +
    "\u012c\001\002\000\004\006\u012d\001\002\000\034\014\052" +
    "\015\024\016\061\017\041\021\034\025\040\026\055\027" +
    "\025\033\050\063\053\072\051\073\036\101\046\001\002" +
    "\000\004\007\u012f\001\002\000\004\002\uffc2\001\002\000" +
    "\004\006\u0131\001\002\000\034\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\050\063" +
    "\053\072\051\073\036\101\046\001\002\000\004\007\u0133" +
    "\001\002\000\004\002\uffb7\001\002\000\004\005\u0135\001" +
    "\002\000\004\006\u0136\001\002\000\034\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\u0138\001\002\000\004\002\uffc3\001\002\000\004\006" +
    "\u013a\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\u013c\001\002" +
    "\000\004\002\uffb8\001\002\000\004\005\u013e\001\002\000" +
    "\004\006\u013f\001\002\000\034\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\050\063" +
    "\053\072\051\073\036\101\046\001\002\000\004\007\u0141" +
    "\001\002\000\004\002\uffc4\001\002\000\004\006\u0143\001" +
    "\002\000\034\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\050\063\053\072\051\073" +
    "\036\101\046\001\002\000\004\007\u0145\001\002\000\004" +
    "\002\uffb9\001\002\000\004\005\u0147\001\002\000\004\006" +
    "\u0148\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\u014a\001\002" +
    "\000\004\002\uffc5\001\002\000\004\006\u014c\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u014e\001\002\000\004\002\uffba" +
    "\001\002\000\004\005\u0150\001\002\000\004\006\u0151\001" +
    "\002\000\034\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\050\063\053\072\051\073" +
    "\036\101\046\001\002\000\004\007\u0153\001\002\000\004" +
    "\002\uffc6\001\002\000\004\006\u0155\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\u0157\001\002\000\004\002\uffbb\001\002" +
    "\000\004\005\u0159\001\002\000\004\006\u015a\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u015c\001\002\000\004\002\uffc7" +
    "\001\002\000\004\006\u015e\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\u0160\001\002\000\004\002\uffbc\001\002\000\004" +
    "\005\u0162\001\002\000\004\006\u0163\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\u0165\001\002\000\004\002\uffc8\001\002" +
    "\000\004\006\u0167\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u0169\001\002\000\004\002\uffbd\001\002\000\004\005\u016b" +
    "\001\002\000\004\006\u016c\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\u016e\001\002\000\004\002\uffc9\001\002\000\004" +
    "\006\u0170\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\050\063\053" +
    "\072\051\073\036\101\046\001\002\000\004\007\u0172\001" +
    "\002\000\004\002\uffbe\001\002\000\004\005\u0174\001\002" +
    "\000\004\006\u0175\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u0177\001\002\000\004\002\uffca\001\002\000\010\005\uff97" +
    "\007\uff97\073\uff97\001\002\000\010\005\uff99\007\uff99\073" +
    "\uff99\001\002\000\010\005\uff98\007\uff98\073\uff98\001\002" +
    "\000\004\006\u017c\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u017e\001\002\000\004\002\uffbf\001\002\000\006\005\uffa7" +
    "\007\uffa7\001\002\000\004\006\u0181\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\u0183\001\002\000\004\002\uffb4\001\002" +
    "\000\006\006\u018d\073\u018c\001\002\000\004\073\u0121\001" +
    "\002\000\004\007\u0187\001\002\000\004\005\u0188\001\002" +
    "\000\004\006\u0189\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u018b\001\002\000\004\002\uffe8\001\002\000\006\006\u0195" +
    "\073\u0194\001\002\000\004\073\u0121\001\002\000\004\007" +
    "\u018f\001\002\000\004\005\u0190\001\002\000\004\006\u0191" +
    "\001\002\000\034\014\052\015\024\016\061\017\041\021" +
    "\034\025\040\026\055\027\025\033\050\063\053\072\051" +
    "\073\036\101\046\001\002\000\004\007\u0193\001\002\000" +
    "\004\002\uffe7\001\002\000\006\006\u019d\073\u019c\001\002" +
    "\000\004\073\u0121\001\002\000\004\007\u0197\001\002\000" +
    "\004\005\u0198\001\002\000\004\006\u0199\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\050\063\053\072\051\073\036\101\046" +
    "\001\002\000\004\007\u019b\001\002\000\004\002\uffe6\001" +
    "\002\000\006\006\u01a5\073\u01a4\001\002\000\004\073\u0121" +
    "\001\002\000\004\007\u019f\001\002\000\004\005\u01a0\001" +
    "\002\000\004\006\u01a1\001\002\000\034\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\050\063\053\072\051\073\036\101\046\001\002\000\004" +
    "\007\u01a3\001\002\000\004\002\uffe5\001\002\000\006\006" +
    "\u01ad\073\u01ac\001\002\000\004\073\u0121\001\002\000\004" +
    "\007\u01a7\001\002\000\004\005\u01a8\001\002\000\004\006" +
    "\u01a9\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\u01ab\001\002" +
    "\000\004\002\uffe4\001\002\000\006\006\u01b5\073\u01b4\001" +
    "\002\000\004\073\u0121\001\002\000\004\007\u01af\001\002" +
    "\000\004\005\u01b0\001\002\000\004\006\u01b1\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u01b3\001\002\000\004\002\uffe3" +
    "\001\002\000\006\006\u01bd\073\u01bc\001\002\000\004\073" +
    "\u0121\001\002\000\004\007\u01b7\001\002\000\004\005\u01b8" +
    "\001\002\000\004\006\u01b9\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\u01bb\001\002\000\004\002\uffe2\001\002\000\006" +
    "\006\u01c5\073\u01c4\001\002\000\004\073\u0121\001\002\000" +
    "\004\007\u01bf\001\002\000\004\005\u01c0\001\002\000\004" +
    "\006\u01c1\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\050\063\053" +
    "\072\051\073\036\101\046\001\002\000\004\007\u01c3\001" +
    "\002\000\004\002\uffe1\001\002\000\004\006\u01cc\001\002" +
    "\000\004\073\u0121\001\002\000\004\007\u01c7\001\002\000" +
    "\004\005\u01c8\001\002\000\004\006\u01c9\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\050\063\053\072\051\073\036\101\046" +
    "\001\002\000\004\007\u01cb\001\002\000\004\002\uffe0\001" +
    "\002\000\004\073\u0121\001\002\000\004\007\u01ce\001\002" +
    "\000\004\005\u01cf\001\002\000\004\006\u01d0\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u01d2\001\002\000\004\002\uffdf" +
    "\001\002\000\004\006\u01d4\001\002\000\004\007\u01d5\001" +
    "\002\000\004\005\u01d6\001\002\000\004\006\u01d7\001\002" +
    "\000\004\007\u01d8\001\002\000\004\002\uffff\001\002\000" +
    "\010\004\u01ea\006\u01eb\073\u01e9\001\002\000\004\073\u0121" +
    "\001\002\000\004\006\u01dc\001\002\000\004\073\u0121\001" +
    "\002\000\004\007\u01de\001\002\000\004\005\u01df\001\002" +
    "\000\004\006\u01e0\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u01e2\001\002\000\004\002\ufff2\001\002\000\004\007\u01e4" +
    "\001\002\000\004\005\u01e5\001\002\000\004\006\u01e6\001" +
    "\002\000\034\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\050\063\053\072\051\073" +
    "\036\101\046\001\002\000\004\007\u01e8\001\002\000\004" +
    "\002\ufffc\001\002\000\010\004\u01fa\006\u01fb\073\u01f9\001" +
    "\002\000\004\006\u01f2\001\002\000\004\073\u0121\001\002" +
    "\000\004\007\u01ed\001\002\000\004\005\u01ee\001\002\000" +
    "\004\006\u01ef\001\002\000\034\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\050\063" +
    "\053\072\051\073\036\101\046\001\002\000\004\007\u01f1" +
    "\001\002\000\004\002\ufffb\001\002\000\004\073\u0121\001" +
    "\002\000\004\007\u01f4\001\002\000\004\005\u01f5\001\002" +
    "\000\004\006\u01f6\001\002\000\034\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\050" +
    "\063\053\072\051\073\036\101\046\001\002\000\004\007" +
    "\u01f8\001\002\000\004\002\ufff1\001\002\000\010\004\u020a" +
    "\006\u020b\073\u0209\001\002\000\004\006\u0202\001\002\000" +
    "\004\073\u0121\001\002\000\004\007\u01fd\001\002\000\004" +
    "\005\u01fe\001\002\000\004\006\u01ff\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\u0201\001\002\000\004\002\ufffa\001\002" +
    "\000\004\073\u0121\001\002\000\004\007\u0204\001\002\000" +
    "\004\005\u0205\001\002\000\004\006\u0206\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\050\063\053\072\051\073\036\101\046" +
    "\001\002\000\004\007\u0208\001\002\000\004\002\ufff0\001" +
    "\002\000\010\004\u021b\006\u021a\073\u0219\001\002\000\004" +
    "\006\u0212\001\002\000\004\073\u0121\001\002\000\004\007" +
    "\u020d\001\002\000\004\005\u020e\001\002\000\004\006\u020f" +
    "\001\002\000\034\014\052\015\024\016\061\017\041\021" +
    "\034\025\040\026\055\027\025\033\050\063\053\072\051" +
    "\073\036\101\046\001\002\000\004\007\u0211\001\002\000" +
    "\004\002\ufff9\001\002\000\004\073\u0121\001\002\000\004" +
    "\007\u0214\001\002\000\004\005\u0215\001\002\000\004\006" +
    "\u0216\001\002\000\034\014\052\015\024\016\061\017\041" +
    "\021\034\025\040\026\055\027\025\033\050\063\053\072" +
    "\051\073\036\101\046\001\002\000\004\007\u0218\001\002" +
    "\000\004\002\uffef\001\002\000\010\004\u022a\006\u022b\073" +
    "\u0229\001\002\000\004\073\u0121\001\002\000\004\006\u021c" +
    "\001\002\000\004\073\u0121\001\002\000\004\007\u021e\001" +
    "\002\000\004\005\u021f\001\002\000\004\006\u0220\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\u0222\001\002\000\004\002" +
    "\uffee\001\002\000\004\007\u0224\001\002\000\004\005\u0225" +
    "\001\002\000\004\006\u0226\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\u0228\001\002\000\004\002\ufff8\001\002\000\010" +
    "\004\u023a\006\u023b\073\u0239\001\002\000\004\006\u0232\001" +
    "\002\000\004\073\u0121\001\002\000\004\007\u022d\001\002" +
    "\000\004\005\u022e\001\002\000\004\006\u022f\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u0231\001\002\000\004\002\ufff7" +
    "\001\002\000\004\073\u0121\001\002\000\004\007\u0234\001" +
    "\002\000\004\005\u0235\001\002\000\004\006\u0236\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\u0238\001\002\000\004\002" +
    "\uffed\001\002\000\010\004\u024b\006\u024a\073\u0249\001\002" +
    "\000\004\006\u0242\001\002\000\004\073\u0121\001\002\000" +
    "\004\007\u023d\001\002\000\004\005\u023e\001\002\000\004" +
    "\006\u023f\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\050\063\053" +
    "\072\051\073\036\101\046\001\002\000\004\007\u0241\001" +
    "\002\000\004\002\ufff6\001\002\000\004\073\u0121\001\002" +
    "\000\004\007\u0244\001\002\000\004\005\u0245\001\002\000" +
    "\004\006\u0246\001\002\000\034\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\050\063" +
    "\053\072\051\073\036\101\046\001\002\000\004\007\u0248" +
    "\001\002\000\004\002\uffec\001\002\000\010\004\u025a\006" +
    "\u025b\073\u0259\001\002\000\004\073\u0121\001\002\000\004" +
    "\006\u024c\001\002\000\004\073\u0121\001\002\000\004\007" +
    "\u024e\001\002\000\004\005\u024f\001\002\000\004\006\u0250" +
    "\001\002\000\034\014\052\015\024\016\061\017\041\021" +
    "\034\025\040\026\055\027\025\033\050\063\053\072\051" +
    "\073\036\101\046\001\002\000\004\007\u0252\001\002\000" +
    "\004\002\uffeb\001\002\000\004\007\u0254\001\002\000\004" +
    "\005\u0255\001\002\000\004\006\u0256\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\050\063\053\072\051\073\036\101\046\001" +
    "\002\000\004\007\u0258\001\002\000\004\002\ufff5\001\002" +
    "\000\006\004\u026a\006\u0269\001\002\000\004\006\u0262\001" +
    "\002\000\004\073\u0121\001\002\000\004\007\u025d\001\002" +
    "\000\004\005\u025e\001\002\000\004\006\u025f\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\050\063\053\072\051\073\036\101" +
    "\046\001\002\000\004\007\u0261\001\002\000\004\002\ufff4" +
    "\001\002\000\004\073\u0121\001\002\000\004\007\u0264\001" +
    "\002\000\004\005\u0265\001\002\000\004\006\u0266\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\u0268\001\002\000\004\002" +
    "\uffea\001\002\000\004\073\u0121\001\002\000\004\006\u026b" +
    "\001\002\000\004\073\u0121\001\002\000\004\007\u026d\001" +
    "\002\000\004\005\u026e\001\002\000\004\006\u026f\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\050\063\053\072\051\073\036" +
    "\101\046\001\002\000\004\007\u0271\001\002\000\004\002" +
    "\uffe9\001\002\000\004\007\u0273\001\002\000\004\005\u0274" +
    "\001\002\000\004\006\u0275\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\050\063\053\072\051\073\036\101\046\001\002\000" +
    "\004\007\u0277\001\002\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0275\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u017e\004\013\005\016\006\015\007\011\001\001\000" +
    "\014\003\233\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\027\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\132\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\101\027\042\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\066\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\110\030\053\001\001\000\006\027\105\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\143\026\137\027\042\030\053\031\135\001\001\000" +
    "\010\026\171\027\042\030\053\001\001\000\002\001\001" +
    "\000\012\026\161\027\042\030\053\031\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\146\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\153\001" +
    "\001\000\044\011\155\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\004\046\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\164\027\042\030\053" +
    "\001\001\000\002\001\001\000\010\026\163\027\042\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\166\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\173\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\205\027\042\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\226\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\376\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\237" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\244\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\044\011\246\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\270\012\036\013\046\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\276" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\303\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\310\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\315\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\322\012\036\013\046\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\327\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\334\012" +
    "\036\013\046\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\341\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\346\012\036\013\046\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\352\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\355\012\036\013\046\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\361\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\044\011\363\012\036\013\046" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0107\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u010a\004\013" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u010d\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u0110\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0113\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0116\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0119\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u011c" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u011f\004\013\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0124\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0128\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u012d\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0131\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0136\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u013a\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u013f\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0143\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0148\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u014c\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0151\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0155\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u015a\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u015e\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0163\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0167\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u016c\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0170\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0175\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u017c\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u0181\012\036\013\046\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0185\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0189\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u018d\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0191\012" +
    "\036\013\046\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0195\004\013\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0199\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u019d\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u01a1\012\036\013\046\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u01a5\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u01a9\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u01ad\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u01b1\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u01b5\004\013\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u01b9\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u01bd" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u01c1" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u01c5\004\013" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u01c9\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u01cc\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u01d0\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01e2\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\014\003\u01dc\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u01e0\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u01e6\012" +
    "\036\013\046\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01eb\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u01ef\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u01f2\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u01f6\012\036\013\046\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u01fb\004\013\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u01ff\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0202\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0206\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u020b\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u020f\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0212" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u0216" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u0222\004\013" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\014\003\u021c\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u0220\012\036\013\046\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u0226\012\036\013\046" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u022b\004\013" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u022f\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u0232\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u0236\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u023b\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u023f\012\036\013\046\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0242\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0246\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0252\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\014\003\u024c\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0250\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0256\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u025b\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u025f\012" +
    "\036\013\046\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0262\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u0266\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0271" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\014\003\u026b\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u026f\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u0275\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0;
    int direccionDeMemoria = 20; 
    int ifs = 0;
    int elses=0;
    int whiles = 0;
    int repeats = 0;
    int a=0,n=0;
    String id_sal="",id_ent="";
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
    message="Error de Sintaxis";
        compilador.setError("Se esperaba "+message+" Linea "+(left)+" Columna: "+(right));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");       
        message="Error de Sintaxis";
        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");
        message="Error de Sintaxis";
        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public String newTemporal2(Lexema a, Lexema b){
             String resultado;
           compilador.tres(a.lexema + " = " + b.tres);
             resultado = "t" + contadorTemporales;
           
           return resultado;
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " =  "+op.lexema+" "+a.tres+","+b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

     public String newTemporal1(Object a, Object op, Object b){
        String resultado;

            System.out.println(a);
            System.out.println(op);
            System.out.println(b);
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales +" = "+a+" "+op+" "+b);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public String agregarVariableObj(Lexema a, Lexema b,Lexema c){
                String resultado="";
           //compilador.addCodigoObjeto(a.lexema + " = " + b.tres);
           //  resultado = "t" + contadorTemporales;
           //System.err.println("A:"+a.lexema+"|B:"+b.lexema+"|C:"+c.lexema+"|");  
           if(c.lexema.equals("#")){
               if(b.lexema.equals("verdadero")){
                   resultado="\n    " +a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    " +"MOVLW D'1' "+"\n    " +"MOVWF "+a.lexema+"\n    "+"CLRW";
               }else{
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'0' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }  
           }
           else{
               if(c.lexema.equals("=")){
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'"+b.lexema+"' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }
               else{
                   if(c.lexema.equals(":")){
                        //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+" Corta:"+b.lexema.substring(2, 3));  
                        if (b.lexema.substring(2, 3).equals("a")) {
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTB"+","+b.lexema.substring(3, 4);
                        }
                        else{
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTA"+","+b.lexema.substring(3, 4);
                        }
                   }
                   
               }               
           }
           //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+"|");  
           compilador.addCodigoObjeto(resultado);
           
           return resultado;

    }


    public String agregarCodigoObjeto(String EstCodigo){
            compilador.addCodigoObjeto(EstCodigo);     
            return EstCodigo;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // motorelec ::= MOTORELECT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <MOTORELECT> , se esperaba una estructura MOTORELECT ( SAR | CAR | DETENER) renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // motorelec ::= MOTORELECT PAREIZQ DETENER PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // motorelec ::= MOTORELECT PAREIZQ CAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // motorelec ::= MOTORELECT PAREIZQ SAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cont ::= CONTADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <contador> , se esperaba final o inicio'(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cont ::= CONTADOR FINAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // cont ::= CONTADOR INICIO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // retart ::= RETARDO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre '(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // retart ::= RETARDO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta el valor de el retardo  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // retart ::= RETARDO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre ')'  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // retart ::= RETARDO PAREIZQ INTEGERNUM COMA TIEMPO PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("  CALL Retardo_"+n.lexema+t.lexema);
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // srvo ::= SERVO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia servo  "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // srvo ::= SERVO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // f ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo entero");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe y/o no esta declarada");
    }

    n.tres=n.lexema;
    RESULT=n.lexema;                                


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // f ::= PAREIZQ exp PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

RESULT = e;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // f ::= INTEGERNUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema x = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
x.tres=x.lexema;
RESULT = x.lexema;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // t ::= f 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT = s;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // t ::= t MULTIPLICACION f 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema l = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    q = parser.newTemporal1 (q,l.lexema,h);
RESULT = q;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // exp ::= t 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
RESULT = w;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // exp ::= exp RESTA t 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
    r = parser.newTemporal1 (r,g.lexema,v);
RESULT = r;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // exp ::= exp SUMA t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema op = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//a.tres=a.lexema;
    a = parser.newTemporal1 (a,op.lexema,b);
RESULT = a;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // oprel ::= COMPARA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema co = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    co.tres=co.lexema;
        RESULT = co.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // oprel ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema ma = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    ma.tres=ma.lexema;
        RESULT = ma.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // oprel ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema me = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    me.tres=me.lexema;
        RESULT = me.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // oplog ::= NOT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // cond_s ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
parser.agregarCodigoObjeto("\n   BTFSS "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT = ""+id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_s",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cond_f ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
 parser.agregarCodigoObjeto("\n   BTFSC "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_f",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cond ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.agregarCodigoObjeto("    C"+parser.whiles+"\n    BTFSS "+id.lexema+",0"+"\n     GOTO FUERA"+parser.whiles+"\n");
 
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cond ::= oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le faltan componentes en Renglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cond ::= exp oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operando o expresion en Reglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cond ::= exp exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operador  en Reglon:  "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cond ::= oprel exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta un operando o expresion en Reglon:  "+(idleft+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cond ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError ("Error Sintactico: El operador IGUAL '=' no es un operador de comparacion pruebe con: '=='en Reglon:  "+(igleft+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cond ::= exp oprel exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          

        Object b;
        b= parser.newTemporal1(a,op,y);
        RESULT=b;



    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // s_ciclo ::= CICLO PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // s_ciclo ::= CICLO PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion ni sentencias dentro de el  renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ NT$0 cuerpo NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.agregarCodigoObjeto("    GOTO C"+parser.whiles+"\n   FUERA"+parser.whiles+"\n"); parser.whiles++;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

    
    compilador.tres("GO TO ciclo"+parser.whiles);
    compilador.tres("salida:");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$0 ::= 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

        
        ci.tres="\nciclo"+parser.whiles+":";
        compilador.tres(ci.tres);
            compilador.tres("SI "+co+" = falso GO TO "+"salida");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // s_ef ::= EF PAREIZQ cond_f PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);
parser.ifs++; parser.elses++; i.tres="EF"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ef",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // s_ed ::= ED PAREIZQ cond_s PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);

parser.ifs++; parser.elses++; i.tres="ED"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ed",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // p_salida ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_sal=n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("psalida")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo psalida");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);
RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // p_salida ::= PSALIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    parser.id_sal=r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema k = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
    parser.agregarCodigoObjeto("   BTFSS "+k.lexema+",0\n" +
"   BCF "+parser.id_sal+"\n" +
"   BTFSC "+k.lexema+",0\n" +
"   BSF "+parser.id_sal+"\n");
    if(!parser.tabla.containsKey(k.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(k.lexema)){
                  
       String tmp = compilador.Buscar(k.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No es de tipo Boleano");

                }
    }    
    
    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // p_entrada ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("pentrada")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo pentrada");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);

RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // p_entrada ::= PENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		  
    compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
        parser.agregarCodigoObjeto("    BCF "+ id.lexema+",0\n"+"  BTFSC "+parser.id_ent+"\n"+"   BSF "+id.lexema+",0\n");
    if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // alto ::= ALTO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("     MOVLW B'"+i.lexema+"'\n       MOVWF PORTB"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia ::= alto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia ::= as_fvbol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia ::= as_asig 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia ::= cont 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia ::= retart 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia ::= srvo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia ::= motorelec 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia ::= exp 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia ::= s_ciclo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia ::= s_ef 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia ::= s_ed 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= puertosalida 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= puertoentrada 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // as_puerto ::= ID DOSPUNTOS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error Semantico : el tipo <"+p.lexema+">. No existe  renglon: "+(pleft+1)+" columna: "+(pright+1)+"se espera un tipo puerto");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // as_puerto ::= ID DOSPUNTOS PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor); 
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);
// generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);    

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico : El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // as_puerto ::= ID DOSPUNTOS PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);    
    // generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico(Unidad); El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // as_fvbol ::= ID IGUAL FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		  parser.agregarCodigoObjeto("    BCF "+i.lexema+",0\n");
     if(!parser.tabla.containsKey(i.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(i.lexema)){
                  
       String tmp = compilador.Buscar(i.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

                }
    }        

    compilador.tres(i.lexema+" "+g.lexema+" "+f.lexema);
    


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // as_fvbol ::= ID IGUAL VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          
        parser.agregarCodigoObjeto("    BSF "+id.lexema+",0\n");
         if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        

   compilador.tres(id.lexema+" "+ig.lexema+" "+v.lexema);


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // as_asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

 if(!parser.tabla.containsKey(id.lexema)){
                  
                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


        compilador.tres(id.lexema+" "+ig.lexema+" "+e);





    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_asig",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // as_dato ::= ID IGUAL INTEGERNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema valor = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = ""+valor;            
    id.tipo = "entero";
    RESULT = valor;
    compilador.agregarid(id.lexema,id.tipo,id.valor);       
    parser.tabla.put(id.lexema,id);

    id.tres = id.lexema;
    valor.tres= valor.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,valor);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,valor,o);
    //codigo gen cod
  }
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_dato",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // as_bol ::= ID GATO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro  valor BOOLEANO en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // as_bol ::= ID FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro # en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // as_bol ::= ID VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro # en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // as_bol ::= ID GATO FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "FALSO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);          
    parser.tabla.put(id.lexema,id);
    id.tres = id.lexema;
    f.tres= f.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,f);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,f,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // as_bol ::= ID GATO VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "VERDADERO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);

    id.tres = id.lexema;
    v.tres= v.lexema;

    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,v);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,v,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asig ::= as_puerto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asig ::= as_dato 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asig ::= as_bol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignacion ::= asig 
            {
              Object RESULT =null;
		 parser.agregarCodigoObjeto("\nBUCLE\n"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignacion ::= asig asignacion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inicio ::= DECLARA LLAVEIZQ LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inicio ::= DECLARA asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inicio ::= DECLARA LLAVEIZQ asignacion BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inicio ::= DECLARA LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicio ::= DECLARA LLAVEIZQ BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico :, sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicio ::= DECLARA LLAVEIZQ ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inicio ::= DECLARA LLAVEIZQ ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inicio ::= DECLARA LLAVEIZQ ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico: renglon: Estructura DECLARA vacia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio ::= DECLARA LLAVEIZQ ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inicio ::= DECLARA LLAVEIZQ ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inicio ::= DECLARA LLAVEIZQ ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio ::= DECLARA ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= DECLARA ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= DECLARA ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicio ::= DECLARA ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= DECLARA ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= DECLARA ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= DECLARA ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicio ::= DECLARA ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= ID ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicio ::= ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio ::= ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error Sintactico: El documento esta vacio no hay nada para compilar");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

