
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 01 01:12:54 CST 2017
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 01 01:12:54 CST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\002\010\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\012\000\002\002\012" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\013\000\002\002\014\000\002\002\015\000\002" +
    "\002\016\000\002\002\017\000\002\002\020\000\002\002" +
    "\021\000\002\002\022\000\002\002\023\000\002\002\024" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\011\000\002\002\012\000\002\002\013\000\002" +
    "\002\014\000\002\002\015\000\002\002\016\000\002\002" +
    "\017\000\002\002\020\000\002\002\021\000\002\002\022" +
    "\000\002\002\023\000\002\002\010\000\002\002\012\000" +
    "\002\002\010\000\002\002\011\000\002\002\011\000\002" +
    "\002\011\000\002\002\012\000\002\002\013\000\002\002" +
    "\011\000\002\002\012\000\002\002\013\000\002\002\010" +
    "\000\002\002\010\000\002\002\011\000\002\002\011\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\005\000\002\040\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\004\000\002\041\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\004\000\002\011\004\000\002\011\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\044\006\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\007\000\002\012\010\000\002\012\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\006\000\002\013\007" +
    "\000\002\013\011\000\002\015\003\000\002\015\003\000" +
    "\002\014\010\000\002\014\007\000\002\016\003\000\002" +
    "\016\003\000\002\020\011\000\002\021\011\000\002\047" +
    "\002\000\002\050\002\000\002\026\013\000\002\026\007" +
    "\000\002\026\010\000\002\026\010\000\002\026\007\000" +
    "\002\026\007\000\002\026\006\000\002\026\006\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\024\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\030\005\000\002\030\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\003\000" +
    "\002\035\006\000\002\035\004\000\002\036\010\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ac\000\010\003\005\004\006\074\004\001\002\000" +
    "\010\004\u0212\006\u0211\074\u0210\001\002\000\004\004\u020a" +
    "\001\002\000\010\006\015\007\014\074\011\001\002\000" +
    "\004\002\010\001\002\000\004\002\000\001\002\000\024" +
    "\006\u01bc\010\u0137\011\u0132\012\u0139\013\u0138\046\u0136\066" +
    "\u0133\074\u01bb\107\u013a\001\002\000\010\005\uff99\007\uff99" +
    "\074\uff99\001\002\000\010\005\uff9c\007\uff9c\074\u0158\001" +
    "\002\000\004\005\u01b6\001\002\000\010\005\262\007\261" +
    "\074\260\001\002\000\010\005\uff9a\007\uff9a\074\uff9a\001" +
    "\002\000\010\005\uff9b\007\uff9b\074\uff9b\001\002\000\004" +
    "\007\021\001\002\000\004\005\022\001\002\000\004\006" +
    "\023\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\044\002\uff3a\007\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\017\uff3a\021\uff3a\025\uff3a\026" +
    "\uff3a\027\uff3a\030\256\031\257\033\uff3a\064\uff3a\073\uff3a" +
    "\074\uff3a\102\uff3a\001\002\000\004\064\247\001\002\000" +
    "\040\002\uff7c\007\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\021\uff7c\025\uff7c\026\uff7c\027\uff7c\033\uff7c\064\uff7c\073" +
    "\uff7c\074\uff7c\102\uff7c\001\002\000\040\002\uff7d\007\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\025\uff7d\026" +
    "\uff7d\027\uff7d\033\uff7d\064\uff7d\073\uff7d\074\uff7d\102\uff7d" +
    "\001\002\000\004\007\246\001\002\000\040\002\uff78\007" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\021\uff78\025\uff78" +
    "\026\uff78\027\uff78\033\uff78\064\uff78\073\uff78\074\uff78\102" +
    "\uff78\001\002\000\040\002\uff7a\007\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\021\uff7a\025\uff7a\026\uff7a\027\uff7a\033" +
    "\uff7a\064\uff7a\073\uff7a\074\uff7a\102\uff7a\001\002\000\040" +
    "\002\uff7b\007\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\033\uff7b\064\uff7b\073\uff7b" +
    "\074\uff7b\102\uff7b\001\002\000\044\002\uff81\007\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\021\uff81\025\uff81\026\uff81" +
    "\027\uff81\033\uff81\064\uff81\067\106\071\105\073\uff81\074" +
    "\uff81\102\uff81\001\002\000\006\003\236\064\237\001\002" +
    "\000\040\002\uff80\007\uff80\014\uff80\015\uff80\016\uff80\017" +
    "\uff80\021\uff80\025\uff80\026\uff80\027\uff80\033\uff80\064\uff80" +
    "\073\uff80\074\uff80\102\uff80\001\002\000\054\002\uff43\007" +
    "\uff43\010\232\011\231\014\uff43\015\uff43\016\uff43\017\uff43" +
    "\021\uff43\025\uff43\026\uff43\027\uff43\033\uff43\046\230\064" +
    "\uff43\067\uff43\070\uff43\071\uff43\073\uff43\074\uff43\102\uff43" +
    "\001\002\000\040\002\uff86\007\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\021\uff86\025\uff86\026\uff86\027\uff86\033\uff86" +
    "\064\uff86\073\uff86\074\uff86\102\uff86\001\002\000\006\003" +
    "\224\064\225\001\002\000\006\064\162\065\161\001\002" +
    "\000\040\002\uff87\007\uff87\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\060\002\uff48\007" +
    "\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48" +
    "\025\uff48\026\uff48\027\uff48\033\uff48\044\uff48\045\uff48\046" +
    "\uff48\064\uff48\065\uff48\067\uff48\070\111\071\uff48\073\uff48" +
    "\074\uff48\102\uff48\001\002\000\040\002\uff82\007\uff82\014" +
    "\uff82\015\uff82\016\uff82\017\uff82\021\uff82\025\uff82\026\uff82" +
    "\027\uff82\033\uff82\064\uff82\073\uff82\074\uff82\102\uff82\001" +
    "\002\000\040\002\uff7e\007\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\021\uff7e\025\uff7e\026\uff7e\027\uff7e\033\uff7e\064" +
    "\uff7e\073\uff7e\074\uff7e\102\uff7e\001\002\000\004\064\151" +
    "\001\002\000\040\002\uff85\007\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\021\uff85\025\uff85\026\uff85\027\uff85\033\uff85" +
    "\064\uff85\073\uff85\074\uff85\102\uff85\001\002\000\060\002" +
    "\uff45\007\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45" +
    "\021\uff45\025\uff45\026\uff45\027\uff45\033\uff45\044\uff45\045" +
    "\uff45\046\uff45\064\uff45\065\uff45\067\uff45\070\uff45\071\uff45" +
    "\073\uff45\074\uff45\102\uff45\001\002\000\006\064\141\073" +
    "\140\001\002\000\006\064\115\074\114\001\002\000\010" +
    "\064\054\073\051\074\103\001\002\000\060\002\uff46\007" +
    "\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46" +
    "\025\uff46\026\uff46\027\uff46\033\uff46\044\uff46\045\uff46\046" +
    "\uff46\064\uff46\065\uff46\067\uff46\070\uff46\071\uff46\073\uff46" +
    "\074\uff46\102\uff46\001\002\000\006\064\074\073\073\001" +
    "\002\000\040\002\uff79\007\uff79\014\uff79\015\uff79\016\uff79" +
    "\017\uff79\021\uff79\025\uff79\026\uff79\027\uff79\033\uff79\064" +
    "\uff79\073\uff79\074\uff79\102\uff79\001\002\000\040\002\uff83" +
    "\007\uff83\014\uff83\015\uff83\016\uff83\017\uff83\021\uff83\025" +
    "\uff83\026\uff83\027\uff83\033\uff83\064\uff83\073\uff83\074\uff83" +
    "\102\uff83\001\002\000\040\002\uff84\007\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\021\uff84\025\uff84\026\uff84\027\uff84" +
    "\033\uff84\064\uff84\073\uff84\074\uff84\102\uff84\001\002\000" +
    "\040\002\uff7f\007\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f" +
    "\021\uff7f\025\uff7f\026\uff7f\027\uff7f\033\uff7f\064\uff7f\073" +
    "\uff7f\074\uff7f\102\uff7f\001\002\000\004\064\064\001\002" +
    "\000\004\074\065\001\002\000\004\065\uff52\001\002\000" +
    "\004\065\067\001\002\000\004\006\070\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\072\001\002\000\040\002\uff64\007" +
    "\uff64\014\uff64\015\uff64\016\uff64\017\uff64\021\uff64\025\uff64" +
    "\026\uff64\027\uff64\033\uff64\064\uff64\073\uff64\074\uff64\102" +
    "\uff64\001\002\000\004\065\102\001\002\000\006\065\076" +
    "\073\075\001\002\000\042\002\uff3f\007\uff3f\014\uff3f\015" +
    "\uff3f\016\uff3f\017\uff3f\021\uff3f\025\uff3f\026\uff3f\027\uff3f" +
    "\033\uff3f\050\077\064\uff3f\073\uff3f\074\uff3f\102\uff3f\001" +
    "\002\000\040\002\uff3e\007\uff3e\014\uff3e\015\uff3e\016\uff3e" +
    "\017\uff3e\021\uff3e\025\uff3e\026\uff3e\027\uff3e\033\uff3e\064" +
    "\uff3e\073\uff3e\074\uff3e\102\uff3e\001\002\000\004\032\100" +
    "\001\002\000\004\065\101\001\002\000\040\002\uff40\007" +
    "\uff40\014\uff40\015\uff40\016\uff40\017\uff40\021\uff40\025\uff40" +
    "\026\uff40\027\uff40\033\uff40\064\uff40\073\uff40\074\uff40\102" +
    "\uff40\001\002\000\040\002\uff3d\007\uff3d\014\uff3d\015\uff3d" +
    "\016\uff3d\017\uff3d\021\uff3d\025\uff3d\026\uff3d\027\uff3d\033" +
    "\uff3d\064\uff3d\073\uff3d\074\uff3d\102\uff3d\001\002\000\060" +
    "\002\uff43\007\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020" +
    "\uff43\021\uff43\025\uff43\026\uff43\027\uff43\033\uff43\044\uff43" +
    "\045\uff43\046\uff43\064\uff43\065\uff43\067\uff43\070\uff43\071" +
    "\uff43\073\uff43\074\uff43\102\uff43\001\002\000\010\065\107" +
    "\067\106\071\105\001\002\000\010\064\054\073\051\074" +
    "\103\001\002\000\010\064\054\073\051\074\103\001\002" +
    "\000\060\002\uff44\007\uff44\014\uff44\015\uff44\016\uff44\017" +
    "\uff44\020\uff44\021\uff44\025\uff44\026\uff44\027\uff44\033\uff44" +
    "\044\uff44\045\uff44\046\uff44\064\uff44\065\uff44\067\uff44\070" +
    "\uff44\071\uff44\073\uff44\074\uff44\102\uff44\001\002\000\060" +
    "\002\uff4a\007\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\025\uff4a\026\uff4a\027\uff4a\033\uff4a\044\uff4a" +
    "\045\uff4a\046\uff4a\064\uff4a\065\uff4a\067\uff4a\070\111\071" +
    "\uff4a\073\uff4a\074\uff4a\102\uff4a\001\002\000\010\064\054" +
    "\073\051\074\103\001\002\000\060\002\uff47\007\uff47\014" +
    "\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\025\uff47" +
    "\026\uff47\027\uff47\033\uff47\044\uff47\045\uff47\046\uff47\064" +
    "\uff47\065\uff47\067\uff47\070\uff47\071\uff47\073\uff47\074\uff47" +
    "\102\uff47\001\002\000\060\002\uff49\007\uff49\014\uff49\015" +
    "\uff49\016\uff49\017\uff49\020\uff49\021\uff49\025\uff49\026\uff49" +
    "\027\uff49\033\uff49\044\uff49\045\uff49\046\uff49\064\uff49\065" +
    "\uff49\067\uff49\070\111\071\uff49\073\uff49\074\uff49\102\uff49" +
    "\001\002\000\004\050\135\001\002\000\006\050\116\074" +
    "\117\001\002\000\010\012\123\065\133\074\122\001\002" +
    "\000\006\050\121\074\120\001\002\000\004\050\127\001" +
    "\002\000\010\012\123\065\125\074\122\001\002\000\042" +
    "\002\uff6a\007\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\021" +
    "\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a\064\uff6a\065\uff6a" +
    "\073\uff6a\074\uff6a\102\uff6a\001\002\000\042\002\uff6b\007" +
    "\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\021\uff6b\025\uff6b" +
    "\026\uff6b\027\uff6b\033\uff6b\064\uff6b\065\uff6b\073\uff6b\074" +
    "\uff6b\102\uff6b\001\002\000\042\002\uff71\007\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\021\uff71\025\uff71\026\uff71\027" +
    "\uff71\033\uff71\064\uff71\065\126\073\uff71\074\uff71\102\uff71" +
    "\001\002\000\040\002\uff70\007\uff70\014\uff70\015\uff70\016" +
    "\uff70\017\uff70\021\uff70\025\uff70\026\uff70\027\uff70\033\uff70" +
    "\064\uff70\073\uff70\074\uff70\102\uff70\001\002\000\040\002" +
    "\uff72\007\uff72\014\uff72\015\uff72\016\uff72\017\uff72\021\uff72" +
    "\025\uff72\026\uff72\027\uff72\033\uff72\064\uff72\073\uff72\074" +
    "\uff72\102\uff72\001\002\000\006\012\123\074\122\001\002" +
    "\000\004\065\131\001\002\000\040\002\uff6c\007\uff6c\014" +
    "\uff6c\015\uff6c\016\uff6c\017\uff6c\021\uff6c\025\uff6c\026\uff6c" +
    "\027\uff6c\033\uff6c\064\uff6c\073\uff6c\074\uff6c\102\uff6c\001" +
    "\002\000\004\065\134\001\002\000\040\002\uff6e\007\uff6e" +
    "\014\uff6e\015\uff6e\016\uff6e\017\uff6e\021\uff6e\025\uff6e\026" +
    "\uff6e\027\uff6e\033\uff6e\064\uff6e\073\uff6e\074\uff6e\102\uff6e" +
    "\001\002\000\040\002\uff6f\007\uff6f\014\uff6f\015\uff6f\016" +
    "\uff6f\017\uff6f\021\uff6f\025\uff6f\026\uff6f\027\uff6f\033\uff6f" +
    "\064\uff6f\073\uff6f\074\uff6f\102\uff6f\001\002\000\006\012" +
    "\123\074\122\001\002\000\004\065\137\001\002\000\040" +
    "\002\uff6d\007\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\021" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\033\uff6d\064\uff6d\073\uff6d" +
    "\074\uff6d\102\uff6d\001\002\000\004\065\150\001\002\000" +
    "\010\065\144\073\143\074\142\001\002\000\004\073\146" +
    "\001\002\000\042\002\uff76\007\uff76\014\uff76\015\uff76\016" +
    "\uff76\017\uff76\021\uff76\025\uff76\026\uff76\027\uff76\033\uff76" +
    "\064\uff76\065\145\073\uff76\074\uff76\102\uff76\001\002\000" +
    "\040\002\uff74\007\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\021\uff74\025\uff74\026\uff74\027\uff74\033\uff74\064\uff74\073" +
    "\uff74\074\uff74\102\uff74\001\002\000\040\002\uff77\007\uff77" +
    "\014\uff77\015\uff77\016\uff77\017\uff77\021\uff77\025\uff77\026" +
    "\uff77\027\uff77\033\uff77\064\uff77\073\uff77\074\uff77\102\uff77" +
    "\001\002\000\004\065\147\001\002\000\040\002\uff73\007" +
    "\uff73\014\uff73\015\uff73\016\uff73\017\uff73\021\uff73\025\uff73" +
    "\026\uff73\027\uff73\033\uff73\064\uff73\073\uff73\074\uff73\102" +
    "\uff73\001\002\000\040\002\uff75\007\uff75\014\uff75\015\uff75" +
    "\016\uff75\017\uff75\021\uff75\025\uff75\026\uff75\027\uff75\033" +
    "\uff75\064\uff75\073\uff75\074\uff75\102\uff75\001\002\000\004" +
    "\074\152\001\002\000\004\050\153\001\002\000\006\013" +
    "\155\074\154\001\002\000\042\002\uff66\007\uff66\014\uff66" +
    "\015\uff66\016\uff66\017\uff66\021\uff66\025\uff66\026\uff66\027" +
    "\uff66\033\uff66\064\uff66\065\uff66\073\uff66\074\uff66\102\uff66" +
    "\001\002\000\042\002\uff67\007\uff67\014\uff67\015\uff67\016" +
    "\uff67\017\uff67\021\uff67\025\uff67\026\uff67\027\uff67\033\uff67" +
    "\064\uff67\065\uff67\073\uff67\074\uff67\102\uff67\001\002\000" +
    "\042\002\uff68\007\uff68\014\uff68\015\uff68\016\uff68\017\uff68" +
    "\021\uff68\025\uff68\026\uff68\027\uff68\033\uff68\064\uff68\065" +
    "\157\073\uff68\074\uff68\102\uff68\001\002\000\040\002\uff69" +
    "\007\uff69\014\uff69\015\uff69\016\uff69\017\uff69\021\uff69\025" +
    "\uff69\026\uff69\027\uff69\033\uff69\064\uff69\073\uff69\074\uff69" +
    "\102\uff69\001\002\000\006\002\uff88\007\uff88\001\002\000" +
    "\004\006\220\001\002\000\022\006\173\020\172\044\166" +
    "\045\167\064\054\065\164\073\051\074\170\001\002\000" +
    "\012\064\054\065\uff54\073\051\074\103\001\002\000\004" +
    "\006\213\001\002\000\024\020\172\044\166\045\167\046" +
    "\210\064\054\067\106\071\105\073\051\074\103\001\002" +
    "\000\012\064\uff4d\065\uff4d\073\uff4d\074\uff4d\001\002\000" +
    "\012\064\uff4c\065\uff4c\073\uff4c\074\uff4c\001\002\000\030" +
    "\020\uff43\044\uff43\045\uff43\046\uff43\064\uff43\065\uff53\067" +
    "\uff43\070\uff43\071\uff43\073\uff43\074\uff43\001\002\000\004" +
    "\065\177\001\002\000\012\064\uff4b\065\uff4b\073\uff4b\074" +
    "\uff4b\001\002\000\036\007\175\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\176" +
    "\001\002\000\040\002\uff5a\007\uff5a\014\uff5a\015\uff5a\016" +
    "\uff5a\017\uff5a\021\uff5a\025\uff5a\026\uff5a\027\uff5a\033\uff5a" +
    "\064\uff5a\073\uff5a\074\uff5a\102\uff5a\001\002\000\040\002" +
    "\uff5c\007\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\021\uff5c" +
    "\025\uff5c\026\uff5c\027\uff5c\033\uff5c\064\uff5c\073\uff5c\074" +
    "\uff5c\102\uff5c\001\002\000\004\006\200\001\002\000\036" +
    "\007\202\014\uff63\015\uff63\016\uff63\017\uff63\021\uff63\025" +
    "\uff63\026\uff63\027\uff63\033\uff63\064\uff63\073\uff63\074\uff63" +
    "\102\uff63\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\040\002\uff5e\007" +
    "\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\021\uff5e\025\uff5e" +
    "\026\uff5e\027\uff5e\033\uff5e\064\uff5e\073\uff5e\074\uff5e\102" +
    "\uff5e\001\002\000\004\007\uff62\001\002\000\004\007\205" +
    "\001\002\000\040\002\uff61\007\uff61\014\uff61\015\uff61\016" +
    "\uff61\017\uff61\021\uff61\025\uff61\026\uff61\027\uff61\033\uff61" +
    "\064\uff61\073\uff61\074\uff61\102\uff61\001\002\000\012\064" +
    "\054\065\uff55\073\051\074\103\001\002\000\010\065\uff56" +
    "\067\106\071\105\001\002\000\010\064\054\073\051\074" +
    "\103\001\002\000\010\065\uff58\067\106\071\105\001\002" +
    "\000\010\065\uff59\067\106\071\105\001\002\000\036\007" +
    "\215\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\004\007\216\001\002\000\040\002\uff60" +
    "\007\uff60\014\uff60\015\uff60\016\uff60\017\uff60\021\uff60\025" +
    "\uff60\026\uff60\027\uff60\033\uff60\064\uff60\073\uff60\074\uff60" +
    "\102\uff60\001\002\000\040\002\uff5f\007\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\021\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\033\uff5f\064\uff5f\073\uff5f\074\uff5f\102\uff5f\001\002\000" +
    "\010\065\uff57\067\106\071\105\001\002\000\036\007\222" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\223\001\002\000\040\002\uff5b\007" +
    "\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b\021\uff5b\025\uff5b" +
    "\026\uff5b\027\uff5b\033\uff5b\064\uff5b\073\uff5b\074\uff5b\102" +
    "\uff5b\001\002\000\040\002\uff5d\007\uff5d\014\uff5d\015\uff5d" +
    "\016\uff5d\017\uff5d\021\uff5d\025\uff5d\026\uff5d\027\uff5d\033" +
    "\uff5d\064\uff5d\073\uff5d\074\uff5d\102\uff5d\001\002\000\040" +
    "\002\uff41\007\uff41\014\uff41\015\uff41\016\uff41\017\uff41\021" +
    "\uff41\025\uff41\026\uff41\027\uff41\033\uff41\064\uff41\073\uff41" +
    "\074\uff41\102\uff41\001\002\000\004\073\226\001\002\000" +
    "\004\065\227\001\002\000\040\002\uff42\007\uff42\014\uff42" +
    "\015\uff42\016\uff42\017\uff42\021\uff42\025\uff42\026\uff42\027" +
    "\uff42\033\uff42\064\uff42\073\uff42\074\uff42\102\uff42\001\002" +
    "\000\014\010\234\011\233\064\054\073\051\074\103\001" +
    "\002\000\040\002\uff8f\007\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\021\uff8f\025\uff8f\026\uff8f\027\uff8f\033\uff8f\064" +
    "\uff8f\073\uff8f\074\uff8f\102\uff8f\001\002\000\040\002\uff8e" +
    "\007\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\033\uff8e\064\uff8e\073\uff8e\074\uff8e" +
    "\102\uff8e\001\002\000\040\002\uff90\007\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\021\uff90\025\uff90\026\uff90\027\uff90" +
    "\033\uff90\064\uff90\073\uff90\074\uff90\102\uff90\001\002\000" +
    "\040\002\uff91\007\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\021\uff91\025\uff91\026\uff91\027\uff91\033\uff91\064\uff91\073" +
    "\uff91\074\uff91\102\uff91\001\002\000\044\002\uff92\007\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\021\uff92\025\uff92\026" +
    "\uff92\027\uff92\033\uff92\064\uff92\067\106\071\105\073\uff92" +
    "\074\uff92\102\uff92\001\002\000\040\002\uff36\007\uff36\014" +
    "\uff36\015\uff36\016\uff36\017\uff36\021\uff36\025\uff36\026\uff36" +
    "\027\uff36\033\uff36\064\uff36\073\uff36\074\uff36\102\uff36\001" +
    "\002\000\010\022\241\023\242\024\240\001\002\000\004" +
    "\065\245\001\002\000\004\065\244\001\002\000\004\065" +
    "\243\001\002\000\040\002\uff38\007\uff38\014\uff38\015\uff38" +
    "\016\uff38\017\uff38\021\uff38\025\uff38\026\uff38\027\uff38\033" +
    "\uff38\064\uff38\073\uff38\074\uff38\102\uff38\001\002\000\040" +
    "\002\uff39\007\uff39\014\uff39\015\uff39\016\uff39\017\uff39\021" +
    "\uff39\025\uff39\026\uff39\027\uff39\033\uff39\064\uff39\073\uff39" +
    "\074\uff39\102\uff39\001\002\000\040\002\uff37\007\uff37\014" +
    "\uff37\015\uff37\016\uff37\017\uff37\021\uff37\025\uff37\026\uff37" +
    "\027\uff37\033\uff37\064\uff37\073\uff37\074\uff37\102\uff37\001" +
    "\002\000\004\002\uffa8\001\002\000\004\074\250\001\002" +
    "\000\004\065\uff51\001\002\000\004\065\252\001\002\000" +
    "\004\006\253\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\255" +
    "\001\002\000\040\002\uff65\007\uff65\014\uff65\015\uff65\016" +
    "\uff65\017\uff65\021\uff65\025\uff65\026\uff65\027\uff65\033\uff65" +
    "\064\uff65\073\uff65\074\uff65\102\uff65\001\002\000\040\002" +
    "\uff3b\007\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b\021\uff3b" +
    "\025\uff3b\026\uff3b\027\uff3b\033\uff3b\064\uff3b\073\uff3b\074" +
    "\uff3b\102\uff3b\001\002\000\040\002\uff3c\007\uff3c\014\uff3c" +
    "\015\uff3c\016\uff3c\017\uff3c\021\uff3c\025\uff3c\026\uff3c\027" +
    "\uff3c\033\uff3c\064\uff3c\073\uff3c\074\uff3c\102\uff3c\001\002" +
    "\000\024\007\u0131\010\u0137\011\u0132\012\u0139\013\u0138\046" +
    "\u0136\066\u0133\074\u0135\107\u013a\001\002\000\006\005\u0126" +
    "\007\u0125\001\002\000\004\006\u0122\001\002\000\006\005" +
    "\265\007\264\001\002\000\010\005\273\007\272\074\271" +
    "\001\002\000\004\006\266\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\007\270\001\002\000\004\002\uffa9\001\002\000\010" +
    "\005\325\006\324\074\323\001\002\000\004\005\316\001" +
    "\002\000\036\006\275\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\007\315\001\002" +
    "\000\036\007\277\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\006\002\uff9f\007\301\001" +
    "\002\000\006\002\ufffe\007\300\001\002\000\004\002\uffa3" +
    "\001\002\000\010\002\ufffd\007\303\074\302\001\002\000" +
    "\006\002\uffcb\074\304\001\002\000\004\002\uffa2\001\002" +
    "\000\006\002\uffca\074\305\001\002\000\006\002\uffc9\074" +
    "\306\001\002\000\006\002\uffc8\074\307\001\002\000\006" +
    "\002\uffc7\074\310\001\002\000\006\002\uffc6\074\311\001" +
    "\002\000\006\002\uffc5\074\312\001\002\000\006\002\uffc4" +
    "\074\313\001\002\000\006\002\uffc3\074\314\001\002\000" +
    "\004\002\uffc2\001\002\000\004\002\uff9e\001\002\000\004" +
    "\006\317\001\002\000\036\007\321\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\322\001\002\000\004\002\uffa6\001\002\000\004\002\uffa5" +
    "\001\002\000\010\005\335\006\334\074\333\001\002\000" +
    "\034\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\004\006\326\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\007\330\001\002\000\004\002\uffde\001\002\000" +
    "\004\007\332\001\002\000\004\002\uffab\001\002\000\010" +
    "\005\345\006\344\074\343\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\006\336\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\340" +
    "\001\002\000\004\002\uffdd\001\002\000\004\007\342\001" +
    "\002\000\004\002\uffd4\001\002\000\010\005\355\006\354" +
    "\074\353\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\006\346\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\350\001\002\000\004" +
    "\002\uffdc\001\002\000\004\007\352\001\002\000\004\002" +
    "\uffd3\001\002\000\010\005\365\006\364\074\363\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\006\356\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\360\001\002\000\004\002\uffdb\001\002" +
    "\000\004\007\362\001\002\000\004\002\uffd2\001\002\000" +
    "\010\005\375\006\374\074\373\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\006\366\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\370\001\002\000\004\002\uffda\001\002\000\004\007\372" +
    "\001\002\000\004\002\uffd1\001\002\000\010\005\u0105\006" +
    "\u0104\074\u0103\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\006\376" +
    "\001\002\000\034\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\004\007\u0100\001\002\000" +
    "\004\002\uffd9\001\002\000\004\007\u0102\001\002\000\004" +
    "\002\uffd0\001\002\000\010\005\u010d\006\u010c\074\u010b\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\006\u0106\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\u0108\001\002\000\004\002\uffd8\001" +
    "\002\000\004\007\u010a\001\002\000\004\002\uffcf\001\002" +
    "\000\010\005\u0115\006\u0114\074\u0113\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\006\u010e\001\002\000\034\014\053\015\025" +
    "\016\063\017\042\021\035\025\041\026\056\027\024\033" +
    "\052\064\054\073\051\074\037\102\047\001\002\000\004" +
    "\007\u0110\001\002\000\004\002\uffd7\001\002\000\004\007" +
    "\u0112\001\002\000\004\002\uffce\001\002\000\006\005\u011c" +
    "\006\u011b\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\006\u0116\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\u0118\001\002\000\004" +
    "\002\uffd6\001\002\000\004\007\u011a\001\002\000\004\002" +
    "\uffcd\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\006\u011d\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u011f\001\002\000\004\002" +
    "\uffd5\001\002\000\004\007\u0121\001\002\000\004\002\uffcc" +
    "\001\002\000\034\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\004\007\u0124\001\002\000" +
    "\004\002\uffac\001\002\000\004\005\u012e\001\002\000\036" +
    "\006\u0128\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u012d\001\002\000\036\007" +
    "\u012a\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\006\002\uffa1\007\u012c\001\002\000\006" +
    "\002\001\007\u012b\001\002\000\004\002\uffa4\001\002\000" +
    "\004\002\uffb7\001\002\000\004\002\uffa0\001\002\000\004" +
    "\006\u012f\001\002\000\004\007\u0130\001\002\000\004\002" +
    "\uffa7\001\002\000\004\005\u01b2\001\002\000\010\005\uff95" +
    "\007\uff95\074\uff95\001\002\000\010\012\u01b0\013\u01b1\074" +
    "\u01af\001\002\000\004\007\u01aa\001\002\000\024\007\u013e" +
    "\010\u0137\011\u0132\012\u0139\013\u0138\046\u0136\066\u0133\074" +
    "\u0140\107\u013a\001\002\000\004\073\u013d\001\002\000\010" +
    "\005\uff96\007\uff96\074\uff96\001\002\000\010\005\uff8a\007" +
    "\uff8a\074\uff8a\001\002\000\010\005\uff89\007\uff89\074\uff89" +
    "\001\002\000\014\005\uff94\007\uff94\010\u013c\011\u013b\074" +
    "\uff94\001\002\000\010\005\uff97\007\uff97\074\uff97\001\002" +
    "\000\010\005\uff98\007\uff98\074\uff98\001\002\000\010\005" +
    "\uff93\007\uff93\074\uff93\001\002\000\004\005\u01a6\001\002" +
    "\000\004\007\u01a1\001\002\000\024\007\u0141\010\u0137\011" +
    "\u0132\012\u0139\013\u0138\046\u0136\066\u0133\074\u0143\107\u013a" +
    "\001\002\000\004\005\u019d\001\002\000\004\007\u0198\001" +
    "\002\000\024\007\u0144\010\u0137\011\u0132\012\u0139\013\u0138" +
    "\046\u0136\066\u0133\074\u0146\107\u013a\001\002\000\004\005" +
    "\u0194\001\002\000\004\007\u018f\001\002\000\024\007\u0147" +
    "\010\u0137\011\u0132\012\u0139\013\u0138\046\u0136\066\u0133\074" +
    "\u0149\107\u013a\001\002\000\004\005\u018b\001\002\000\004" +
    "\007\u0186\001\002\000\024\007\u014a\010\u0137\011\u0132\012" +
    "\u0139\013\u0138\046\u0136\066\u0133\074\u014c\107\u013a\001\002" +
    "\000\004\005\u0182\001\002\000\004\007\u017d\001\002\000" +
    "\024\007\u014d\010\u0137\011\u0132\012\u0139\013\u0138\046\u0136" +
    "\066\u0133\074\u014f\107\u013a\001\002\000\004\005\u0179\001" +
    "\002\000\004\007\u0174\001\002\000\024\007\u0150\010\u0137" +
    "\011\u0132\012\u0139\013\u0138\046\u0136\066\u0133\074\u0152\107" +
    "\u013a\001\002\000\004\005\u0170\001\002\000\004\007\u016b" +
    "\001\002\000\024\007\u0153\010\u0137\011\u0132\012\u0139\013" +
    "\u0138\046\u0136\066\u0133\074\u0155\107\u013a\001\002\000\004" +
    "\005\u0167\001\002\000\004\007\u0162\001\002\000\024\007" +
    "\u0156\010\u0137\011\u0132\012\u0139\013\u0138\046\u0136\066\u0133" +
    "\074\u0158\107\u013a\001\002\000\004\005\u015e\001\002\000" +
    "\004\007\u0159\001\002\000\020\010\u0137\011\u0132\012\u0139" +
    "\013\u0138\046\u0136\066\u0133\107\u013a\001\002\000\004\005" +
    "\u015a\001\002\000\004\006\u015b\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\007\u015d\001\002\000\004\002\uffb8\001\002\000" +
    "\004\006\u015f\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\u0161" +
    "\001\002\000\004\002\uffad\001\002\000\004\005\u0163\001" +
    "\002\000\004\006\u0164\001\002\000\034\014\053\015\025" +
    "\016\063\017\042\021\035\025\041\026\056\027\024\033" +
    "\052\064\054\073\051\074\037\102\047\001\002\000\004" +
    "\007\u0166\001\002\000\004\002\uffb9\001\002\000\004\006" +
    "\u0168\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\007\u016a\001\002" +
    "\000\004\002\uffae\001\002\000\004\005\u016c\001\002\000" +
    "\004\006\u016d\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\u016f" +
    "\001\002\000\004\002\uffba\001\002\000\004\006\u0171\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\u0173\001\002\000\004" +
    "\002\uffaf\001\002\000\004\005\u0175\001\002\000\004\006" +
    "\u0176\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\007\u0178\001\002" +
    "\000\004\002\uffbb\001\002\000\004\006\u017a\001\002\000" +
    "\034\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\004\007\u017c\001\002\000\004\002\uffb0" +
    "\001\002\000\004\005\u017e\001\002\000\004\006\u017f\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\u0181\001\002\000\004" +
    "\002\uffbc\001\002\000\004\006\u0183\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u0185\001\002\000\004\002\uffb1\001\002" +
    "\000\004\005\u0187\001\002\000\004\006\u0188\001\002\000" +
    "\034\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\004\007\u018a\001\002\000\004\002\uffbd" +
    "\001\002\000\004\006\u018c\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\007\u018e\001\002\000\004\002\uffb2\001\002\000\004" +
    "\005\u0190\001\002\000\004\006\u0191\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u0193\001\002\000\004\002\uffbe\001\002" +
    "\000\004\006\u0195\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\u0197\001\002\000\004\002\uffb3\001\002\000\004\005\u0199" +
    "\001\002\000\004\006\u019a\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\007\u019c\001\002\000\004\002\uffbf\001\002\000\004" +
    "\006\u019e\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u01a0\001" +
    "\002\000\004\002\uffb4\001\002\000\004\005\u01a2\001\002" +
    "\000\004\006\u01a3\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\u01a5\001\002\000\004\002\uffc0\001\002\000\004\006\u01a7" +
    "\001\002\000\034\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\004\007\u01a9\001\002\000" +
    "\004\002\uffb5\001\002\000\004\005\u01ab\001\002\000\004" +
    "\006\u01ac\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u01ae\001" +
    "\002\000\004\002\uffc1\001\002\000\010\005\uff8b\007\uff8b" +
    "\074\uff8b\001\002\000\010\005\uff8d\007\uff8d\074\uff8d\001" +
    "\002\000\010\005\uff8c\007\uff8c\074\uff8c\001\002\000\004" +
    "\006\u01b3\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u01b5\001" +
    "\002\000\004\002\uffb6\001\002\000\004\006\u01b7\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u01b9\001\002\000\004\002" +
    "\uffaa\001\002\000\006\005\uff9d\007\uff9d\001\002\000\006" +
    "\006\u01c4\074\u01c3\001\002\000\004\074\u0158\001\002\000" +
    "\004\007\u01be\001\002\000\004\005\u01bf\001\002\000\004" +
    "\006\u01c0\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u01c2\001" +
    "\002\000\004\002\uffe8\001\002\000\006\006\u01cc\074\u01cb" +
    "\001\002\000\004\074\u0158\001\002\000\004\007\u01c6\001" +
    "\002\000\004\005\u01c7\001\002\000\004\006\u01c8\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u01ca\001\002\000\004\002" +
    "\uffe7\001\002\000\006\006\u01d4\074\u01d3\001\002\000\004" +
    "\074\u0158\001\002\000\004\007\u01ce\001\002\000\004\005" +
    "\u01cf\001\002\000\004\006\u01d0\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\007\u01d2\001\002\000\004\002\uffe6\001\002\000" +
    "\006\006\u01dc\074\u01db\001\002\000\004\074\u0158\001\002" +
    "\000\004\007\u01d6\001\002\000\004\005\u01d7\001\002\000" +
    "\004\006\u01d8\001\002\000\034\014\053\015\025\016\063" +
    "\017\042\021\035\025\041\026\056\027\024\033\052\064" +
    "\054\073\051\074\037\102\047\001\002\000\004\007\u01da" +
    "\001\002\000\004\002\uffe5\001\002\000\006\006\u01e4\074" +
    "\u01e3\001\002\000\004\074\u0158\001\002\000\004\007\u01de" +
    "\001\002\000\004\005\u01df\001\002\000\004\006\u01e0\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\u01e2\001\002\000\004" +
    "\002\uffe4\001\002\000\006\006\u01ec\074\u01eb\001\002\000" +
    "\004\074\u0158\001\002\000\004\007\u01e6\001\002\000\004" +
    "\005\u01e7\001\002\000\004\006\u01e8\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u01ea\001\002\000\004\002\uffe3\001\002" +
    "\000\006\006\u01f4\074\u01f3\001\002\000\004\074\u0158\001" +
    "\002\000\004\007\u01ee\001\002\000\004\005\u01ef\001\002" +
    "\000\004\006\u01f0\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\u01f2\001\002\000\004\002\uffe2\001\002\000\006\006\u01fc" +
    "\074\u01fb\001\002\000\004\074\u0158\001\002\000\004\007" +
    "\u01f6\001\002\000\004\005\u01f7\001\002\000\004\006\u01f8" +
    "\001\002\000\034\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\004\007\u01fa\001\002\000" +
    "\004\002\uffe1\001\002\000\004\006\u0203\001\002\000\004" +
    "\074\u0158\001\002\000\004\007\u01fe\001\002\000\004\005" +
    "\u01ff\001\002\000\004\006\u0200\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\007\u0202\001\002\000\004\002\uffe0\001\002\000" +
    "\004\074\u0158\001\002\000\004\007\u0205\001\002\000\004" +
    "\005\u0206\001\002\000\004\006\u0207\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u0209\001\002\000\004\002\uffdf\001\002" +
    "\000\004\006\u020b\001\002\000\004\007\u020c\001\002\000" +
    "\004\005\u020d\001\002\000\004\006\u020e\001\002\000\004" +
    "\007\u020f\001\002\000\004\002\uffff\001\002\000\010\004" +
    "\u0221\006\u0222\074\u0220\001\002\000\004\074\u0158\001\002" +
    "\000\004\006\u0213\001\002\000\004\074\u0158\001\002\000" +
    "\004\007\u0215\001\002\000\004\005\u0216\001\002\000\004" +
    "\006\u0217\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u0219\001" +
    "\002\000\004\002\ufff2\001\002\000\004\007\u021b\001\002" +
    "\000\004\005\u021c\001\002\000\004\006\u021d\001\002\000" +
    "\034\014\053\015\025\016\063\017\042\021\035\025\041" +
    "\026\056\027\024\033\052\064\054\073\051\074\037\102" +
    "\047\001\002\000\004\007\u021f\001\002\000\004\002\ufffc" +
    "\001\002\000\010\004\u0231\006\u0232\074\u0230\001\002\000" +
    "\004\006\u0229\001\002\000\004\074\u0158\001\002\000\004" +
    "\007\u0224\001\002\000\004\005\u0225\001\002\000\004\006" +
    "\u0226\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\007\u0228\001\002" +
    "\000\004\002\ufffb\001\002\000\004\074\u0158\001\002\000" +
    "\004\007\u022b\001\002\000\004\005\u022c\001\002\000\004" +
    "\006\u022d\001\002\000\034\014\053\015\025\016\063\017" +
    "\042\021\035\025\041\026\056\027\024\033\052\064\054" +
    "\073\051\074\037\102\047\001\002\000\004\007\u022f\001" +
    "\002\000\004\002\ufff1\001\002\000\010\004\u0241\006\u0242" +
    "\074\u0240\001\002\000\004\006\u0239\001\002\000\004\074" +
    "\u0158\001\002\000\004\007\u0234\001\002\000\004\005\u0235" +
    "\001\002\000\004\006\u0236\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\007\u0238\001\002\000\004\002\ufffa\001\002\000\004" +
    "\074\u0158\001\002\000\004\007\u023b\001\002\000\004\005" +
    "\u023c\001\002\000\004\006\u023d\001\002\000\034\014\053" +
    "\015\025\016\063\017\042\021\035\025\041\026\056\027" +
    "\024\033\052\064\054\073\051\074\037\102\047\001\002" +
    "\000\004\007\u023f\001\002\000\004\002\ufff0\001\002\000" +
    "\010\004\u0252\006\u0251\074\u0250\001\002\000\004\006\u0249" +
    "\001\002\000\004\074\u0158\001\002\000\004\007\u0244\001" +
    "\002\000\004\005\u0245\001\002\000\004\006\u0246\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u0248\001\002\000\004\002" +
    "\ufff9\001\002\000\004\074\u0158\001\002\000\004\007\u024b" +
    "\001\002\000\004\005\u024c\001\002\000\004\006\u024d\001" +
    "\002\000\034\014\053\015\025\016\063\017\042\021\035" +
    "\025\041\026\056\027\024\033\052\064\054\073\051\074" +
    "\037\102\047\001\002\000\004\007\u024f\001\002\000\004" +
    "\002\uffef\001\002\000\010\004\u0261\006\u0262\074\u0260\001" +
    "\002\000\004\074\u0158\001\002\000\004\006\u0253\001\002" +
    "\000\004\074\u0158\001\002\000\004\007\u0255\001\002\000" +
    "\004\005\u0256\001\002\000\004\006\u0257\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\u0259\001\002\000\004\002\uffee\001" +
    "\002\000\004\007\u025b\001\002\000\004\005\u025c\001\002" +
    "\000\004\006\u025d\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\u025f\001\002\000\004\002\ufff8\001\002\000\010\004\u0271" +
    "\006\u0272\074\u0270\001\002\000\004\006\u0269\001\002\000" +
    "\004\074\u0158\001\002\000\004\007\u0264\001\002\000\004" +
    "\005\u0265\001\002\000\004\006\u0266\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u0268\001\002\000\004\002\ufff7\001\002" +
    "\000\004\074\u0158\001\002\000\004\007\u026b\001\002\000" +
    "\004\005\u026c\001\002\000\004\006\u026d\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\u026f\001\002\000\004\002\uffed\001" +
    "\002\000\010\004\u0282\006\u0281\074\u0280\001\002\000\004" +
    "\006\u0279\001\002\000\004\074\u0158\001\002\000\004\007" +
    "\u0274\001\002\000\004\005\u0275\001\002\000\004\006\u0276" +
    "\001\002\000\034\014\053\015\025\016\063\017\042\021" +
    "\035\025\041\026\056\027\024\033\052\064\054\073\051" +
    "\074\037\102\047\001\002\000\004\007\u0278\001\002\000" +
    "\004\002\ufff6\001\002\000\004\074\u0158\001\002\000\004" +
    "\007\u027b\001\002\000\004\005\u027c\001\002\000\004\006" +
    "\u027d\001\002\000\034\014\053\015\025\016\063\017\042" +
    "\021\035\025\041\026\056\027\024\033\052\064\054\073" +
    "\051\074\037\102\047\001\002\000\004\007\u027f\001\002" +
    "\000\004\002\uffec\001\002\000\010\004\u0291\006\u0292\074" +
    "\u0290\001\002\000\004\074\u0158\001\002\000\004\006\u0283" +
    "\001\002\000\004\074\u0158\001\002\000\004\007\u0285\001" +
    "\002\000\004\005\u0286\001\002\000\004\006\u0287\001\002" +
    "\000\034\014\053\015\025\016\063\017\042\021\035\025" +
    "\041\026\056\027\024\033\052\064\054\073\051\074\037" +
    "\102\047\001\002\000\004\007\u0289\001\002\000\004\002" +
    "\uffeb\001\002\000\004\007\u028b\001\002\000\004\005\u028c" +
    "\001\002\000\004\006\u028d\001\002\000\034\014\053\015" +
    "\025\016\063\017\042\021\035\025\041\026\056\027\024" +
    "\033\052\064\054\073\051\074\037\102\047\001\002\000" +
    "\004\007\u028f\001\002\000\004\002\ufff5\001\002\000\006" +
    "\004\u02a1\006\u02a0\001\002\000\004\006\u0299\001\002\000" +
    "\004\074\u0158\001\002\000\004\007\u0294\001\002\000\004" +
    "\005\u0295\001\002\000\004\006\u0296\001\002\000\034\014" +
    "\053\015\025\016\063\017\042\021\035\025\041\026\056" +
    "\027\024\033\052\064\054\073\051\074\037\102\047\001" +
    "\002\000\004\007\u0298\001\002\000\004\002\ufff4\001\002" +
    "\000\004\074\u0158\001\002\000\004\007\u029b\001\002\000" +
    "\004\005\u029c\001\002\000\004\006\u029d\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\u029f\001\002\000\004\002\uffea\001" +
    "\002\000\004\074\u0158\001\002\000\004\006\u02a2\001\002" +
    "\000\004\074\u0158\001\002\000\004\007\u02a4\001\002\000" +
    "\004\005\u02a5\001\002\000\004\006\u02a6\001\002\000\034" +
    "\014\053\015\025\016\063\017\042\021\035\025\041\026" +
    "\056\027\024\033\052\064\054\073\051\074\037\102\047" +
    "\001\002\000\004\007\u02a8\001\002\000\004\002\uffe9\001" +
    "\002\000\004\007\u02aa\001\002\000\004\005\u02ab\001\002" +
    "\000\004\006\u02ac\001\002\000\034\014\053\015\025\016" +
    "\063\017\042\021\035\025\041\026\056\027\024\033\052" +
    "\064\054\073\051\074\037\102\047\001\002\000\004\007" +
    "\u02ae\001\002\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ac\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u01b9\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\014\003\262\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\027\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\157\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\103\030\043\031\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\070\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\112\031\054\001\001\000" +
    "\006\030\107\031\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\170" +
    "\027\164\030\043\031\054\032\162\001\001\000\010\027" +
    "\216\030\043\031\054\001\001\000\002\001\001\000\012" +
    "\027\206\030\043\031\054\032\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\173\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\200\001\001\000\050\011\202\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\004\050" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\211\030\043\031\054\001\001\000\002\001\001\000" +
    "\010\027\210\030\043\031\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\213\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\220\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\234\030\043\031\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\253\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u0133\004\012\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\266" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\273\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\050\011\275" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\317\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\330\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\050\011\326\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\340\012\037\013\030\014\047\017\042\020\060" +
    "\021\057\026\044\027\033\030\043\031\054\033\035\035" +
    "\061\036\045\037\026\040\025\041\032\044\031\045\056" +
    "\001\001\000\002\001\001\000\050\011\336\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\350\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\050\011" +
    "\346\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\360\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\050\011\356\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\370\012\037\013\030\014\047\017\042\020\060\021" +
    "\057\026\044\027\033\030\043\031\054\033\035\035\061" +
    "\036\045\037\026\040\025\041\032\044\031\045\056\001" +
    "\001\000\002\001\001\000\050\011\366\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\u0100\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\050\011\376" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\u0108\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\050\011\u0106\012\037\013\030\014\047\017\042\020" +
    "\060\021\057\026\044\027\033\030\043\031\054\033\035" +
    "\035\061\036\045\037\026\040\025\041\032\044\031\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u0110\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\050\011\u010e\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u0118\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\050\011\u0116\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u011f\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\050\011\u011d\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u0122\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u0126\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\050\011" +
    "\u0128\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u013e" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0141\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u0144\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0147\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u014a\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u014d\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0150\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0153\004\012\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0156" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\u015b\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\u015f\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\u0164\012\037\013\030\014\047\017\042\020\060" +
    "\021\057\026\044\027\033\030\043\031\054\033\035\035" +
    "\061\036\045\037\026\040\025\041\032\044\031\045\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u0168\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\u016d\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\u0171" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\u0176\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\u017a\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u017f\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\u0183\012\037\013\030\014\047\017\042\020\060" +
    "\021\057\026\044\027\033\030\043\031\054\033\035\035" +
    "\061\036\045\037\026\040\025\041\032\044\031\045\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\u0188\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\u018c\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\u0191\012\037\013\030\014\047\017\042\020" +
    "\060\021\057\026\044\027\033\030\043\031\054\033\035" +
    "\035\061\036\045\037\026\040\025\041\032\044\031\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\u0195\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\u019a\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u019e\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u01a3\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\u01a7\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\u01ac\012\037\013\030\014\047\017\042\020\060\021" +
    "\057\026\044\027\033\030\043\031\054\033\035\035\061" +
    "\036\045\037\026\040\025\041\032\044\031\045\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\u01b3\012\037\013\030\014\047\017\042\020\060" +
    "\021\057\026\044\027\033\030\043\031\054\033\035\035" +
    "\061\036\045\037\026\040\025\041\032\044\031\045\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u01b7\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u01bc\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\u01c0\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u01c4" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\u01c8" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u01cc\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\u01d0\012\037\013\030\014\047\017\042\020\060\021" +
    "\057\026\044\027\033\030\043\031\054\033\035\035\061" +
    "\036\045\037\026\040\025\041\032\044\031\045\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u01d4\004\012\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\u01d8\012\037\013\030\014\047\017\042\020" +
    "\060\021\057\026\044\027\033\030\043\031\054\033\035" +
    "\035\061\036\045\037\026\040\025\041\032\044\031\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u01dc\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\u01e0\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u01e4\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\u01e8\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u01ec\004\012\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\u01f0\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u01f4\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\u01f8\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01fc\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u0200\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0203\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\u0207\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0219\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\014\003\u0213\004\012\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\u0217\012\037\013\030\014\047\017\042\020" +
    "\060\021\057\026\044\027\033\030\043\031\054\033\035" +
    "\035\061\036\045\037\026\040\025\041\032\044\031\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u021d\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0222\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u0226\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u0229\004\012\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\011\u022d\012\037\013\030\014\047\017\042" +
    "\020\060\021\057\026\044\027\033\030\043\031\054\033" +
    "\035\035\061\036\045\037\026\040\025\041\032\044\031" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u0232\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\u0236\012\037" +
    "\013\030\014\047\017\042\020\060\021\057\026\044\027" +
    "\033\030\043\031\054\033\035\035\061\036\045\037\026" +
    "\040\025\041\032\044\031\045\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0239\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\u023d\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0242\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\u0246\012\037\013\030\014\047\017\042\020\060\021" +
    "\057\026\044\027\033\030\043\031\054\033\035\035\061" +
    "\036\045\037\026\040\025\041\032\044\031\045\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0249" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\011\u024d" +
    "\012\037\013\030\014\047\017\042\020\060\021\057\026" +
    "\044\027\033\030\043\031\054\033\035\035\061\036\045" +
    "\037\026\040\025\041\032\044\031\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0259\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\014\003\u0253\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u0257\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\u025d\012\037\013\030\014\047\017\042\020" +
    "\060\021\057\026\044\027\033\030\043\031\054\033\035" +
    "\035\061\036\045\037\026\040\025\041\032\044\031\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0262\004\012\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\u0266\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0269\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\u026d\012\037\013\030\014" +
    "\047\017\042\020\060\021\057\026\044\027\033\030\043" +
    "\031\054\033\035\035\061\036\045\037\026\040\025\041" +
    "\032\044\031\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0272\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\u0276\012\037\013\030\014\047\017\042\020\060\021\057" +
    "\026\044\027\033\030\043\031\054\033\035\035\061\036" +
    "\045\037\026\040\025\041\032\044\031\045\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0279\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\u027d\012" +
    "\037\013\030\014\047\017\042\020\060\021\057\026\044" +
    "\027\033\030\043\031\054\033\035\035\061\036\045\037" +
    "\026\040\025\041\032\044\031\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0289\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\014\003\u0283\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\011\u0287\012\037\013\030\014\047\017" +
    "\042\020\060\021\057\026\044\027\033\030\043\031\054" +
    "\033\035\035\061\036\045\037\026\040\025\041\032\044" +
    "\031\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\u028d\012\037\013\030\014\047\017\042\020\060" +
    "\021\057\026\044\027\033\030\043\031\054\033\035\035" +
    "\061\036\045\037\026\040\025\041\032\044\031\045\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0292\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\011\u0296\012\037\013\030" +
    "\014\047\017\042\020\060\021\057\026\044\027\033\030" +
    "\043\031\054\033\035\035\061\036\045\037\026\040\025" +
    "\041\032\044\031\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0299\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u029d\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u02a8\004\012\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\014\003\u02a2\004\012\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\u02a6\012\037\013" +
    "\030\014\047\017\042\020\060\021\057\026\044\027\033" +
    "\030\043\031\054\033\035\035\061\036\045\037\026\040" +
    "\025\041\032\044\031\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\011\u02ac\012\037\013\030\014\047" +
    "\017\042\020\060\021\057\026\044\027\033\030\043\031" +
    "\054\033\035\035\061\036\045\037\026\040\025\041\032" +
    "\044\031\045\056\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0;
    int direccionDeMemoria = 20; 
    int ifs = 0;
    int elses=0;
    int whiles = 0;
    int repeats = 0;
    int a=0,n=0;
    String id_sal="",id_ent="";
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
    message="Error de Sintaxis";
        compilador.setError("Se esperaba "+message+" Linea "+(left)+" Columna: "+(right));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");       
        message="Error de Sintaxis";
        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");
        message="Error de Sintaxis";
        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public String newTemporal2(Lexema a, Lexema b){
             String resultado;
           compilador.tres(a.lexema + " = " + b.tres);
             resultado = "t" + contadorTemporales;
           
           return resultado;
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " =  "+op.lexema+" "+a.tres+","+b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

     public String newTemporal1(Object a, Object op, Object b){
        String resultado;

            System.out.println(a);
            System.out.println(op);
            System.out.println(b);
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales +" = "+a+" "+op+" "+b);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public String agregarVariableObj(Lexema a, Lexema b,Lexema c){
                String resultado="";
           //compilador.addCodigoObjeto(a.lexema + " = " + b.tres);
           //  resultado = "t" + contadorTemporales;
           //System.err.println("A:"+a.lexema+"|B:"+b.lexema+"|C:"+c.lexema+"|");  
           if(c.lexema.equals("#")){
               if(b.lexema.equals("verdadero")){
                   resultado="\n    " +a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    " +"MOVLW D'1' "+"\n    " +"MOVWF "+a.lexema+"\n    "+"CLRW";
               }else{
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'0' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }  
           }
           else{
               if(c.lexema.equals("=")){
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'"+b.lexema+"' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }
               else{
                   if(c.lexema.equals(":")){
                        //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+" Corta:"+b.lexema.substring(2, 3));  
                        if (b.lexema.substring(2, 3).equals("a")) {
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTB"+","+b.lexema.substring(3, 4);
                        }
                        else{
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTA"+","+b.lexema.substring(3, 4);
                        }
                   }
                   
               }               
           }
           //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+"|");  
           compilador.addCodigoObjeto(resultado);
           
           return resultado;

    }


    public String agregarCodigoObjeto(String EstCodigo){
            compilador.addCodigoObjeto(EstCodigo);     
            return EstCodigo;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // motorelec ::= MOTORELECT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <MOTORELECT> , se esperaba una estructura MOTORELECT ( SAR | CAR | DETENER) renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // motorelec ::= MOTORELECT PAREIZQ DETENER PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // motorelec ::= MOTORELECT PAREIZQ CAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // motorelec ::= MOTORELECT PAREIZQ SAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // cont ::= CONTADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <contador> , se esperaba final o inicio'(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // cont ::= CONTADOR FINAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // cont ::= CONTADOR INICIO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // retart ::= RETARDO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre '(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // retart ::= RETARDO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta el valor de el retardo  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // retart ::= RETARDO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre ')'  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // retart ::= RETARDO PAREIZQ INTEGERNUM COMA TIEMPO PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("  CALL Retardo_"+n.lexema+t.lexema);
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // srvo ::= SERVO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia servo  "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // srvo ::= SERVO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // f ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo entero");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe y/o no esta declarada");
    }

    n.tres=n.lexema;
    RESULT=n.lexema;                                


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // f ::= PAREIZQ exp PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

RESULT = e;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // f ::= INTEGERNUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema x = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
x.tres=x.lexema;
RESULT = x.lexema;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // t ::= f 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT = s;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // t ::= t MULTIPLICACION f 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema l = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    q = parser.newTemporal1 (q,l.lexema,h);
RESULT = q;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // exp ::= t 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
RESULT = w;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // exp ::= exp RESTA t 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
    r = parser.newTemporal1 (r,g.lexema,v);
RESULT = r;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // exp ::= exp SUMA t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema op = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//a.tres=a.lexema;
    a = parser.newTemporal1 (a,op.lexema,b);
RESULT = a;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // oprel ::= COMPARA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema co = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    co.tres=co.lexema;
        RESULT = co.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // oprel ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema ma = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    ma.tres=ma.lexema;
        RESULT = ma.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // oprel ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema me = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    me.tres=me.lexema;
        RESULT = me.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // oplog ::= NOT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cond_s ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
parser.agregarCodigoObjeto("\n   BTFSS "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT = ""+id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_s",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // cond_f ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
 parser.agregarCodigoObjeto("\n   BTFSC "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_f",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cond ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.agregarCodigoObjeto("    C"+parser.whiles+"\n    BTFSS "+id.lexema+",0"+"\n     GOTO FUERA"+parser.whiles+"\n");
 
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cond ::= oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le faltan componentes en Renglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // cond ::= exp oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operando o expresion en Reglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // cond ::= exp exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operador  en Reglon:  "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // cond ::= oprel exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta un operando o expresion en Reglon:  "+(idleft+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // cond ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError ("Error Sintactico: El operador IGUAL '=' no es un operador de comparacion pruebe con: '=='en Reglon:  "+(igleft+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // cond ::= exp oprel exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          

        Object b;
        b= parser.newTemporal1(a,op,y);
        RESULT=b;



    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // s_ciclo ::= CICLO PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // s_ciclo ::= CICLO PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion ni sentencias dentro de el  renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ NT$0 cuerpo NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.agregarCodigoObjeto("    GOTO C"+parser.whiles+"\n   FUERA"+parser.whiles+"\n"); parser.whiles++;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

    
    compilador.tres("GO TO ciclo"+parser.whiles);
    compilador.tres("salida:");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$0 ::= 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

        
        ci.tres="\nciclo"+parser.whiles+":";
        compilador.tres(ci.tres);
            compilador.tres("SI "+co+" = falso GO TO "+"salida");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // s_ef ::= EF PAREIZQ cond_f PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);
parser.ifs++; parser.elses++; i.tres="EF"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ef",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // s_ed ::= ED PAREIZQ cond_s PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);

parser.ifs++; parser.elses++; i.tres="ED"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ed",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // p_salida ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_sal=n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("psalida")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo psalida");

                }
    }        
    else{
        compilador.setError("Error semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);
RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // p_salida ::= PSALIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    parser.id_sal=r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema k = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
    parser.agregarCodigoObjeto("   BTFSS "+k.lexema+",0\n" +
"   BCF "+parser.id_sal+"\n" +
"   BTFSC "+k.lexema+",0\n" +
"   BSF "+parser.id_sal+"\n");
    if(!parser.tabla.containsKey(k.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(k.lexema)){
                  
       String tmp = compilador.Buscar(k.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No es de tipo Boleano");

                }
    }    
    
    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // p_entrada ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("pentrada")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo pentrada");

                }
    }        
    else{
        compilador.setError("Error semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);

RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // p_entrada ::= PENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // puertoentrada1 ::= ENTRADA PAREIZQ ID ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
compilador.setError("Error sintactico: No corresponde a la sentencia ENTRADA: renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada1",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // puertoentrada1 ::= ENTRADA ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
compilador.setError("Error sintactico: Sentencia ENTRADA hace falta un PARENTESIS de apertura '(': renglon: "+(nleft+1)+" columna: "+(nright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada1",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // puertoentrada1 ::= ENTRADA PAREIZQ COMA PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		  
compilador.setError("Error sintactico: Sentencia ENTRADA hace falta PRIMERO Y SEGUNDO parametro: renglon: "+(nleft+1)+" columna: "+(nright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada1",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // puertoentrada1 ::= ENTRADA PAREIZQ COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
compilador.setError("Error sintactico: Sentencia ENTRADA hace falta PRIMER parametro: renglon: "+(pleft+1)+" columna: "+(pright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada1",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // puertoentrada1 ::= ENTRADA PAREIZQ ID COMA PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		  
compilador.setError("Error sintactico <"+id.lexema+">: Sentencia ENTRADA hace falta SEGUNDO parametro: renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada1",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		  
    compilador.setError("Error sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
        parser.agregarCodigoObjeto("    BCF "+ id.lexema+",0\n"+"  BTFSC "+parser.id_ent+"\n"+"   BSF "+id.lexema+",0\n");
    if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // alto1 ::= ALTO PAREIZQ ID INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		
compilador.setError("Error sintactico <"+id.lexema+">: No corresponde a la sentencia ALTO: renglon: "+(idleft+1)+" columna: "+(idright+1)+"");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto1",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // alto1 ::= ALTO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		
compilador.setError("Error sintactico: Sentencia ALTO hace falta el PARAMETRO de entrada");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto1",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // alto1 ::= ALTO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		
compilador.setError("Error sintactico <"+i.lexema+">: Sentencia ALTO hace falta la parentesis de apertura '(' : renglon: "+(ileft+1)+" columna: "+(iright+1)+"");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto1",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // alto1 ::= ALTO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error sintactico <"+i.lexema+">: Sentencia ALTO hace falta la parentesis de cierre ' ) ' : renglon: "+(ileft+1)+" columna: "+(iright+1)+"");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto1",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // alto ::= ALTO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("     MOVLW B'"+i.lexema+"'\n       MOVWF PORTB"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia ::= puertoentrada1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia ::= alto1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia ::= alto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia ::= as_fvbol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia ::= as_asig 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia ::= cont 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia ::= retart 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia ::= srvo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia ::= motorelec 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia ::= exp 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia ::= s_ciclo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia ::= s_ef 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia ::= s_ed 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia ::= puertosalida 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia ::= puertoentrada 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // as_puerto ::= ID PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error sintactico <"+id.lexema+">: No se encontro OPERANDO : renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // as_puerto ::= ID PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error sintactico <"+id.lexema+">: No se encontro OPERANDO : renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // as_puerto ::= ID DOSPUNTOS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error sintactico <"+p.lexema+">: La Variable no es de tipo PUERTO: renglon: "+(pleft+1)+" columna: "+(pright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // as_puerto ::= ID DOSPUNTOS PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor); 
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);
// generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);    

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error semantico : El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // as_puerto ::= ID DOSPUNTOS PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);    
    // generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error semantico(Unidad); El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // as_fvbol ::= ID VERDADERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    compilador.setError("Error sintactico: No se encontro OPERANDO <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // as_fvbol ::= ID FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    compilador.setError("Error sintactico: No se encontro OPERANDO <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // as_fvbol ::= ID IGUAL FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		  parser.agregarCodigoObjeto("    BCF "+i.lexema+",0\n");
     if(!parser.tabla.containsKey(i.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(i.lexema)){
                  
       String tmp = compilador.Buscar(i.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

                }
    }        

    compilador.tres(i.lexema+" "+g.lexema+" "+f.lexema);
    
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // as_fvbol ::= ID IGUAL VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          
        parser.agregarCodigoObjeto("    BSF "+id.lexema+",0\n");
         if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        

   compilador.tres(id.lexema+" "+ig.lexema+" "+v.lexema);


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // as_asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

 if(!parser.tabla.containsKey(id.lexema)){
                  
                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


        compilador.tres(id.lexema+" "+ig.lexema+" "+e);





    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_asig",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // as_dato ::= ID IGUAL INTEGERNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema valor = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = ""+valor;            
    id.tipo = "entero";
    RESULT = valor;
    compilador.agregarid(id.lexema,id.tipo,id.valor);       
    parser.tabla.put(id.lexema,id);

    id.tres = id.lexema;
    valor.tres= valor.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,valor);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,valor,o);
    //codigo gen cod
  }
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_dato",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // as_bol ::= ID GATO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro valor BOOLEANO <"+o.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // as_bol ::= ID FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro OPERANDO <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // as_bol ::= ID VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro OPERANDO <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // as_bol ::= ID GATO FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "FALSO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);          
    parser.tabla.put(id.lexema,id);
    id.tres = id.lexema;
    f.tres= f.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,f);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,f,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // as_bol ::= ID GATO VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "VERDADERO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);

    id.tres = id.lexema;
    v.tres= v.lexema;

    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,v);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,v,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asig ::= as_puerto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asig ::= as_dato 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asig ::= as_bol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignacion ::= asig 
            {
              Object RESULT =null;
		 parser.agregarCodigoObjeto("\nBUCLE\n"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignacion ::= asig asignacion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inicio ::= DECLARA LLAVEIZQ LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inicio ::= DECLARA asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inicio ::= DECLARA LLAVEIZQ asignacion BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inicio ::= DECLARA LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error sintactico : La estructura debe empezar con BUCLE ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inicio ::= DECLARA LLAVEIZQ BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inicio ::= DECLARA LLAVEIZQ ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicio ::= DECLARA LLAVEIZQ ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicio ::= DECLARA LLAVEIZQ ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico: renglon: Estructura DECLARA vacia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inicio ::= DECLARA LLAVEIZQ ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inicio ::= DECLARA LLAVEIZQ ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inicio ::= DECLARA LLAVEIZQ ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio ::= DECLARA ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= DECLARA ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= DECLARA ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicio ::= DECLARA ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= DECLARA ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= DECLARA ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= DECLARA ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicio ::= DECLARA ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= ID ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicio ::= ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio ::= ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error Sintactico: El documento esta vacio no hay nada para compilar");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

