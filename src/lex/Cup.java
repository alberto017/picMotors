
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 23 23:06:08 CST 2017
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 23 23:06:08 CST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\010\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\012\000\002\002\012" +
    "\000\002\002\013\000\002\002\013\000\002\002\013\000" +
    "\002\002\011\000\002\002\012\000\002\002\010\000\002" +
    "\002\010\000\002\002\010\000\002\002\010\000\002\002" +
    "\011\000\002\002\011\000\002\002\011\000\002\002\011" +
    "\000\002\002\011\000\002\002\012\000\002\002\013\000" +
    "\002\002\011\000\002\002\012\000\002\002\013\000\002" +
    "\003\004\000\002\003\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\005" +
    "\000\002\006\005\000\002\037\005\000\002\040\005\000" +
    "\002\040\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\011\004\000\002\011\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\043" +
    "\006\000\002\012\010\000\002\012\007\000\002\014\003" +
    "\000\002\014\003\000\002\013\010\000\002\013\007\000" +
    "\002\015\003\000\002\015\003\000\002\017\011\000\002" +
    "\020\011\000\002\045\002\000\002\046\002\000\002\025" +
    "\013\000\002\025\007\000\002\025\010\000\002\025\010" +
    "\000\002\025\007\000\002\025\007\000\002\025\006\000" +
    "\002\025\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\023\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\003\000\002\034\006\000\002\034\004\000" +
    "\002\035\010\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\036\004\000\002\036\004\000\002\036" +
    "\003\000\002\032\006\000\002\032\006\000\002\032\006" +
    "\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\010\003\005\004\006\073\004\001\002\000" +
    "\006\004\347\006\350\001\002\000\004\004\341\001\002" +
    "\000\010\006\015\007\013\073\011\001\002\000\004\002" +
    "\010\001\002\000\004\002\000\001\002\000\012\006\332" +
    "\045\304\065\301\106\305\001\002\000\010\005\uffe4\007" +
    "\uffe4\073\uffe4\001\002\000\004\005\326\001\002\000\010" +
    "\005\uffe7\007\uffe7\073\303\001\002\000\010\005\233\007" +
    "\232\073\231\001\002\000\010\005\uffe6\007\uffe6\073\uffe6" +
    "\001\002\000\010\005\uffe5\007\uffe5\073\uffe5\001\002\000" +
    "\004\007\021\001\002\000\004\005\022\001\002\000\004" +
    "\006\023\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\051\063\053" +
    "\072\050\073\036\101\046\001\002\000\004\063\222\001" +
    "\002\000\044\002\uff97\007\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\021\uff97\025\uff97\026\uff97\027\uff97\030\220\031" +
    "\221\033\uff97\063\uff97\072\uff97\073\uff97\101\uff97\001\002" +
    "\000\040\002\uffce\007\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\021\uffce\025\uffce\026\uffce\027\uffce\033\uffce\063\uffce" +
    "\072\uffce\073\uffce\101\uffce\001\002\000\040\002\uffcf\007" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\033\uffcf\063\uffcf\072\uffcf\073\uffcf\101" +
    "\uffcf\001\002\000\004\007\217\001\002\000\040\002\uffcc" +
    "\007\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\033\uffcc\063\uffcc\072\uffcc\073\uffcc" +
    "\101\uffcc\001\002\000\040\002\uffcd\007\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\033\uffcd\063\uffcd\072\uffcd\073\uffcd\101\uffcd\001\002\000" +
    "\044\002\uffd3\007\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\025\uffd3\026\uffd3\027\uffd3\033\uffd3\063\uffd3\066" +
    "\104\070\103\072\uffd3\073\uffd3\101\uffd3\001\002\000\006" +
    "\003\207\063\210\001\002\000\040\002\uffd2\007\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\033\uffd2\063\uffd2\072\uffd2\073\uffd2\101\uffd2\001" +
    "\002\000\050\002\uffa0\007\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\021\uffa0\025\uffa0\026\uffa0\027\uffa0\033\uffa0\045" +
    "\203\063\uffa0\066\uffa0\067\uffa0\070\uffa0\072\uffa0\073\uffa0" +
    "\101\uffa0\001\002\000\040\002\uffd8\007\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\021\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\033\uffd8\063\uffd8\072\uffd8\073\uffd8\101\uffd8\001\002\000" +
    "\006\003\177\063\200\001\002\000\006\063\135\064\134" +
    "\001\002\000\040\002\uffd9\007\uffd9\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\051" +
    "\063\053\072\050\073\036\101\046\001\002\000\060\002" +
    "\uffa5\007\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\025\uffa5\026\uffa5\027\uffa5\033\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\063\uffa5\064\uffa5\066\uffa5\067\107\070\uffa5" +
    "\072\uffa5\073\uffa5\101\uffa5\001\002\000\040\002\uffd4\007" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\033\uffd4\063\uffd4\072\uffd4\073\uffd4\101" +
    "\uffd4\001\002\000\040\002\uffd0\007\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\025\uffd0\026\uffd0\027\uffd0\033" +
    "\uffd0\063\uffd0\072\uffd0\073\uffd0\101\uffd0\001\002\000\004" +
    "\063\124\001\002\000\040\002\uffd7\007\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\033\uffd7\063\uffd7\072\uffd7\073\uffd7\101\uffd7\001\002\000" +
    "\060\002\uffa2\007\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\025\uffa2\026\uffa2\027\uffa2\033\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\063\uffa2\064\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\072\uffa2\073\uffa2\101\uffa2\001\002\000\004\063" +
    "\121\001\002\000\004\063\112\001\002\000\010\063\053" +
    "\072\050\073\101\001\002\000\060\002\uffa3\007\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\033\uffa3\043\uffa3\044\uffa3\045\uffa3\063" +
    "\uffa3\064\uffa3\066\uffa3\067\uffa3\070\uffa3\072\uffa3\073\uffa3" +
    "\101\uffa3\001\002\000\006\063\072\072\071\001\002\000" +
    "\040\002\uffd5\007\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\025\uffd5\026\uffd5\027\uffd5\033\uffd5\063\uffd5\072" +
    "\uffd5\073\uffd5\101\uffd5\001\002\000\040\002\uffd6\007\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\033\uffd6\063\uffd6\072\uffd6\073\uffd6\101\uffd6" +
    "\001\002\000\040\002\uffd1\007\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1" +
    "\063\uffd1\072\uffd1\073\uffd1\101\uffd1\001\002\000\004\063" +
    "\062\001\002\000\004\073\063\001\002\000\004\064\uffaf" +
    "\001\002\000\004\064\065\001\002\000\004\006\066\001" +
    "\002\000\034\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\036\101\046\001\002\000\004\007\070\001\002\000\040" +
    "\002\uffc1\007\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1\063\uffc1\072\uffc1" +
    "\073\uffc1\101\uffc1\001\002\000\004\064\100\001\002\000" +
    "\006\064\074\072\073\001\002\000\042\002\uff9c\007\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\033\uff9c\047\075\063\uff9c\072\uff9c\073\uff9c" +
    "\101\uff9c\001\002\000\040\002\uff9b\007\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\021\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\033\uff9b\063\uff9b\072\uff9b\073\uff9b\101\uff9b\001\002\000" +
    "\004\032\076\001\002\000\004\064\077\001\002\000\040" +
    "\002\uff9d\007\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\033\uff9d\063\uff9d\072\uff9d" +
    "\073\uff9d\101\uff9d\001\002\000\040\002\uff9a\007\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\033\uff9a\063\uff9a\072\uff9a\073\uff9a\101\uff9a\001" +
    "\002\000\060\002\uffa0\007\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\025\uffa0\026\uffa0\027\uffa0\033" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\063\uffa0\064\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\072\uffa0\073\uffa0\101\uffa0\001\002\000" +
    "\010\064\105\066\104\070\103\001\002\000\010\063\053" +
    "\072\050\073\101\001\002\000\010\063\053\072\050\073" +
    "\101\001\002\000\060\002\uffa1\007\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\033\uffa1\043\uffa1\044\uffa1\045\uffa1\063\uffa1\064\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\072\uffa1\073\uffa1\101\uffa1\001" +
    "\002\000\060\002\uffa7\007\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\025\uffa7\026\uffa7\027\uffa7\033" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\063\uffa7\064\uffa7\066\uffa7" +
    "\067\107\070\uffa7\072\uffa7\073\uffa7\101\uffa7\001\002\000" +
    "\010\063\053\072\050\073\101\001\002\000\060\002\uffa4" +
    "\007\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\033\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\063\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4\072" +
    "\uffa4\073\uffa4\101\uffa4\001\002\000\060\002\uffa6\007\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\033\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\063\uffa6\064\uffa6\066\uffa6\067\107\070\uffa6\072\uffa6\073" +
    "\uffa6\101\uffa6\001\002\000\004\073\113\001\002\000\004" +
    "\047\114\001\002\000\006\012\117\073\115\001\002\000" +
    "\042\002\uffc7\007\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\063\uffc7\064" +
    "\uffc7\072\uffc7\073\uffc7\101\uffc7\001\002\000\042\002\uffc9" +
    "\007\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\033\uffc9\063\uffc9\064\120\072\uffc9" +
    "\073\uffc9\101\uffc9\001\002\000\042\002\uffc8\007\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\033\uffc8\063\uffc8\064\uffc8\072\uffc8\073\uffc8\101" +
    "\uffc8\001\002\000\040\002\uffca\007\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\021\uffca\025\uffca\026\uffca\027\uffca\033" +
    "\uffca\063\uffca\072\uffca\073\uffca\101\uffca\001\002\000\004" +
    "\072\122\001\002\000\004\064\123\001\002\000\040\002" +
    "\uffcb\007\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\033\uffcb\063\uffcb\072\uffcb\073" +
    "\uffcb\101\uffcb\001\002\000\004\073\125\001\002\000\004" +
    "\047\126\001\002\000\006\013\130\073\127\001\002\000" +
    "\042\002\uffc3\007\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\025\uffc3\026\uffc3\027\uffc3\033\uffc3\063\uffc3\064" +
    "\uffc3\072\uffc3\073\uffc3\101\uffc3\001\002\000\042\002\uffc4" +
    "\007\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\033\uffc4\063\uffc4\064\uffc4\072\uffc4" +
    "\073\uffc4\101\uffc4\001\002\000\042\002\uffc5\007\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\033\uffc5\063\uffc5\064\132\072\uffc5\073\uffc5\101" +
    "\uffc5\001\002\000\040\002\uffc6\007\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\021\uffc6\025\uffc6\026\uffc6\027\uffc6\033" +
    "\uffc6\063\uffc6\072\uffc6\073\uffc6\101\uffc6\001\002\000\006" +
    "\002\uffda\007\uffda\001\002\000\004\006\173\001\002\000" +
    "\022\006\146\020\144\043\141\044\142\063\053\064\137" +
    "\072\050\073\143\001\002\000\012\063\053\064\uffb1\072" +
    "\050\073\101\001\002\000\004\006\166\001\002\000\024" +
    "\020\144\043\141\044\142\045\163\063\053\066\104\070" +
    "\103\072\050\073\101\001\002\000\012\063\uffaa\064\uffaa" +
    "\072\uffaa\073\uffaa\001\002\000\012\063\uffa9\064\uffa9\072" +
    "\uffa9\073\uffa9\001\002\000\030\020\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\063\uffa0\064\uffb0\066\uffa0\067\uffa0\070\uffa0\072" +
    "\uffa0\073\uffa0\001\002\000\012\063\uffa8\064\uffa8\072\uffa8" +
    "\073\uffa8\001\002\000\004\064\152\001\002\000\036\007" +
    "\150\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\036\101" +
    "\046\001\002\000\004\007\151\001\002\000\040\002\uffb7" +
    "\007\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\033\uffb7\063\uffb7\072\uffb7\073\uffb7" +
    "\101\uffb7\001\002\000\040\002\uffb9\007\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\021\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\033\uffb9\063\uffb9\072\uffb9\073\uffb9\101\uffb9\001\002\000" +
    "\004\006\153\001\002\000\036\007\155\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\025\uffc0\026\uffc0\027\uffc0\033" +
    "\uffc0\063\uffc0\072\uffc0\073\uffc0\101\uffc0\001\002\000\034" +
    "\014\052\015\024\016\061\017\041\021\034\025\040\026" +
    "\055\027\025\033\051\063\053\072\050\073\036\101\046" +
    "\001\002\000\040\002\uffbb\007\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\021\uffbb\025\uffbb\026\uffbb\027\uffbb\033\uffbb" +
    "\063\uffbb\072\uffbb\073\uffbb\101\uffbb\001\002\000\004\007" +
    "\uffbf\001\002\000\004\007\160\001\002\000\040\002\uffbe" +
    "\007\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\033\uffbe\063\uffbe\072\uffbe\073\uffbe" +
    "\101\uffbe\001\002\000\012\063\053\064\uffb2\072\050\073" +
    "\101\001\002\000\010\064\uffb3\066\104\070\103\001\002" +
    "\000\010\063\053\072\050\073\101\001\002\000\010\064" +
    "\uffb5\066\104\070\103\001\002\000\010\064\uffb6\066\104" +
    "\070\103\001\002\000\036\007\170\014\052\015\024\016" +
    "\061\017\041\021\034\025\040\026\055\027\025\033\051" +
    "\063\053\072\050\073\036\101\046\001\002\000\004\007" +
    "\171\001\002\000\040\002\uffbd\007\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd\033" +
    "\uffbd\063\uffbd\072\uffbd\073\uffbd\101\uffbd\001\002\000\040" +
    "\002\uffbc\007\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\033\uffbc\063\uffbc\072\uffbc" +
    "\073\uffbc\101\uffbc\001\002\000\010\064\uffb4\066\104\070" +
    "\103\001\002\000\036\007\175\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\036\101\046\001\002\000\004\007\176" +
    "\001\002\000\040\002\uffb8\007\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8" +
    "\063\uffb8\072\uffb8\073\uffb8\101\uffb8\001\002\000\040\002" +
    "\uffba\007\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba" +
    "\025\uffba\026\uffba\027\uffba\033\uffba\063\uffba\072\uffba\073" +
    "\uffba\101\uffba\001\002\000\040\002\uff9e\007\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\021\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\033\uff9e\063\uff9e\072\uff9e\073\uff9e\101\uff9e\001\002" +
    "\000\004\072\201\001\002\000\004\064\202\001\002\000" +
    "\040\002\uff9f\007\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\021\uff9f\025\uff9f\026\uff9f\027\uff9f\033\uff9f\063\uff9f\072" +
    "\uff9f\073\uff9f\101\uff9f\001\002\000\014\010\205\011\204" +
    "\063\053\072\050\073\101\001\002\000\040\002\uffde\007" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\025\uffde" +
    "\026\uffde\027\uffde\033\uffde\063\uffde\072\uffde\073\uffde\101" +
    "\uffde\001\002\000\040\002\uffdf\007\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\021\uffdf\025\uffdf\026\uffdf\027\uffdf\033" +
    "\uffdf\063\uffdf\072\uffdf\073\uffdf\101\uffdf\001\002\000\044" +
    "\002\uffe0\007\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\063\uffe0\066\104" +
    "\070\103\072\uffe0\073\uffe0\101\uffe0\001\002\000\040\002" +
    "\uff93\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93\021\uff93" +
    "\025\uff93\026\uff93\027\uff93\033\uff93\063\uff93\072\uff93\073" +
    "\uff93\101\uff93\001\002\000\010\022\212\023\213\024\211" +
    "\001\002\000\004\064\216\001\002\000\004\064\215\001" +
    "\002\000\004\064\214\001\002\000\040\002\uff95\007\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95\025\uff95\026" +
    "\uff95\027\uff95\033\uff95\063\uff95\072\uff95\073\uff95\101\uff95" +
    "\001\002\000\040\002\uff96\007\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\021\uff96\025\uff96\026\uff96\027\uff96\033\uff96" +
    "\063\uff96\072\uff96\073\uff96\101\uff96\001\002\000\040\002" +
    "\uff94\007\uff94\014\uff94\015\uff94\016\uff94\017\uff94\021\uff94" +
    "\025\uff94\026\uff94\027\uff94\033\uff94\063\uff94\072\uff94\073" +
    "\uff94\101\uff94\001\002\000\004\002\uffef\001\002\000\040" +
    "\002\uff98\007\uff98\014\uff98\015\uff98\016\uff98\017\uff98\021" +
    "\uff98\025\uff98\026\uff98\027\uff98\033\uff98\063\uff98\072\uff98" +
    "\073\uff98\101\uff98\001\002\000\040\002\uff99\007\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\021\uff99\025\uff99\026\uff99" +
    "\027\uff99\033\uff99\063\uff99\072\uff99\073\uff99\101\uff99\001" +
    "\002\000\004\073\223\001\002\000\004\064\uffae\001\002" +
    "\000\004\064\225\001\002\000\004\006\226\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\036\101" +
    "\046\001\002\000\004\007\230\001\002\000\040\002\uffc2" +
    "\007\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\033\uffc2\063\uffc2\072\uffc2\073\uffc2" +
    "\101\uffc2\001\002\000\014\007\300\045\304\065\301\073" +
    "\303\106\305\001\002\000\006\005\265\007\264\001\002" +
    "\000\004\006\261\001\002\000\006\005\236\007\235\001" +
    "\002\000\006\005\243\007\242\001\002\000\004\006\237" +
    "\001\002\000\034\014\052\015\024\016\061\017\041\021" +
    "\034\025\040\026\055\027\025\033\051\063\053\072\050" +
    "\073\036\101\046\001\002\000\004\007\241\001\002\000" +
    "\004\002\ufff0\001\002\000\004\005\254\001\002\000\036" +
    "\006\245\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\036" +
    "\101\046\001\002\000\004\007\253\001\002\000\036\007" +
    "\247\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\036\101" +
    "\046\001\002\000\006\002\ufff2\007\251\001\002\000\006" +
    "\002\ufffe\007\250\001\002\000\004\002\uffea\001\002\000" +
    "\006\002\ufffd\007\252\001\002\000\004\002\uffe9\001\002" +
    "\000\004\002\ufff1\001\002\000\004\006\255\001\002\000" +
    "\036\007\257\014\052\015\024\016\061\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\036\101\046\001\002\000\004\007\260\001\002\000\004" +
    "\002\uffed\001\002\000\004\002\uffec\001\002\000\034\014" +
    "\052\015\024\016\061\017\041\021\034\025\040\026\055" +
    "\027\025\033\051\063\053\072\050\073\036\101\046\001" +
    "\002\000\004\007\263\001\002\000\004\002\ufff4\001\002" +
    "\000\004\005\275\001\002\000\036\006\267\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\036\101\046\001\002\000" +
    "\004\007\274\001\002\000\036\007\271\014\052\015\024" +
    "\016\061\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\036\101\046\001\002\000\006" +
    "\002\ufff6\007\273\001\002\000\006\002\001\007\272\001" +
    "\002\000\004\002\uffeb\001\002\000\004\002\ufff8\001\002" +
    "\000\004\002\ufff5\001\002\000\004\006\276\001\002\000" +
    "\004\007\277\001\002\000\004\002\uffee\001\002\000\004" +
    "\005\321\001\002\000\010\012\317\013\320\073\316\001" +
    "\002\000\004\007\311\001\002\000\010\045\304\065\301" +
    "\106\305\001\002\000\004\072\310\001\002\000\006\010" +
    "\307\011\306\001\002\000\010\005\uffe2\007\uffe2\073\uffe2" +
    "\001\002\000\010\005\uffe3\007\uffe3\073\uffe3\001\002\000" +
    "\010\005\uffe1\007\uffe1\073\uffe1\001\002\000\004\005\312" +
    "\001\002\000\004\006\313\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\036\101\046\001\002\000" +
    "\004\007\315\001\002\000\004\002\ufff9\001\002\000\010" +
    "\005\uffdb\007\uffdb\073\uffdb\001\002\000\010\005\uffdd\007" +
    "\uffdd\073\uffdd\001\002\000\010\005\uffdc\007\uffdc\073\uffdc" +
    "\001\002\000\004\006\322\001\002\000\034\014\052\015" +
    "\024\016\061\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\036\101\046\001\002\000" +
    "\004\007\324\001\002\000\004\002\ufff7\001\002\000\006" +
    "\005\uffe8\007\uffe8\001\002\000\004\006\327\001\002\000" +
    "\034\014\052\015\024\016\061\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\036\101" +
    "\046\001\002\000\004\007\331\001\002\000\004\002\ufff3" +
    "\001\002\000\004\073\303\001\002\000\004\007\334\001" +
    "\002\000\004\005\335\001\002\000\004\006\336\001\002" +
    "\000\034\014\052\015\024\016\061\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\036" +
    "\101\046\001\002\000\004\007\340\001\002\000\004\002" +
    "\ufffa\001\002\000\004\006\342\001\002\000\004\007\343" +
    "\001\002\000\004\005\344\001\002\000\004\006\345\001" +
    "\002\000\004\007\346\001\002\000\004\002\uffff\001\002" +
    "\000\004\006\357\001\002\000\004\073\303\001\002\000" +
    "\004\007\352\001\002\000\004\005\353\001\002\000\004" +
    "\006\354\001\002\000\034\014\052\015\024\016\061\017" +
    "\041\021\034\025\040\026\055\027\025\033\051\063\053" +
    "\072\050\073\036\101\046\001\002\000\004\007\356\001" +
    "\002\000\004\002\ufffc\001\002\000\004\073\303\001\002" +
    "\000\004\007\361\001\002\000\004\005\362\001\002\000" +
    "\004\006\363\001\002\000\034\014\052\015\024\016\061" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\036\101\046\001\002\000\004\007\365" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\004\013\005\015\006\016" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\324\004\013\005\015\006\016\007\011\001\001\000" +
    "\014\003\233\004\013\005\015\006\016\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\027\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\132\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\101\027\042\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\066\012\036\013\046\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\110\030\053\001\001\000\006\027\105\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\144\026\137\027\042\030\053\031\135\001\001\000" +
    "\010\026\171\027\042\030\053\001\001\000\002\001\001" +
    "\000\012\026\161\027\042\030\053\031\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\146\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\153\001" +
    "\001\000\044\011\155\012\036\013\046\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\004\046\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\164\027\042\030\053" +
    "\001\001\000\002\001\001\000\010\026\163\027\042\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\166\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\173\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\205\027\042\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\226\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\301\004\013\005\015\006\016\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\237" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\243\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\044\011" +
    "\245\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\255\012\036\013\046\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\261" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\265\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\044\011" +
    "\267\012\036\013\046\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\313\012\036" +
    "\013\046\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\322\012\036\013\046\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\327\012\036\013" +
    "\046\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\332\004\013\005\015\006\016\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\336\012\036\013\046\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\350" +
    "\004\013\005\015\006\016\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\354" +
    "\012\036\013\046\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\357\004\013\005\015\006\016" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\363\012\036\013\046\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0;
    int direccionDeMemoria = 20; 
    int ifs = 0;
    int elses=0;
    int whiles = 0;
    int repeats = 0;
    int a=0,n=0;
    String id_sal="",id_ent="";
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
    message="Error de Sintaxis";
        compilador.setError("Se esperaba "+message+" Linea "+(left)+" Columna: "+(right));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");       
        message="Error de Sintaxis";
        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");
        message="Error de Sintaxis";
        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public String newTemporal2(Lexema a, Lexema b){
             String resultado;
           compilador.tres(a.lexema + " = " + b.tres);
             resultado = "t" + contadorTemporales;
           
           return resultado;
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " =  "+op.lexema+" "+a.tres+","+b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

     public String newTemporal1(Object a, Object op, Object b){
        String resultado;

            System.out.println(a);
            System.out.println(op);
            System.out.println(b);
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales +" = "+a+" "+op+" "+b);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public String agregarVariableObj(Lexema a, Lexema b,Lexema c){
                String resultado="";
           //compilador.addCodigoObjeto(a.lexema + " = " + b.tres);
           //  resultado = "t" + contadorTemporales;
           //System.err.println("A:"+a.lexema+"|B:"+b.lexema+"|C:"+c.lexema+"|");  
           if(c.lexema.equals("#")){
               if(b.lexema.equals("verdadero")){
                   resultado="\n    " +a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    " +"MOVLW D'1' "+"\n    " +"MOVWF "+a.lexema+"\n    "+"CLRW";
               }else{
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'0' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }  
           }
           else{
               if(c.lexema.equals("=")){
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'"+b.lexema+"' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }
               else{
                   if(c.lexema.equals(":")){
                        //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+" Corta:"+b.lexema.substring(2, 3));  
                        if (b.lexema.substring(2, 3).equals("a")) {
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTB"+","+b.lexema.substring(3, 4);
                        }
                        else{
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTA"+","+b.lexema.substring(3, 4);
                        }
                   }
                   
               }               
           }
           //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+"|");  
           compilador.addCodigoObjeto(resultado);
           
           return resultado;

    }


    public String agregarCodigoObjeto(String EstCodigo){
            compilador.addCodigoObjeto(EstCodigo);     
            return EstCodigo;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // motorelec ::= MOTORELECT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <MOTORELECT> , se esperaba una estructura MOTORELECT ( SAR | CAR | DETENER) renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // motorelec ::= MOTORELECT PAREIZQ DETENER PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // motorelec ::= MOTORELECT PAREIZQ CAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // motorelec ::= MOTORELECT PAREIZQ SAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cont ::= CONTADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <contador> , se esperaba final o inicio'(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cont ::= CONTADOR FINAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cont ::= CONTADOR INICIO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // retart ::= RETARDO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre '(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // retart ::= RETARDO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta el valor de el retardo  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // retart ::= RETARDO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre ')'  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // retart ::= RETARDO PAREIZQ INTEGERNUM COMA TIEMPO PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("  CALL Retardo_"+n.lexema+t.lexema);
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // srvo ::= SERVO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia servo  "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // srvo ::= SERVO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // f ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo entero");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe y/o no esta declarada");
    }

    n.tres=n.lexema;
    RESULT=n.lexema;                                


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // f ::= PAREIZQ exp PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

RESULT = e;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // f ::= INTEGERNUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema x = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
x.tres=x.lexema;
RESULT = x.lexema;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // t ::= f 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT = s;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // t ::= t MULTIPLICACION f 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema l = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    q = parser.newTemporal1 (q,l.lexema,h);
RESULT = q;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= t 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
RESULT = w;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= exp RESTA t 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
    r = parser.newTemporal1 (r,g.lexema,v);
RESULT = r;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= exp SUMA t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema op = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//a.tres=a.lexema;
    a = parser.newTemporal1 (a,op.lexema,b);
RESULT = a;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // oprel ::= COMPARA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema co = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    co.tres=co.lexema;
        RESULT = co.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oprel ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema ma = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    ma.tres=ma.lexema;
        RESULT = ma.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oprel ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema me = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    me.tres=me.lexema;
        RESULT = me.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oplog ::= NOT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond_s ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
parser.agregarCodigoObjeto("\n   BTFSS "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT = ""+id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_s",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond_f ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
 parser.agregarCodigoObjeto("\n   BTFSC "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_f",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.agregarCodigoObjeto("    C"+parser.whiles+"\n    BTFSS "+id.lexema+",0"+"\n     GOTO FUERA"+parser.whiles+"\n");
 
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le faltan componentes en Renglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= exp oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operando o expresion en Reglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= exp exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operador  en Reglon:  "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond ::= oprel exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta un operando o expresion en Reglon:  "+(idleft+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError ("Error Sintactico: El operador IGUAL '=' no es un operador de comparacion pruebe con: '=='en Reglon:  "+(igleft+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= exp oprel exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          

        Object b;
        b= parser.newTemporal1(a,op,y);
        RESULT=b;



    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s_ciclo ::= CICLO PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s_ciclo ::= CICLO PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion ni sentencias dentro de el  renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ NT$0 cuerpo NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.agregarCodigoObjeto("    GOTO C"+parser.whiles+"\n   FUERA"+parser.whiles+"\n"); parser.whiles++;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

    
    compilador.tres("GO TO ciclo"+parser.whiles);
    compilador.tres("salida:");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$0 ::= 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

        
        ci.tres="\nciclo"+parser.whiles+":";
        compilador.tres(ci.tres);
            compilador.tres("SI "+co+" = falso GO TO "+"salida");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s_ef ::= EF PAREIZQ cond_f PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);
parser.ifs++; parser.elses++; i.tres="EF"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ef",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // s_ed ::= ED PAREIZQ cond_s PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);

parser.ifs++; parser.elses++; i.tres="ED"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ed",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // p_salida ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_sal=n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("psalida")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo psalida");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);
RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // p_salida ::= PSALIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    parser.id_sal=r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema k = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
    parser.agregarCodigoObjeto("   BTFSS "+k.lexema+",0\n" +
"   BCF "+parser.id_sal+"\n" +
"   BTFSC "+k.lexema+",0\n" +
"   BSF "+parser.id_sal+"\n");
    if(!parser.tabla.containsKey(k.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(k.lexema)){
                  
       String tmp = compilador.Buscar(k.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No es de tipo Boleano");

                }
    }    
    
    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // p_entrada ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("pentrada")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo pentrada");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);

RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // p_entrada ::= PENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		  
    compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
        parser.agregarCodigoObjeto("    BCF "+ id.lexema+",0\n"+"  BTFSC "+parser.id_ent+"\n"+"   BSF "+id.lexema+",0\n");
    if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // alto ::= ALTO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("     MOVLW B'"+i.lexema+"'\n       MOVWF PORTB"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= alto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= as_fvbol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= as_asig 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= cont 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= retart 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= srvo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= motorelec 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= exp 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= s_ciclo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= s_ef 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= s_ed 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= puertosalida 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= puertoentrada 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // as_puerto ::= ID DOSPUNTOS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error Semantico : el tipo <"+p.lexema+">. No existe  renglon: "+(pleft+1)+" columna: "+(pright+1)+"se espera un tipo puerto");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // as_puerto ::= ID DOSPUNTOS PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor); 
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);
// generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);    

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico : El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // as_puerto ::= ID DOSPUNTOS PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);    
    // generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico(Unidad); El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // as_fvbol ::= ID IGUAL FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		  parser.agregarCodigoObjeto("    BCF "+i.lexema+",0\n");
     if(!parser.tabla.containsKey(i.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(i.lexema)){
                  
       String tmp = compilador.Buscar(i.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

                }
    }        

    compilador.tres(i.lexema+" "+g.lexema+" "+f.lexema);
    


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // as_fvbol ::= ID IGUAL VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          
        parser.agregarCodigoObjeto("    BSF "+id.lexema+",0\n");
         if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        

   compilador.tres(id.lexema+" "+ig.lexema+" "+v.lexema);


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // as_asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

 if(!parser.tabla.containsKey(id.lexema)){
                  
                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


        compilador.tres(id.lexema+" "+ig.lexema+" "+e);





    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_asig",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // as_dato ::= ID IGUAL INTEGERNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema valor = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = ""+valor;            
    id.tipo = "entero";
    RESULT = valor;
    compilador.agregarid(id.lexema,id.tipo,id.valor);       
    parser.tabla.put(id.lexema,id);

    id.tres = id.lexema;
    valor.tres= valor.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,valor);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,valor,o);
    //codigo gen cod
  }
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_dato",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // as_bol ::= ID GATO FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "FALSO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);          
    parser.tabla.put(id.lexema,id);
    id.tres = id.lexema;
    f.tres= f.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,f);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,f,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // as_bol ::= ID GATO VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "VERDADERO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);
 

    id.tres = id.lexema;
    v.tres= v.lexema;

    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,v);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,v,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asig ::= as_puerto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asig ::= as_dato 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asig ::= as_bol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= asig 
            {
              Object RESULT =null;
		 parser.agregarCodigoObjeto("\nBUCLE\n"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= asig asignacion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= DECLARA LLAVEIZQ LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= DECLARA asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= DECLARA LLAVEIZQ asignacion BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= DECLARA LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= DECLARA LLAVEIZQ BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico :, sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= DECLARA LLAVEIZQ ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico: renglon: Estructura DECLARA vacia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= DECLARA LLAVEIZQ ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= DECLARA ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error Sintactico: El documento esta vacio no hay nada para compilar");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

