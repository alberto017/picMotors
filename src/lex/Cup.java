
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 29 17:30:50 CST 2017
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 29 17:30:50 CST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\002\010\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\012\000\002\002\012" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\013\000\002\002\014\000\002\002\015\000\002" +
    "\002\016\000\002\002\017\000\002\002\020\000\002\002" +
    "\021\000\002\002\022\000\002\002\023\000\002\002\024" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\011\000\002\002\012\000\002\002\013\000\002" +
    "\002\014\000\002\002\015\000\002\002\016\000\002\002" +
    "\017\000\002\002\020\000\002\002\021\000\002\002\022" +
    "\000\002\002\023\000\002\002\010\000\002\002\012\000" +
    "\002\002\010\000\002\002\011\000\002\002\011\000\002" +
    "\002\011\000\002\002\012\000\002\002\013\000\002\002" +
    "\011\000\002\002\012\000\002\002\013\000\002\002\010" +
    "\000\002\002\010\000\002\002\011\000\002\002\011\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\005\000\002\037\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\004\000\002\040\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\004\000\002\011\004\000\002\011\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\043\006\000\002\012\010\000\002\012\007\000" +
    "\002\014\003\000\002\014\003\000\002\013\010\000\002" +
    "\013\007\000\002\015\003\000\002\015\003\000\002\017" +
    "\011\000\002\020\011\000\002\045\002\000\002\046\002" +
    "\000\002\025\013\000\002\025\007\000\002\025\010\000" +
    "\002\025\010\000\002\025\007\000\002\025\007\000\002" +
    "\025\006\000\002\025\006\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\023\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\003\000\002\034\006\000\002" +
    "\034\004\000\002\035\010\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\036\004\000\002\036\004" +
    "\000\002\036\003\000\002\032\006\000\002\032\006\000" +
    "\002\032\006\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0297\000\010\003\005\004\006\073\004\001\002\000" +
    "\010\004\u01fd\006\u01fc\073\u01fb\001\002\000\004\004\u01f5" +
    "\001\002\000\010\006\015\007\014\073\011\001\002\000" +
    "\004\002\010\001\002\000\004\002\000\001\002\000\024" +
    "\006\u01a7\010\u0122\011\u011d\012\u0124\013\u0123\045\u0121\065" +
    "\u011e\073\u01a6\106\u0125\001\002\000\010\005\uff99\007\uff99" +
    "\073\uff99\001\002\000\010\005\uff9c\007\uff9c\073\u0143\001" +
    "\002\000\004\005\u01a1\001\002\000\010\005\235\007\234" +
    "\073\233\001\002\000\010\005\uff9a\007\uff9a\073\uff9a\001" +
    "\002\000\010\005\uff9b\007\uff9b\073\uff9b\001\002\000\004" +
    "\007\021\001\002\000\004\005\022\001\002\000\004\006" +
    "\023\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\044\002\uff45\007\uff45" +
    "\014\uff45\015\uff45\016\uff45\017\uff45\021\uff45\025\uff45\026" +
    "\uff45\027\uff45\030\231\031\232\033\uff45\063\uff45\072\uff45" +
    "\073\uff45\101\uff45\001\002\000\004\063\222\001\002\000" +
    "\040\002\uff7c\007\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\021\uff7c\025\uff7c\026\uff7c\027\uff7c\033\uff7c\063\uff7c\072" +
    "\uff7c\073\uff7c\101\uff7c\001\002\000\040\002\uff7d\007\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\025\uff7d\026" +
    "\uff7d\027\uff7d\033\uff7d\063\uff7d\072\uff7d\073\uff7d\101\uff7d" +
    "\001\002\000\004\007\221\001\002\000\040\002\uff7a\007" +
    "\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\021\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\033\uff7a\063\uff7a\072\uff7a\073\uff7a\101" +
    "\uff7a\001\002\000\040\002\uff7b\007\uff7b\014\uff7b\015\uff7b" +
    "\016\uff7b\017\uff7b\021\uff7b\025\uff7b\026\uff7b\027\uff7b\033" +
    "\uff7b\063\uff7b\072\uff7b\073\uff7b\101\uff7b\001\002\000\044" +
    "\002\uff81\007\uff81\014\uff81\015\uff81\016\uff81\017\uff81\021" +
    "\uff81\025\uff81\026\uff81\027\uff81\033\uff81\063\uff81\066\104" +
    "\070\103\072\uff81\073\uff81\101\uff81\001\002\000\006\003" +
    "\211\063\212\001\002\000\040\002\uff80\007\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\021\uff80\025\uff80\026\uff80\027" +
    "\uff80\033\uff80\063\uff80\072\uff80\073\uff80\101\uff80\001\002" +
    "\000\054\002\uff4e\007\uff4e\010\205\011\204\014\uff4e\015" +
    "\uff4e\016\uff4e\017\uff4e\021\uff4e\025\uff4e\026\uff4e\027\uff4e" +
    "\033\uff4e\045\203\063\uff4e\066\uff4e\067\uff4e\070\uff4e\072" +
    "\uff4e\073\uff4e\101\uff4e\001\002\000\040\002\uff86\007\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86\025\uff86\026" +
    "\uff86\027\uff86\033\uff86\063\uff86\072\uff86\073\uff86\101\uff86" +
    "\001\002\000\006\003\177\063\200\001\002\000\006\063" +
    "\135\064\134\001\002\000\040\002\uff87\007\uff87\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\060\002\uff53\007\uff53\014\uff53\015\uff53\016\uff53\017" +
    "\uff53\020\uff53\021\uff53\025\uff53\026\uff53\027\uff53\033\uff53" +
    "\043\uff53\044\uff53\045\uff53\063\uff53\064\uff53\066\uff53\067" +
    "\107\070\uff53\072\uff53\073\uff53\101\uff53\001\002\000\040" +
    "\002\uff82\007\uff82\014\uff82\015\uff82\016\uff82\017\uff82\021" +
    "\uff82\025\uff82\026\uff82\027\uff82\033\uff82\063\uff82\072\uff82" +
    "\073\uff82\101\uff82\001\002\000\040\002\uff7e\007\uff7e\014" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\021\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\033\uff7e\063\uff7e\072\uff7e\073\uff7e\101\uff7e\001" +
    "\002\000\040\002\uff85\007\uff85\014\uff85\015\uff85\016\uff85" +
    "\017\uff85\021\uff85\025\uff85\026\uff85\027\uff85\033\uff85\063" +
    "\uff85\072\uff85\073\uff85\101\uff85\001\002\000\004\063\124" +
    "\001\002\000\004\063\121\001\002\000\060\002\uff50\007" +
    "\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50" +
    "\025\uff50\026\uff50\027\uff50\033\uff50\043\uff50\044\uff50\045" +
    "\uff50\063\uff50\064\uff50\066\uff50\067\uff50\070\uff50\072\uff50" +
    "\073\uff50\101\uff50\001\002\000\004\063\112\001\002\000" +
    "\010\063\053\072\051\073\101\001\002\000\060\002\uff51" +
    "\007\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020\uff51\021" +
    "\uff51\025\uff51\026\uff51\027\uff51\033\uff51\043\uff51\044\uff51" +
    "\045\uff51\063\uff51\064\uff51\066\uff51\067\uff51\070\uff51\072" +
    "\uff51\073\uff51\101\uff51\001\002\000\006\063\072\072\071" +
    "\001\002\000\040\002\uff83\007\uff83\014\uff83\015\uff83\016" +
    "\uff83\017\uff83\021\uff83\025\uff83\026\uff83\027\uff83\033\uff83" +
    "\063\uff83\072\uff83\073\uff83\101\uff83\001\002\000\040\002" +
    "\uff84\007\uff84\014\uff84\015\uff84\016\uff84\017\uff84\021\uff84" +
    "\025\uff84\026\uff84\027\uff84\033\uff84\063\uff84\072\uff84\073" +
    "\uff84\101\uff84\001\002\000\040\002\uff7f\007\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\021\uff7f\025\uff7f\026\uff7f\027" +
    "\uff7f\033\uff7f\063\uff7f\072\uff7f\073\uff7f\101\uff7f\001\002" +
    "\000\004\063\062\001\002\000\004\073\063\001\002\000" +
    "\004\064\uff5d\001\002\000\004\064\065\001\002\000\004" +
    "\006\066\001\002\000\034\014\052\015\025\016\061\017" +
    "\041\021\034\025\040\026\055\027\024\033\050\063\053" +
    "\072\051\073\036\101\047\001\002\000\004\007\070\001" +
    "\002\000\040\002\uff6f\007\uff6f\014\uff6f\015\uff6f\016\uff6f" +
    "\017\uff6f\021\uff6f\025\uff6f\026\uff6f\027\uff6f\033\uff6f\063" +
    "\uff6f\072\uff6f\073\uff6f\101\uff6f\001\002\000\004\064\100" +
    "\001\002\000\006\064\074\072\073\001\002\000\042\002" +
    "\uff4a\007\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\021\uff4a" +
    "\025\uff4a\026\uff4a\027\uff4a\033\uff4a\047\075\063\uff4a\072" +
    "\uff4a\073\uff4a\101\uff4a\001\002\000\040\002\uff49\007\uff49" +
    "\014\uff49\015\uff49\016\uff49\017\uff49\021\uff49\025\uff49\026" +
    "\uff49\027\uff49\033\uff49\063\uff49\072\uff49\073\uff49\101\uff49" +
    "\001\002\000\004\032\076\001\002\000\004\064\077\001" +
    "\002\000\040\002\uff4b\007\uff4b\014\uff4b\015\uff4b\016\uff4b" +
    "\017\uff4b\021\uff4b\025\uff4b\026\uff4b\027\uff4b\033\uff4b\063" +
    "\uff4b\072\uff4b\073\uff4b\101\uff4b\001\002\000\040\002\uff48" +
    "\007\uff48\014\uff48\015\uff48\016\uff48\017\uff48\021\uff48\025" +
    "\uff48\026\uff48\027\uff48\033\uff48\063\uff48\072\uff48\073\uff48" +
    "\101\uff48\001\002\000\060\002\uff4e\007\uff4e\014\uff4e\015" +
    "\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\025\uff4e\026\uff4e" +
    "\027\uff4e\033\uff4e\043\uff4e\044\uff4e\045\uff4e\063\uff4e\064" +
    "\uff4e\066\uff4e\067\uff4e\070\uff4e\072\uff4e\073\uff4e\101\uff4e" +
    "\001\002\000\010\064\105\066\104\070\103\001\002\000" +
    "\010\063\053\072\051\073\101\001\002\000\010\063\053" +
    "\072\051\073\101\001\002\000\060\002\uff4f\007\uff4f\014" +
    "\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\025\uff4f" +
    "\026\uff4f\027\uff4f\033\uff4f\043\uff4f\044\uff4f\045\uff4f\063" +
    "\uff4f\064\uff4f\066\uff4f\067\uff4f\070\uff4f\072\uff4f\073\uff4f" +
    "\101\uff4f\001\002\000\060\002\uff55\007\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\020\uff55\021\uff55\025\uff55\026\uff55" +
    "\027\uff55\033\uff55\043\uff55\044\uff55\045\uff55\063\uff55\064" +
    "\uff55\066\uff55\067\107\070\uff55\072\uff55\073\uff55\101\uff55" +
    "\001\002\000\010\063\053\072\051\073\101\001\002\000" +
    "\060\002\uff52\007\uff52\014\uff52\015\uff52\016\uff52\017\uff52" +
    "\020\uff52\021\uff52\025\uff52\026\uff52\027\uff52\033\uff52\043" +
    "\uff52\044\uff52\045\uff52\063\uff52\064\uff52\066\uff52\067\uff52" +
    "\070\uff52\072\uff52\073\uff52\101\uff52\001\002\000\060\002" +
    "\uff54\007\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54" +
    "\021\uff54\025\uff54\026\uff54\027\uff54\033\uff54\043\uff54\044" +
    "\uff54\045\uff54\063\uff54\064\uff54\066\uff54\067\107\070\uff54" +
    "\072\uff54\073\uff54\101\uff54\001\002\000\004\073\113\001" +
    "\002\000\004\047\114\001\002\000\006\012\117\073\115" +
    "\001\002\000\042\002\uff75\007\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\021\uff75\025\uff75\026\uff75\027\uff75\033\uff75" +
    "\063\uff75\064\uff75\072\uff75\073\uff75\101\uff75\001\002\000" +
    "\042\002\uff77\007\uff77\014\uff77\015\uff77\016\uff77\017\uff77" +
    "\021\uff77\025\uff77\026\uff77\027\uff77\033\uff77\063\uff77\064" +
    "\120\072\uff77\073\uff77\101\uff77\001\002\000\042\002\uff76" +
    "\007\uff76\014\uff76\015\uff76\016\uff76\017\uff76\021\uff76\025" +
    "\uff76\026\uff76\027\uff76\033\uff76\063\uff76\064\uff76\072\uff76" +
    "\073\uff76\101\uff76\001\002\000\040\002\uff78\007\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\021\uff78\025\uff78\026\uff78" +
    "\027\uff78\033\uff78\063\uff78\072\uff78\073\uff78\101\uff78\001" +
    "\002\000\004\072\122\001\002\000\004\064\123\001\002" +
    "\000\040\002\uff79\007\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\021\uff79\025\uff79\026\uff79\027\uff79\033\uff79\063\uff79" +
    "\072\uff79\073\uff79\101\uff79\001\002\000\004\073\125\001" +
    "\002\000\004\047\126\001\002\000\006\013\130\073\127" +
    "\001\002\000\042\002\uff71\007\uff71\014\uff71\015\uff71\016" +
    "\uff71\017\uff71\021\uff71\025\uff71\026\uff71\027\uff71\033\uff71" +
    "\063\uff71\064\uff71\072\uff71\073\uff71\101\uff71\001\002\000" +
    "\042\002\uff72\007\uff72\014\uff72\015\uff72\016\uff72\017\uff72" +
    "\021\uff72\025\uff72\026\uff72\027\uff72\033\uff72\063\uff72\064" +
    "\uff72\072\uff72\073\uff72\101\uff72\001\002\000\042\002\uff73" +
    "\007\uff73\014\uff73\015\uff73\016\uff73\017\uff73\021\uff73\025" +
    "\uff73\026\uff73\027\uff73\033\uff73\063\uff73\064\132\072\uff73" +
    "\073\uff73\101\uff73\001\002\000\040\002\uff74\007\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\021\uff74\025\uff74\026\uff74" +
    "\027\uff74\033\uff74\063\uff74\072\uff74\073\uff74\101\uff74\001" +
    "\002\000\006\002\uff88\007\uff88\001\002\000\004\006\173" +
    "\001\002\000\022\006\146\020\144\043\141\044\142\063" +
    "\053\064\137\072\051\073\143\001\002\000\012\063\053" +
    "\064\uff5f\072\051\073\101\001\002\000\004\006\166\001" +
    "\002\000\024\020\144\043\141\044\142\045\163\063\053" +
    "\066\104\070\103\072\051\073\101\001\002\000\012\063" +
    "\uff58\064\uff58\072\uff58\073\uff58\001\002\000\012\063\uff57" +
    "\064\uff57\072\uff57\073\uff57\001\002\000\030\020\uff4e\043" +
    "\uff4e\044\uff4e\045\uff4e\063\uff4e\064\uff5e\066\uff4e\067\uff4e" +
    "\070\uff4e\072\uff4e\073\uff4e\001\002\000\012\063\uff56\064" +
    "\uff56\072\uff56\073\uff56\001\002\000\004\064\152\001\002" +
    "\000\036\007\150\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\151\001\002\000" +
    "\040\002\uff65\007\uff65\014\uff65\015\uff65\016\uff65\017\uff65" +
    "\021\uff65\025\uff65\026\uff65\027\uff65\033\uff65\063\uff65\072" +
    "\uff65\073\uff65\101\uff65\001\002\000\040\002\uff67\007\uff67" +
    "\014\uff67\015\uff67\016\uff67\017\uff67\021\uff67\025\uff67\026" +
    "\uff67\027\uff67\033\uff67\063\uff67\072\uff67\073\uff67\101\uff67" +
    "\001\002\000\004\006\153\001\002\000\036\007\155\014" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\021\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\033\uff6e\063\uff6e\072\uff6e\073\uff6e\101\uff6e\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\040\002\uff69\007\uff69\014\uff69" +
    "\015\uff69\016\uff69\017\uff69\021\uff69\025\uff69\026\uff69\027" +
    "\uff69\033\uff69\063\uff69\072\uff69\073\uff69\101\uff69\001\002" +
    "\000\004\007\uff6d\001\002\000\004\007\160\001\002\000" +
    "\040\002\uff6c\007\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\021\uff6c\025\uff6c\026\uff6c\027\uff6c\033\uff6c\063\uff6c\072" +
    "\uff6c\073\uff6c\101\uff6c\001\002\000\012\063\053\064\uff60" +
    "\072\051\073\101\001\002\000\010\064\uff61\066\104\070" +
    "\103\001\002\000\010\063\053\072\051\073\101\001\002" +
    "\000\010\064\uff63\066\104\070\103\001\002\000\010\064" +
    "\uff64\066\104\070\103\001\002\000\036\007\170\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\004\007\171\001\002\000\040\002\uff6b\007\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\017\uff6b\021\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\033\uff6b\063\uff6b\072\uff6b\073\uff6b\101\uff6b\001" +
    "\002\000\040\002\uff6a\007\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\017\uff6a\021\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a\063" +
    "\uff6a\072\uff6a\073\uff6a\101\uff6a\001\002\000\010\064\uff62" +
    "\066\104\070\103\001\002\000\036\007\175\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\176\001\002\000\040\002\uff66\007\uff66\014\uff66" +
    "\015\uff66\016\uff66\017\uff66\021\uff66\025\uff66\026\uff66\027" +
    "\uff66\033\uff66\063\uff66\072\uff66\073\uff66\101\uff66\001\002" +
    "\000\040\002\uff68\007\uff68\014\uff68\015\uff68\016\uff68\017" +
    "\uff68\021\uff68\025\uff68\026\uff68\027\uff68\033\uff68\063\uff68" +
    "\072\uff68\073\uff68\101\uff68\001\002\000\040\002\uff4c\007" +
    "\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\021\uff4c\025\uff4c" +
    "\026\uff4c\027\uff4c\033\uff4c\063\uff4c\072\uff4c\073\uff4c\101" +
    "\uff4c\001\002\000\004\072\201\001\002\000\004\064\202" +
    "\001\002\000\040\002\uff4d\007\uff4d\014\uff4d\015\uff4d\016" +
    "\uff4d\017\uff4d\021\uff4d\025\uff4d\026\uff4d\027\uff4d\033\uff4d" +
    "\063\uff4d\072\uff4d\073\uff4d\101\uff4d\001\002\000\014\010" +
    "\207\011\206\063\053\072\051\073\101\001\002\000\040" +
    "\002\uff8f\007\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\033\uff8f\063\uff8f\072\uff8f" +
    "\073\uff8f\101\uff8f\001\002\000\040\002\uff8e\007\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\033\uff8e\063\uff8e\072\uff8e\073\uff8e\101\uff8e\001" +
    "\002\000\040\002\uff90\007\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\021\uff90\025\uff90\026\uff90\027\uff90\033\uff90\063" +
    "\uff90\072\uff90\073\uff90\101\uff90\001\002\000\040\002\uff91" +
    "\007\uff91\014\uff91\015\uff91\016\uff91\017\uff91\021\uff91\025" +
    "\uff91\026\uff91\027\uff91\033\uff91\063\uff91\072\uff91\073\uff91" +
    "\101\uff91\001\002\000\044\002\uff92\007\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\025\uff92\026\uff92\027\uff92" +
    "\033\uff92\063\uff92\066\104\070\103\072\uff92\073\uff92\101" +
    "\uff92\001\002\000\040\002\uff41\007\uff41\014\uff41\015\uff41" +
    "\016\uff41\017\uff41\021\uff41\025\uff41\026\uff41\027\uff41\033" +
    "\uff41\063\uff41\072\uff41\073\uff41\101\uff41\001\002\000\010" +
    "\022\214\023\215\024\213\001\002\000\004\064\220\001" +
    "\002\000\004\064\217\001\002\000\004\064\216\001\002" +
    "\000\040\002\uff43\007\uff43\014\uff43\015\uff43\016\uff43\017" +
    "\uff43\021\uff43\025\uff43\026\uff43\027\uff43\033\uff43\063\uff43" +
    "\072\uff43\073\uff43\101\uff43\001\002\000\040\002\uff44\007" +
    "\uff44\014\uff44\015\uff44\016\uff44\017\uff44\021\uff44\025\uff44" +
    "\026\uff44\027\uff44\033\uff44\063\uff44\072\uff44\073\uff44\101" +
    "\uff44\001\002\000\040\002\uff42\007\uff42\014\uff42\015\uff42" +
    "\016\uff42\017\uff42\021\uff42\025\uff42\026\uff42\027\uff42\033" +
    "\uff42\063\uff42\072\uff42\073\uff42\101\uff42\001\002\000\004" +
    "\002\uffa8\001\002\000\004\073\223\001\002\000\004\064" +
    "\uff5c\001\002\000\004\064\225\001\002\000\004\006\226" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\230\001\002\000" +
    "\040\002\uff70\007\uff70\014\uff70\015\uff70\016\uff70\017\uff70" +
    "\021\uff70\025\uff70\026\uff70\027\uff70\033\uff70\063\uff70\072" +
    "\uff70\073\uff70\101\uff70\001\002\000\040\002\uff46\007\uff46" +
    "\014\uff46\015\uff46\016\uff46\017\uff46\021\uff46\025\uff46\026" +
    "\uff46\027\uff46\033\uff46\063\uff46\072\uff46\073\uff46\101\uff46" +
    "\001\002\000\040\002\uff47\007\uff47\014\uff47\015\uff47\016" +
    "\uff47\017\uff47\021\uff47\025\uff47\026\uff47\027\uff47\033\uff47" +
    "\063\uff47\072\uff47\073\uff47\101\uff47\001\002\000\024\007" +
    "\u011c\010\u0122\011\u011d\012\u0124\013\u0123\045\u0121\065\u011e" +
    "\073\u0120\106\u0125\001\002\000\006\005\u0111\007\u0110\001" +
    "\002\000\004\006\u010d\001\002\000\006\005\240\007\237" +
    "\001\002\000\010\005\246\007\245\073\244\001\002\000" +
    "\004\006\241\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\007\243" +
    "\001\002\000\004\002\uffa9\001\002\000\010\005\300\006" +
    "\277\073\276\001\002\000\004\005\271\001\002\000\036" +
    "\006\250\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\007\270\001\002\000\036\007" +
    "\252\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\006\002\uff9f\007\254\001\002\000\006" +
    "\002\ufffe\007\253\001\002\000\004\002\uffa3\001\002\000" +
    "\010\002\ufffd\007\256\073\255\001\002\000\006\002\uffcb" +
    "\073\257\001\002\000\004\002\uffa2\001\002\000\006\002" +
    "\uffca\073\260\001\002\000\006\002\uffc9\073\261\001\002" +
    "\000\006\002\uffc8\073\262\001\002\000\006\002\uffc7\073" +
    "\263\001\002\000\006\002\uffc6\073\264\001\002\000\006" +
    "\002\uffc5\073\265\001\002\000\006\002\uffc4\073\266\001" +
    "\002\000\006\002\uffc3\073\267\001\002\000\004\002\uffc2" +
    "\001\002\000\004\002\uff9e\001\002\000\004\006\272\001" +
    "\002\000\036\007\274\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\275\001\002" +
    "\000\004\002\uffa6\001\002\000\004\002\uffa5\001\002\000" +
    "\010\005\310\006\307\073\306\001\002\000\034\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\004\006\301\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\007" +
    "\303\001\002\000\004\002\uffde\001\002\000\004\007\305" +
    "\001\002\000\004\002\uffab\001\002\000\010\005\320\006" +
    "\317\073\316\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\006\311" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\313\001\002\000" +
    "\004\002\uffdd\001\002\000\004\007\315\001\002\000\004" +
    "\002\uffd4\001\002\000\010\005\330\006\327\073\326\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\006\321\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\323\001\002\000\004\002\uffdc\001" +
    "\002\000\004\007\325\001\002\000\004\002\uffd3\001\002" +
    "\000\010\005\340\006\337\073\336\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\006\331\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\333\001\002\000\004\002\uffdb\001\002\000\004\007" +
    "\335\001\002\000\004\002\uffd2\001\002\000\010\005\350" +
    "\006\347\073\346\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\006" +
    "\341\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\343\001\002" +
    "\000\004\002\uffda\001\002\000\004\007\345\001\002\000" +
    "\004\002\uffd1\001\002\000\010\005\360\006\357\073\356" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\006\351\001\002\000" +
    "\034\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\004\007\353\001\002\000\004\002\uffd9" +
    "\001\002\000\004\007\355\001\002\000\004\002\uffd0\001" +
    "\002\000\010\005\370\006\367\073\366\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\006\361\001\002\000\034\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\363\001\002\000\004\002\uffd8\001\002\000\004" +
    "\007\365\001\002\000\004\002\uffcf\001\002\000\010\005" +
    "\u0100\006\377\073\376\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\006\371\001\002\000\034\014\052\015\025\016\061\017" +
    "\041\021\034\025\040\026\055\027\024\033\050\063\053" +
    "\072\051\073\036\101\047\001\002\000\004\007\373\001" +
    "\002\000\004\002\uffd7\001\002\000\004\007\375\001\002" +
    "\000\004\002\uffce\001\002\000\006\005\u0107\006\u0106\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\006\u0101\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\u0103\001\002\000\004\002\uffd6\001" +
    "\002\000\004\007\u0105\001\002\000\004\002\uffcd\001\002" +
    "\000\034\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\006\u0108\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u010a\001\002\000\004\002\uffd5\001\002" +
    "\000\004\007\u010c\001\002\000\004\002\uffcc\001\002\000" +
    "\034\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\004\007\u010f\001\002\000\004\002\uffac" +
    "\001\002\000\004\005\u0119\001\002\000\036\006\u0113\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u0118\001\002\000\036\007\u0115\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\006\002\uffa1\007\u0117\001\002\000\006\002\001\007" +
    "\u0116\001\002\000\004\002\uffa4\001\002\000\004\002\uffb7" +
    "\001\002\000\004\002\uffa0\001\002\000\004\006\u011a\001" +
    "\002\000\004\007\u011b\001\002\000\004\002\uffa7\001\002" +
    "\000\004\005\u019d\001\002\000\010\005\uff95\007\uff95\073" +
    "\uff95\001\002\000\010\012\u019b\013\u019c\073\u019a\001\002" +
    "\000\004\007\u0195\001\002\000\024\007\u0129\010\u0122\011" +
    "\u011d\012\u0124\013\u0123\045\u0121\065\u011e\073\u012b\106\u0125" +
    "\001\002\000\004\072\u0128\001\002\000\010\005\uff96\007" +
    "\uff96\073\uff96\001\002\000\010\005\uff8a\007\uff8a\073\uff8a" +
    "\001\002\000\010\005\uff89\007\uff89\073\uff89\001\002\000" +
    "\014\005\uff94\007\uff94\010\u0127\011\u0126\073\uff94\001\002" +
    "\000\010\005\uff97\007\uff97\073\uff97\001\002\000\010\005" +
    "\uff98\007\uff98\073\uff98\001\002\000\010\005\uff93\007\uff93" +
    "\073\uff93\001\002\000\004\005\u0191\001\002\000\004\007" +
    "\u018c\001\002\000\024\007\u012c\010\u0122\011\u011d\012\u0124" +
    "\013\u0123\045\u0121\065\u011e\073\u012e\106\u0125\001\002\000" +
    "\004\005\u0188\001\002\000\004\007\u0183\001\002\000\024" +
    "\007\u012f\010\u0122\011\u011d\012\u0124\013\u0123\045\u0121\065" +
    "\u011e\073\u0131\106\u0125\001\002\000\004\005\u017f\001\002" +
    "\000\004\007\u017a\001\002\000\024\007\u0132\010\u0122\011" +
    "\u011d\012\u0124\013\u0123\045\u0121\065\u011e\073\u0134\106\u0125" +
    "\001\002\000\004\005\u0176\001\002\000\004\007\u0171\001" +
    "\002\000\024\007\u0135\010\u0122\011\u011d\012\u0124\013\u0123" +
    "\045\u0121\065\u011e\073\u0137\106\u0125\001\002\000\004\005" +
    "\u016d\001\002\000\004\007\u0168\001\002\000\024\007\u0138" +
    "\010\u0122\011\u011d\012\u0124\013\u0123\045\u0121\065\u011e\073" +
    "\u013a\106\u0125\001\002\000\004\005\u0164\001\002\000\004" +
    "\007\u015f\001\002\000\024\007\u013b\010\u0122\011\u011d\012" +
    "\u0124\013\u0123\045\u0121\065\u011e\073\u013d\106\u0125\001\002" +
    "\000\004\005\u015b\001\002\000\004\007\u0156\001\002\000" +
    "\024\007\u013e\010\u0122\011\u011d\012\u0124\013\u0123\045\u0121" +
    "\065\u011e\073\u0140\106\u0125\001\002\000\004\005\u0152\001" +
    "\002\000\004\007\u014d\001\002\000\024\007\u0141\010\u0122" +
    "\011\u011d\012\u0124\013\u0123\045\u0121\065\u011e\073\u0143\106" +
    "\u0125\001\002\000\004\005\u0149\001\002\000\004\007\u0144" +
    "\001\002\000\020\010\u0122\011\u011d\012\u0124\013\u0123\045" +
    "\u0121\065\u011e\106\u0125\001\002\000\004\005\u0145\001\002" +
    "\000\004\006\u0146\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\007" +
    "\u0148\001\002\000\004\002\uffb8\001\002\000\004\006\u014a" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\u014c\001\002\000" +
    "\004\002\uffad\001\002\000\004\005\u014e\001\002\000\004" +
    "\006\u014f\001\002\000\034\014\052\015\025\016\061\017" +
    "\041\021\034\025\040\026\055\027\024\033\050\063\053" +
    "\072\051\073\036\101\047\001\002\000\004\007\u0151\001" +
    "\002\000\004\002\uffb9\001\002\000\004\006\u0153\001\002" +
    "\000\034\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\007\u0155\001\002\000\004\002" +
    "\uffae\001\002\000\004\005\u0157\001\002\000\004\006\u0158" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\u015a\001\002\000" +
    "\004\002\uffba\001\002\000\004\006\u015c\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\u015e\001\002\000\004\002\uffaf\001" +
    "\002\000\004\005\u0160\001\002\000\004\006\u0161\001\002" +
    "\000\034\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\007\u0163\001\002\000\004\002" +
    "\uffbb\001\002\000\004\006\u0165\001\002\000\034\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\004\007\u0167\001\002\000\004\002\uffb0\001\002\000" +
    "\004\005\u0169\001\002\000\004\006\u016a\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\u016c\001\002\000\004\002\uffbc\001" +
    "\002\000\004\006\u016e\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u0170\001\002\000\004\002\uffb1\001\002\000\004\005" +
    "\u0172\001\002\000\004\006\u0173\001\002\000\034\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\004\007\u0175\001\002\000\004\002\uffbd\001\002\000" +
    "\004\006\u0177\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\007\u0179" +
    "\001\002\000\004\002\uffb2\001\002\000\004\005\u017b\001" +
    "\002\000\004\006\u017c\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u017e\001\002\000\004\002\uffbe\001\002\000\004\006" +
    "\u0180\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\u0182\001\002" +
    "\000\004\002\uffb3\001\002\000\004\005\u0184\001\002\000" +
    "\004\006\u0185\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\007\u0187" +
    "\001\002\000\004\002\uffbf\001\002\000\004\006\u0189\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u018b\001\002\000\004" +
    "\002\uffb4\001\002\000\004\005\u018d\001\002\000\004\006" +
    "\u018e\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\u0190\001\002" +
    "\000\004\002\uffc0\001\002\000\004\006\u0192\001\002\000" +
    "\034\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\004\007\u0194\001\002\000\004\002\uffb5" +
    "\001\002\000\004\005\u0196\001\002\000\004\006\u0197\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u0199\001\002\000\004" +
    "\002\uffc1\001\002\000\010\005\uff8b\007\uff8b\073\uff8b\001" +
    "\002\000\010\005\uff8d\007\uff8d\073\uff8d\001\002\000\010" +
    "\005\uff8c\007\uff8c\073\uff8c\001\002\000\004\006\u019e\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u01a0\001\002\000\004" +
    "\002\uffb6\001\002\000\004\006\u01a2\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u01a4\001\002\000\004\002\uffaa\001\002" +
    "\000\006\005\uff9d\007\uff9d\001\002\000\006\006\u01af\073" +
    "\u01ae\001\002\000\004\073\u0143\001\002\000\004\007\u01a9" +
    "\001\002\000\004\005\u01aa\001\002\000\004\006\u01ab\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u01ad\001\002\000\004" +
    "\002\uffe8\001\002\000\006\006\u01b7\073\u01b6\001\002\000" +
    "\004\073\u0143\001\002\000\004\007\u01b1\001\002\000\004" +
    "\005\u01b2\001\002\000\004\006\u01b3\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u01b5\001\002\000\004\002\uffe7\001\002" +
    "\000\006\006\u01bf\073\u01be\001\002\000\004\073\u0143\001" +
    "\002\000\004\007\u01b9\001\002\000\004\005\u01ba\001\002" +
    "\000\004\006\u01bb\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\007" +
    "\u01bd\001\002\000\004\002\uffe6\001\002\000\006\006\u01c7" +
    "\073\u01c6\001\002\000\004\073\u0143\001\002\000\004\007" +
    "\u01c1\001\002\000\004\005\u01c2\001\002\000\004\006\u01c3" +
    "\001\002\000\034\014\052\015\025\016\061\017\041\021" +
    "\034\025\040\026\055\027\024\033\050\063\053\072\051" +
    "\073\036\101\047\001\002\000\004\007\u01c5\001\002\000" +
    "\004\002\uffe5\001\002\000\006\006\u01cf\073\u01ce\001\002" +
    "\000\004\073\u0143\001\002\000\004\007\u01c9\001\002\000" +
    "\004\005\u01ca\001\002\000\004\006\u01cb\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\u01cd\001\002\000\004\002\uffe4\001" +
    "\002\000\006\006\u01d7\073\u01d6\001\002\000\004\073\u0143" +
    "\001\002\000\004\007\u01d1\001\002\000\004\005\u01d2\001" +
    "\002\000\004\006\u01d3\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u01d5\001\002\000\004\002\uffe3\001\002\000\006\006" +
    "\u01df\073\u01de\001\002\000\004\073\u0143\001\002\000\004" +
    "\007\u01d9\001\002\000\004\005\u01da\001\002\000\004\006" +
    "\u01db\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\u01dd\001\002" +
    "\000\004\002\uffe2\001\002\000\006\006\u01e7\073\u01e6\001" +
    "\002\000\004\073\u0143\001\002\000\004\007\u01e1\001\002" +
    "\000\004\005\u01e2\001\002\000\004\006\u01e3\001\002\000" +
    "\034\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\004\007\u01e5\001\002\000\004\002\uffe1" +
    "\001\002\000\004\006\u01ee\001\002\000\004\073\u0143\001" +
    "\002\000\004\007\u01e9\001\002\000\004\005\u01ea\001\002" +
    "\000\004\006\u01eb\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\007" +
    "\u01ed\001\002\000\004\002\uffe0\001\002\000\004\073\u0143" +
    "\001\002\000\004\007\u01f0\001\002\000\004\005\u01f1\001" +
    "\002\000\004\006\u01f2\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u01f4\001\002\000\004\002\uffdf\001\002\000\004\006" +
    "\u01f6\001\002\000\004\007\u01f7\001\002\000\004\005\u01f8" +
    "\001\002\000\004\006\u01f9\001\002\000\004\007\u01fa\001" +
    "\002\000\004\002\uffff\001\002\000\010\004\u020c\006\u020d" +
    "\073\u020b\001\002\000\004\073\u0143\001\002\000\004\006" +
    "\u01fe\001\002\000\004\073\u0143\001\002\000\004\007\u0200" +
    "\001\002\000\004\005\u0201\001\002\000\004\006\u0202\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u0204\001\002\000\004" +
    "\002\ufff2\001\002\000\004\007\u0206\001\002\000\004\005" +
    "\u0207\001\002\000\004\006\u0208\001\002\000\034\014\052" +
    "\015\025\016\061\017\041\021\034\025\040\026\055\027" +
    "\024\033\050\063\053\072\051\073\036\101\047\001\002" +
    "\000\004\007\u020a\001\002\000\004\002\ufffc\001\002\000" +
    "\010\004\u021c\006\u021d\073\u021b\001\002\000\004\006\u0214" +
    "\001\002\000\004\073\u0143\001\002\000\004\007\u020f\001" +
    "\002\000\004\005\u0210\001\002\000\004\006\u0211\001\002" +
    "\000\034\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\007\u0213\001\002\000\004\002" +
    "\ufffb\001\002\000\004\073\u0143\001\002\000\004\007\u0216" +
    "\001\002\000\004\005\u0217\001\002\000\004\006\u0218\001" +
    "\002\000\034\014\052\015\025\016\061\017\041\021\034" +
    "\025\040\026\055\027\024\033\050\063\053\072\051\073" +
    "\036\101\047\001\002\000\004\007\u021a\001\002\000\004" +
    "\002\ufff1\001\002\000\010\004\u022c\006\u022d\073\u022b\001" +
    "\002\000\004\006\u0224\001\002\000\004\073\u0143\001\002" +
    "\000\004\007\u021f\001\002\000\004\005\u0220\001\002\000" +
    "\004\006\u0221\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\007\u0223" +
    "\001\002\000\004\002\ufffa\001\002\000\004\073\u0143\001" +
    "\002\000\004\007\u0226\001\002\000\004\005\u0227\001\002" +
    "\000\004\006\u0228\001\002\000\034\014\052\015\025\016" +
    "\061\017\041\021\034\025\040\026\055\027\024\033\050" +
    "\063\053\072\051\073\036\101\047\001\002\000\004\007" +
    "\u022a\001\002\000\004\002\ufff0\001\002\000\010\004\u023d" +
    "\006\u023c\073\u023b\001\002\000\004\006\u0234\001\002\000" +
    "\004\073\u0143\001\002\000\004\007\u022f\001\002\000\004" +
    "\005\u0230\001\002\000\004\006\u0231\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u0233\001\002\000\004\002\ufff9\001\002" +
    "\000\004\073\u0143\001\002\000\004\007\u0236\001\002\000" +
    "\004\005\u0237\001\002\000\004\006\u0238\001\002\000\034" +
    "\014\052\015\025\016\061\017\041\021\034\025\040\026" +
    "\055\027\024\033\050\063\053\072\051\073\036\101\047" +
    "\001\002\000\004\007\u023a\001\002\000\004\002\uffef\001" +
    "\002\000\010\004\u024c\006\u024d\073\u024b\001\002\000\004" +
    "\073\u0143\001\002\000\004\006\u023e\001\002\000\004\073" +
    "\u0143\001\002\000\004\007\u0240\001\002\000\004\005\u0241" +
    "\001\002\000\004\006\u0242\001\002\000\034\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\u0244\001\002\000\004\002\uffee\001\002\000\004" +
    "\007\u0246\001\002\000\004\005\u0247\001\002\000\004\006" +
    "\u0248\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\u024a\001\002" +
    "\000\004\002\ufff8\001\002\000\010\004\u025c\006\u025d\073" +
    "\u025b\001\002\000\004\006\u0254\001\002\000\004\073\u0143" +
    "\001\002\000\004\007\u024f\001\002\000\004\005\u0250\001" +
    "\002\000\004\006\u0251\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u0253\001\002\000\004\002\ufff7\001\002\000\004\073" +
    "\u0143\001\002\000\004\007\u0256\001\002\000\004\005\u0257" +
    "\001\002\000\004\006\u0258\001\002\000\034\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\u025a\001\002\000\004\002\uffed\001\002\000\010" +
    "\004\u026d\006\u026c\073\u026b\001\002\000\004\006\u0264\001" +
    "\002\000\004\073\u0143\001\002\000\004\007\u025f\001\002" +
    "\000\004\005\u0260\001\002\000\004\006\u0261\001\002\000" +
    "\034\014\052\015\025\016\061\017\041\021\034\025\040" +
    "\026\055\027\024\033\050\063\053\072\051\073\036\101" +
    "\047\001\002\000\004\007\u0263\001\002\000\004\002\ufff6" +
    "\001\002\000\004\073\u0143\001\002\000\004\007\u0266\001" +
    "\002\000\004\005\u0267\001\002\000\004\006\u0268\001\002" +
    "\000\034\014\052\015\025\016\061\017\041\021\034\025" +
    "\040\026\055\027\024\033\050\063\053\072\051\073\036" +
    "\101\047\001\002\000\004\007\u026a\001\002\000\004\002" +
    "\uffec\001\002\000\010\004\u027c\006\u027d\073\u027b\001\002" +
    "\000\004\073\u0143\001\002\000\004\006\u026e\001\002\000" +
    "\004\073\u0143\001\002\000\004\007\u0270\001\002\000\004" +
    "\005\u0271\001\002\000\004\006\u0272\001\002\000\034\014" +
    "\052\015\025\016\061\017\041\021\034\025\040\026\055" +
    "\027\024\033\050\063\053\072\051\073\036\101\047\001" +
    "\002\000\004\007\u0274\001\002\000\004\002\uffeb\001\002" +
    "\000\004\007\u0276\001\002\000\004\005\u0277\001\002\000" +
    "\004\006\u0278\001\002\000\034\014\052\015\025\016\061" +
    "\017\041\021\034\025\040\026\055\027\024\033\050\063" +
    "\053\072\051\073\036\101\047\001\002\000\004\007\u027a" +
    "\001\002\000\004\002\ufff5\001\002\000\006\004\u028c\006" +
    "\u028b\001\002\000\004\006\u0284\001\002\000\004\073\u0143" +
    "\001\002\000\004\007\u027f\001\002\000\004\005\u0280\001" +
    "\002\000\004\006\u0281\001\002\000\034\014\052\015\025" +
    "\016\061\017\041\021\034\025\040\026\055\027\024\033" +
    "\050\063\053\072\051\073\036\101\047\001\002\000\004" +
    "\007\u0283\001\002\000\004\002\ufff4\001\002\000\004\073" +
    "\u0143\001\002\000\004\007\u0286\001\002\000\004\005\u0287" +
    "\001\002\000\004\006\u0288\001\002\000\034\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\u028a\001\002\000\004\002\uffea\001\002\000\004" +
    "\073\u0143\001\002\000\004\006\u028d\001\002\000\004\073" +
    "\u0143\001\002\000\004\007\u028f\001\002\000\004\005\u0290" +
    "\001\002\000\004\006\u0291\001\002\000\034\014\052\015" +
    "\025\016\061\017\041\021\034\025\040\026\055\027\024" +
    "\033\050\063\053\072\051\073\036\101\047\001\002\000" +
    "\004\007\u0293\001\002\000\004\002\uffe9\001\002\000\004" +
    "\007\u0295\001\002\000\004\005\u0296\001\002\000\004\006" +
    "\u0297\001\002\000\034\014\052\015\025\016\061\017\041" +
    "\021\034\025\040\026\055\027\024\033\050\063\053\072" +
    "\051\073\036\101\047\001\002\000\004\007\u0299\001\002" +
    "\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0297\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u01a4\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\014\003\235\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\027\012\036" +
    "\013\045\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\132\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\101\027\042\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\066\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\110\030\053\001\001\000\006\027\105\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\144\026\137\027\042\030\053\031\135\001\001\000" +
    "\010\026\171\027\042\030\053\001\001\000\002\001\001" +
    "\000\012\026\161\027\042\030\053\031\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\146\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\153\001" +
    "\001\000\044\011\155\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\004\046\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\164\027\042\030\053" +
    "\001\001\000\002\001\001\000\010\026\163\027\042\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\166\012\036\013\045\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\173\012\036\013\045\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\207\027\042\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\226\012\036" +
    "\013\045\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u011e" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\241\012\036\013\045\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\246\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\044\011\250" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\272\012\036\013\045\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\303\012\036\013\045\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\044\011\301\012\036\013\045\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\313" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\044\011\311\012\036\013\045\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\323\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\044\011\321\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\333\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\044\011\331\012\036\013\045\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\343\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\044\011\341\012\036\013\045\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\353\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\044\011\351" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\363\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\044\011\361\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\373\012\036\013\045\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\044\011\371\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u0103\012\036" +
    "\013\045\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\044\011" +
    "\u0101\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u010a\012\036\013\045\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\044\011\u0108\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u010d\012\036\013\045\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u0111\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\044\011\u0113\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0129\004\012\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u012c\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u012f\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u0132\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0135\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u0138\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u013b\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u013e\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0141\004\012\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0146\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u014a\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u014f\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0153\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0158\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u015c\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0161\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0165\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u016a\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u016e\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0173\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0177\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u017c\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0180\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0185\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0189\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u018e\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0192\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0197\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u019e\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u01a2\012\036\013\045\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u01a7\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u01ab\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u01af\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u01b3\012\036\013\045\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u01b7\004\012\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u01bb\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u01bf\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u01c3\012\036\013\045\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01c7\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u01cb\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u01cf\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u01d3\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u01d7\004\012\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u01db\012\036\013" +
    "\045\016\041\017\056\020\055\025\043\026\032\027\042" +
    "\030\053\032\034\034\057\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u01df\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u01e3\012\036\013\045\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u01e7\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u01eb\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u01ee" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u01f2" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0204\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\014\003" +
    "\u01fe\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0202\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u0208\012\036\013\045\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u020d\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u0211\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u0214\004\012\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u0218\012\036\013\045\016\041\017\056\020\055" +
    "\025\043\026\032\027\042\030\053\032\034\034\057\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u021d\004\012\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u0221\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0224\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0228\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u022d\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0231\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0234\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u0238\012\036\013\045\016" +
    "\041\017\056\020\055\025\043\026\032\027\042\030\053" +
    "\032\034\034\057\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0244\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\014\003\u023e\004\012" +
    "\005\016\006\015\007\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u0242\012\036" +
    "\013\045\016\041\017\056\020\055\025\043\026\032\027" +
    "\042\030\053\032\034\034\057\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0248\012\036\013\045\016\041\017\056\020" +
    "\055\025\043\026\032\027\042\030\053\032\034\034\057" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u024d\004\012\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u0251\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0254" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u0258" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u025d\004\012\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0261\012\036\013\045\016\041\017\056\020\055\025" +
    "\043\026\032\027\042\030\053\032\034\034\057\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0264\004\012\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u0268\012\036\013\045" +
    "\016\041\017\056\020\055\025\043\026\032\027\042\030" +
    "\053\032\034\034\057\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0274\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\014\003\u026e\004" +
    "\012\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0272\012" +
    "\036\013\045\016\041\017\056\020\055\025\043\026\032" +
    "\027\042\030\053\032\034\034\057\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u0278\012\036\013\045\016\041\017\056" +
    "\020\055\025\043\026\032\027\042\030\053\032\034\034" +
    "\057\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u027d\004\012\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u0281\012\036\013\045\016\041" +
    "\017\056\020\055\025\043\026\032\027\042\030\053\032" +
    "\034\034\057\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0284\004\012\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0288\012\036\013\045\016\041\017\056\020\055\025\043" +
    "\026\032\027\042\030\053\032\034\034\057\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0293\004\012\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\014\003\u028d" +
    "\004\012\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u0291" +
    "\012\036\013\045\016\041\017\056\020\055\025\043\026" +
    "\032\027\042\030\053\032\034\034\057\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u0297\012\036\013\045\016\041\017" +
    "\056\020\055\025\043\026\032\027\042\030\053\032\034" +
    "\034\057\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0;
    int direccionDeMemoria = 20; 
    int ifs = 0;
    int elses=0;
    int whiles = 0;
    int repeats = 0;
    int a=0,n=0;
    String id_sal="",id_ent="";
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
    message="Error de Sintaxis";
        compilador.setError("Se esperaba "+message+" Linea "+(left)+" Columna: "+(right));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");       
        message="Error de Sintaxis";
        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");
        message="Error de Sintaxis";
        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public String newTemporal2(Lexema a, Lexema b){
             String resultado;
           compilador.tres(a.lexema + " = " + b.tres);
             resultado = "t" + contadorTemporales;
           
           return resultado;
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " =  "+op.lexema+" "+a.tres+","+b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

     public String newTemporal1(Object a, Object op, Object b){
        String resultado;

            System.out.println(a);
            System.out.println(op);
            System.out.println(b);
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales +" = "+a+" "+op+" "+b);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public String agregarVariableObj(Lexema a, Lexema b,Lexema c){
                String resultado="";
           //compilador.addCodigoObjeto(a.lexema + " = " + b.tres);
           //  resultado = "t" + contadorTemporales;
           //System.err.println("A:"+a.lexema+"|B:"+b.lexema+"|C:"+c.lexema+"|");  
           if(c.lexema.equals("#")){
               if(b.lexema.equals("verdadero")){
                   resultado="\n    " +a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    " +"MOVLW D'1' "+"\n    " +"MOVWF "+a.lexema+"\n    "+"CLRW";
               }else{
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'0' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }  
           }
           else{
               if(c.lexema.equals("=")){
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'"+b.lexema+"' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }
               else{
                   if(c.lexema.equals(":")){
                        //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+" Corta:"+b.lexema.substring(2, 3));  
                        if (b.lexema.substring(2, 3).equals("a")) {
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTB"+","+b.lexema.substring(3, 4);
                        }
                        else{
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTA"+","+b.lexema.substring(3, 4);
                        }
                   }
                   
               }               
           }
           //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+"|");  
           compilador.addCodigoObjeto(resultado);
           
           return resultado;

    }


    public String agregarCodigoObjeto(String EstCodigo){
            compilador.addCodigoObjeto(EstCodigo);     
            return EstCodigo;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // motorelec ::= MOTORELECT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <MOTORELECT> , se esperaba una estructura MOTORELECT ( SAR | CAR | DETENER) renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // motorelec ::= MOTORELECT PAREIZQ DETENER PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // motorelec ::= MOTORELECT PAREIZQ CAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // motorelec ::= MOTORELECT PAREIZQ SAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // cont ::= CONTADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <contador> , se esperaba final o inicio'(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // cont ::= CONTADOR FINAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // cont ::= CONTADOR INICIO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // retart ::= RETARDO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre '(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // retart ::= RETARDO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta el valor de el retardo  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // retart ::= RETARDO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre ')'  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // retart ::= RETARDO PAREIZQ INTEGERNUM COMA TIEMPO PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("  CALL Retardo_"+n.lexema+t.lexema);
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // srvo ::= SERVO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia servo  "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // srvo ::= SERVO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // f ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo entero");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe y/o no esta declarada");
    }

    n.tres=n.lexema;
    RESULT=n.lexema;                                


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // f ::= PAREIZQ exp PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

RESULT = e;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // f ::= INTEGERNUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema x = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
x.tres=x.lexema;
RESULT = x.lexema;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // t ::= f 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT = s;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // t ::= t MULTIPLICACION f 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema l = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    q = parser.newTemporal1 (q,l.lexema,h);
RESULT = q;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exp ::= t 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
RESULT = w;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exp ::= exp RESTA t 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
    r = parser.newTemporal1 (r,g.lexema,v);
RESULT = r;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exp ::= exp SUMA t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema op = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//a.tres=a.lexema;
    a = parser.newTemporal1 (a,op.lexema,b);
RESULT = a;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // oprel ::= COMPARA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema co = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    co.tres=co.lexema;
        RESULT = co.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // oprel ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema ma = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    ma.tres=ma.lexema;
        RESULT = ma.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // oprel ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema me = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    me.tres=me.lexema;
        RESULT = me.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // oplog ::= NOT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cond_s ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
parser.agregarCodigoObjeto("\n   BTFSS "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT = ""+id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_s",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cond_f ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
 parser.agregarCodigoObjeto("\n   BTFSC "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_f",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cond ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.agregarCodigoObjeto("    C"+parser.whiles+"\n    BTFSS "+id.lexema+",0"+"\n     GOTO FUERA"+parser.whiles+"\n");
 
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cond ::= oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le faltan componentes en Renglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cond ::= exp oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operando o expresion en Reglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cond ::= exp exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operador  en Reglon:  "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cond ::= oprel exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta un operando o expresion en Reglon:  "+(idleft+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // cond ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError ("Error Sintactico: El operador IGUAL '=' no es un operador de comparacion pruebe con: '=='en Reglon:  "+(igleft+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // cond ::= exp oprel exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          

        Object b;
        b= parser.newTemporal1(a,op,y);
        RESULT=b;



    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // s_ciclo ::= CICLO PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // s_ciclo ::= CICLO PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion ni sentencias dentro de el  renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ NT$0 cuerpo NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.agregarCodigoObjeto("    GOTO C"+parser.whiles+"\n   FUERA"+parser.whiles+"\n"); parser.whiles++;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

    
    compilador.tres("GO TO ciclo"+parser.whiles);
    compilador.tres("salida:");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$0 ::= 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

        
        ci.tres="\nciclo"+parser.whiles+":";
        compilador.tres(ci.tres);
            compilador.tres("SI "+co+" = falso GO TO "+"salida");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // s_ef ::= EF PAREIZQ cond_f PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);
parser.ifs++; parser.elses++; i.tres="EF"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ef",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // s_ed ::= ED PAREIZQ cond_s PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);

parser.ifs++; parser.elses++; i.tres="ED"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ed",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // p_salida ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_sal=n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("psalida")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo psalida");

                }
    }        
    else{
        compilador.setError("Error semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);
RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // p_salida ::= PSALIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    parser.id_sal=r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema k = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
    parser.agregarCodigoObjeto("   BTFSS "+k.lexema+",0\n" +
"   BCF "+parser.id_sal+"\n" +
"   BTFSC "+k.lexema+",0\n" +
"   BSF "+parser.id_sal+"\n");
    if(!parser.tabla.containsKey(k.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(k.lexema)){
                  
       String tmp = compilador.Buscar(k.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No es de tipo Boleano");

                }
    }    
    
    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // p_entrada ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("pentrada")){

                     compilador.setError("Error semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo pentrada");

                }
    }        
    else{
        compilador.setError("Error semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);

RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // p_entrada ::= PENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		  
    compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
        parser.agregarCodigoObjeto("    BCF "+ id.lexema+",0\n"+"  BTFSC "+parser.id_ent+"\n"+"   BSF "+id.lexema+",0\n");
    if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // alto ::= ALTO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("     MOVLW B'"+i.lexema+"'\n       MOVWF PORTB"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia ::= alto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia ::= as_fvbol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia ::= as_asig 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia ::= cont 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia ::= retart 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia ::= srvo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia ::= motorelec 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia ::= exp 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia ::= s_ciclo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia ::= s_ef 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia ::= s_ed 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia ::= puertosalida 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia ::= puertoentrada 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // as_puerto ::= ID PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error semantico <"+id.lexema+">: No se encontro ':' : renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // as_puerto ::= ID PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error semantico <"+id.lexema+">: No se encontro ':'' : renglon: "+(idleft+1)+" columna: "+(idright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // as_puerto ::= ID DOSPUNTOS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
compilador.setError("Error semantico <"+p.lexema+">: La Variable no es de tipo PUERTO: renglon: "+(pleft+1)+" columna: "+(pright+1)+"");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // as_puerto ::= ID DOSPUNTOS PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor); 
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);
// generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);    

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error semantico : El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // as_puerto ::= ID DOSPUNTOS PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);    
    // generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error semantico(Unidad); El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // as_fvbol ::= ID VERDADERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    compilador.setError("Error semantico: No se encontro '='");
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // as_fvbol ::= ID FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    compilador.setError("Error semantico: No se encontro '='");
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // as_fvbol ::= ID IGUAL FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		  parser.agregarCodigoObjeto("    BCF "+i.lexema+",0\n");
     if(!parser.tabla.containsKey(i.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(i.lexema)){
                  
       String tmp = compilador.Buscar(i.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

                }
    }        

    compilador.tres(i.lexema+" "+g.lexema+" "+f.lexema);
    
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // as_fvbol ::= ID IGUAL VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          
        parser.agregarCodigoObjeto("    BSF "+id.lexema+",0\n");
         if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        

   compilador.tres(id.lexema+" "+ig.lexema+" "+v.lexema);


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // as_asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

 if(!parser.tabla.containsKey(id.lexema)){
                  
                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


        compilador.tres(id.lexema+" "+ig.lexema+" "+e);





    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_asig",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // as_dato ::= ID IGUAL INTEGERNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema valor = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = ""+valor;            
    id.tipo = "entero";
    RESULT = valor;
    compilador.agregarid(id.lexema,id.tipo,id.valor);       
    parser.tabla.put(id.lexema,id);

    id.tres = id.lexema;
    valor.tres= valor.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,valor);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,valor,o);
    //codigo gen cod
  }
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_dato",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // as_bol ::= ID GATO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro  valor BOOLEANO en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // as_bol ::= ID FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro # en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // as_bol ::= ID VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico: No se encontro # en el renglon: "+(idleft+1)+" columna: "+(idright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // as_bol ::= ID GATO FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "FALSO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);          
    parser.tabla.put(id.lexema,id);
    id.tres = id.lexema;
    f.tres= f.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,f);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,f,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // as_bol ::= ID GATO VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "VERDADERO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);

    id.tres = id.lexema;
    v.tres= v.lexema;

    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,v);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,v,o);
    }        
    else{
        compilador.setError("Error semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asig ::= as_puerto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asig ::= as_dato 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asig ::= as_bol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignacion ::= asig 
            {
              Object RESULT =null;
		 parser.agregarCodigoObjeto("\nBUCLE\n"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignacion ::= asig asignacion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inicio ::= DECLARA LLAVEIZQ LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inicio ::= DECLARA asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inicio ::= DECLARA LLAVEIZQ asignacion BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inicio ::= DECLARA LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error sintactico : La estructura debe empezar con BUCLE ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inicio ::= DECLARA LLAVEIZQ BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inicio ::= DECLARA LLAVEIZQ ID ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicio ::= DECLARA LLAVEIZQ ID ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicio ::= DECLARA LLAVEIZQ ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico: renglon: Estructura DECLARA vacia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inicio ::= DECLARA LLAVEIZQ ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inicio ::= DECLARA LLAVEIZQ ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inicio ::= DECLARA LLAVEIZQ ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE. .");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER ID BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n.La estructura debe empezar con BUCLE.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio ::= DECLARA ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= DECLARA ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= DECLARA ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicio ::= DECLARA ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= DECLARA ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= DECLARA ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= DECLARA ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicio ::= DECLARA ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= ID ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicio ::= ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio ::= ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error Sintactico: El documento esta vacio no hay nada para compilar");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

