
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 25 18:18:26 CST 2017
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 25 18:18:26 CST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\010\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\012\000\002\002\012" +
    "\000\002\002\013\000\002\002\014\000\002\002\015\000" +
    "\002\002\016\000\002\002\017\000\002\002\020\000\002" +
    "\002\021\000\002\002\022\000\002\002\023\000\002\002" +
    "\013\000\002\002\014\000\002\002\015\000\002\002\016" +
    "\000\002\002\017\000\002\002\020\000\002\002\021\000" +
    "\002\002\022\000\002\002\023\000\002\002\024\000\002" +
    "\002\013\000\002\002\014\000\002\002\015\000\002\002" +
    "\016\000\002\002\017\000\002\002\020\000\002\002\021" +
    "\000\002\002\022\000\002\002\023\000\002\002\024\000" +
    "\002\002\013\000\002\002\014\000\002\002\015\000\002" +
    "\002\016\000\002\002\011\000\002\002\012\000\002\002" +
    "\010\000\002\002\010\000\002\002\011\000\002\002\011" +
    "\000\002\002\011\000\002\002\012\000\002\002\013\000" +
    "\002\002\011\000\002\002\012\000\002\002\013\000\002" +
    "\002\010\000\002\002\010\000\002\002\011\000\002\002" +
    "\011\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\006\005\000\002\037\005\000\002" +
    "\040\005\000\002\040\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\011\004\000\002\011\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\043\006\000\002\012\010\000\002\012\007\000" +
    "\002\014\003\000\002\014\003\000\002\013\010\000\002" +
    "\013\007\000\002\015\003\000\002\015\003\000\002\017" +
    "\011\000\002\020\011\000\002\045\002\000\002\046\002" +
    "\000\002\025\013\000\002\025\007\000\002\025\010\000" +
    "\002\025\010\000\002\025\007\000\002\025\007\000\002" +
    "\025\006\000\002\025\006\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\023\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\003\000\002\034\006\000\002" +
    "\034\004\000\002\035\010\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\036\004\000\002\036\004" +
    "\000\002\036\003\000\002\032\006\000\002\032\006\000" +
    "\002\032\006\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e0\000\010\003\005\004\006\073\004\001\002\000" +
    "\010\004\u0146\006\u0145\073\u0144\001\002\000\004\004\u013e" +
    "\001\002\000\010\006\015\007\013\073\011\001\002\000" +
    "\004\002\010\001\002\000\004\002\000\001\002\000\014" +
    "\006\360\045\304\065\301\073\357\106\305\001\002\000" +
    "\010\005\uffc6\007\uffc6\073\uffc6\001\002\000\004\005\353" +
    "\001\002\000\010\005\uffc9\007\uffc9\073\316\001\002\000" +
    "\010\005\233\007\232\073\231\001\002\000\010\005\uffc7" +
    "\007\uffc7\073\uffc7\001\002\000\010\005\uffc8\007\uffc8\073" +
    "\uffc8\001\002\000\004\007\021\001\002\000\004\005\022" +
    "\001\002\000\004\006\023\001\002\000\034\014\052\015" +
    "\024\016\060\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\037\101\047\001\002\000" +
    "\004\063\222\001\002\000\044\002\uff79\007\uff79\014\uff79" +
    "\015\uff79\016\uff79\017\uff79\021\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\220\031\221\033\uff79\063\uff79\072\uff79\073\uff79" +
    "\101\uff79\001\002\000\040\002\uffb0\007\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\021\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\033\uffb0\063\uffb0\072\uffb0\073\uffb0\101\uffb0\001\002\000" +
    "\040\002\uffb1\007\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\021\uffb1\025\uffb1\026\uffb1\027\uffb1\033\uffb1\063\uffb1\072" +
    "\uffb1\073\uffb1\101\uffb1\001\002\000\004\007\217\001\002" +
    "\000\040\002\uffae\007\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\021\uffae\025\uffae\026\uffae\027\uffae\033\uffae\063\uffae" +
    "\072\uffae\073\uffae\101\uffae\001\002\000\040\002\uffaf\007" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\033\uffaf\063\uffaf\072\uffaf\073\uffaf\101" +
    "\uffaf\001\002\000\044\002\uffb5\007\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\021\uffb5\025\uffb5\026\uffb5\027\uffb5\033" +
    "\uffb5\063\uffb5\066\104\070\103\072\uffb5\073\uffb5\101\uffb5" +
    "\001\002\000\006\003\207\063\210\001\002\000\040\002" +
    "\uffba\007\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba" +
    "\025\uffba\026\uffba\027\uffba\033\uffba\063\uffba\072\uffba\073" +
    "\uffba\101\uffba\001\002\000\040\002\uffb4\007\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\021\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\033\uffb4\063\uffb4\072\uffb4\073\uffb4\101\uffb4\001\002" +
    "\000\050\002\uff82\007\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\021\uff82\025\uff82\026\uff82\027\uff82\033\uff82\045\203" +
    "\063\uff82\066\uff82\067\uff82\070\uff82\072\uff82\073\uff82\101" +
    "\uff82\001\002\000\006\003\177\063\200\001\002\000\006" +
    "\063\135\064\134\001\002\000\060\002\uff87\007\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\025\uff87" +
    "\026\uff87\027\uff87\033\uff87\043\uff87\044\uff87\045\uff87\063" +
    "\uff87\064\uff87\066\uff87\067\107\070\uff87\072\uff87\073\uff87" +
    "\101\uff87\001\002\000\040\002\uffbb\007\uffbb\014\052\015" +
    "\024\016\060\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\037\101\047\001\002\000" +
    "\040\002\uffb6\007\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\025\uffb6\026\uffb6\027\uffb6\033\uffb6\063\uffb6\072" +
    "\uffb6\073\uffb6\101\uffb6\001\002\000\040\002\uffb2\007\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\033\uffb2\063\uffb2\072\uffb2\073\uffb2\101\uffb2" +
    "\001\002\000\040\002\uffb9\007\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9" +
    "\063\uffb9\072\uffb9\073\uffb9\101\uffb9\001\002\000\004\063" +
    "\124\001\002\000\060\002\uff84\007\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\021\uff84\025\uff84\026\uff84\027" +
    "\uff84\033\uff84\043\uff84\044\uff84\045\uff84\063\uff84\064\uff84" +
    "\066\uff84\067\uff84\070\uff84\072\uff84\073\uff84\101\uff84\001" +
    "\002\000\004\063\121\001\002\000\004\063\112\001\002" +
    "\000\010\063\053\072\050\073\101\001\002\000\060\002" +
    "\uff85\007\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\025\uff85\026\uff85\027\uff85\033\uff85\043\uff85\044" +
    "\uff85\045\uff85\063\uff85\064\uff85\066\uff85\067\uff85\070\uff85" +
    "\072\uff85\073\uff85\101\uff85\001\002\000\006\063\072\072" +
    "\071\001\002\000\040\002\uffb7\007\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\021\uffb7\025\uffb7\026\uffb7\027\uffb7\033" +
    "\uffb7\063\uffb7\072\uffb7\073\uffb7\101\uffb7\001\002\000\040" +
    "\002\uffb8\007\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\063\uffb8\072\uffb8" +
    "\073\uffb8\101\uffb8\001\002\000\004\063\062\001\002\000" +
    "\040\002\uffb3\007\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\025\uffb3\026\uffb3\027\uffb3\033\uffb3\063\uffb3\072" +
    "\uffb3\073\uffb3\101\uffb3\001\002\000\004\073\063\001\002" +
    "\000\004\064\uff91\001\002\000\004\064\065\001\002\000" +
    "\004\006\066\001\002\000\034\014\052\015\024\016\060" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\037\101\047\001\002\000\004\007\070" +
    "\001\002\000\040\002\uffa3\007\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\021\uffa3\025\uffa3\026\uffa3\027\uffa3\033\uffa3" +
    "\063\uffa3\072\uffa3\073\uffa3\101\uffa3\001\002\000\004\064" +
    "\100\001\002\000\006\064\074\072\073\001\002\000\042" +
    "\002\uff7e\007\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\021" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\033\uff7e\047\075\063\uff7e" +
    "\072\uff7e\073\uff7e\101\uff7e\001\002\000\040\002\uff7d\007" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\021\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\033\uff7d\063\uff7d\072\uff7d\073\uff7d\101" +
    "\uff7d\001\002\000\004\032\076\001\002\000\004\064\077" +
    "\001\002\000\040\002\uff7f\007\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\021\uff7f\025\uff7f\026\uff7f\027\uff7f\033\uff7f" +
    "\063\uff7f\072\uff7f\073\uff7f\101\uff7f\001\002\000\040\002" +
    "\uff7c\007\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\021\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\033\uff7c\063\uff7c\072\uff7c\073" +
    "\uff7c\101\uff7c\001\002\000\060\002\uff82\007\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\025\uff82\026" +
    "\uff82\027\uff82\033\uff82\043\uff82\044\uff82\045\uff82\063\uff82" +
    "\064\uff82\066\uff82\067\uff82\070\uff82\072\uff82\073\uff82\101" +
    "\uff82\001\002\000\010\064\105\066\104\070\103\001\002" +
    "\000\010\063\053\072\050\073\101\001\002\000\010\063" +
    "\053\072\050\073\101\001\002\000\060\002\uff83\007\uff83" +
    "\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\025" +
    "\uff83\026\uff83\027\uff83\033\uff83\043\uff83\044\uff83\045\uff83" +
    "\063\uff83\064\uff83\066\uff83\067\uff83\070\uff83\072\uff83\073" +
    "\uff83\101\uff83\001\002\000\060\002\uff89\007\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\025\uff89\026" +
    "\uff89\027\uff89\033\uff89\043\uff89\044\uff89\045\uff89\063\uff89" +
    "\064\uff89\066\uff89\067\107\070\uff89\072\uff89\073\uff89\101" +
    "\uff89\001\002\000\010\063\053\072\050\073\101\001\002" +
    "\000\060\002\uff86\007\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\025\uff86\026\uff86\027\uff86\033\uff86" +
    "\043\uff86\044\uff86\045\uff86\063\uff86\064\uff86\066\uff86\067" +
    "\uff86\070\uff86\072\uff86\073\uff86\101\uff86\001\002\000\060" +
    "\002\uff88\007\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\025\uff88\026\uff88\027\uff88\033\uff88\043\uff88" +
    "\044\uff88\045\uff88\063\uff88\064\uff88\066\uff88\067\107\070" +
    "\uff88\072\uff88\073\uff88\101\uff88\001\002\000\004\073\113" +
    "\001\002\000\004\047\114\001\002\000\006\012\117\073" +
    "\115\001\002\000\042\002\uffa9\007\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\021\uffa9\025\uffa9\026\uffa9\027\uffa9\033" +
    "\uffa9\063\uffa9\064\uffa9\072\uffa9\073\uffa9\101\uffa9\001\002" +
    "\000\042\002\uffab\007\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\021\uffab\025\uffab\026\uffab\027\uffab\033\uffab\063\uffab" +
    "\064\120\072\uffab\073\uffab\101\uffab\001\002\000\042\002" +
    "\uffaa\007\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\033\uffaa\063\uffaa\064\uffaa\072" +
    "\uffaa\073\uffaa\101\uffaa\001\002\000\040\002\uffac\007\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac\025\uffac\026" +
    "\uffac\027\uffac\033\uffac\063\uffac\072\uffac\073\uffac\101\uffac" +
    "\001\002\000\004\072\122\001\002\000\004\064\123\001" +
    "\002\000\040\002\uffad\007\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\021\uffad\025\uffad\026\uffad\027\uffad\033\uffad\063" +
    "\uffad\072\uffad\073\uffad\101\uffad\001\002\000\004\073\125" +
    "\001\002\000\004\047\126\001\002\000\006\013\130\073" +
    "\127\001\002\000\042\002\uffa5\007\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\025\uffa5\026\uffa5\027\uffa5\033" +
    "\uffa5\063\uffa5\064\uffa5\072\uffa5\073\uffa5\101\uffa5\001\002" +
    "\000\042\002\uffa6\007\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\021\uffa6\025\uffa6\026\uffa6\027\uffa6\033\uffa6\063\uffa6" +
    "\064\uffa6\072\uffa6\073\uffa6\101\uffa6\001\002\000\042\002" +
    "\uffa7\007\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\033\uffa7\063\uffa7\064\132\072" +
    "\uffa7\073\uffa7\101\uffa7\001\002\000\040\002\uffa8\007\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\033\uffa8\063\uffa8\072\uffa8\073\uffa8\101\uffa8" +
    "\001\002\000\006\002\uffbc\007\uffbc\001\002\000\004\006" +
    "\173\001\002\000\022\006\146\020\144\043\141\044\142" +
    "\063\053\064\137\072\050\073\143\001\002\000\012\063" +
    "\053\064\uff93\072\050\073\101\001\002\000\004\006\166" +
    "\001\002\000\024\020\144\043\141\044\142\045\163\063" +
    "\053\066\104\070\103\072\050\073\101\001\002\000\012" +
    "\063\uff8c\064\uff8c\072\uff8c\073\uff8c\001\002\000\012\063" +
    "\uff8b\064\uff8b\072\uff8b\073\uff8b\001\002\000\030\020\uff82" +
    "\043\uff82\044\uff82\045\uff82\063\uff82\064\uff92\066\uff82\067" +
    "\uff82\070\uff82\072\uff82\073\uff82\001\002\000\012\063\uff8a" +
    "\064\uff8a\072\uff8a\073\uff8a\001\002\000\004\064\152\001" +
    "\002\000\036\007\150\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\151\001\002" +
    "\000\040\002\uff99\007\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\021\uff99\025\uff99\026\uff99\027\uff99\033\uff99\063\uff99" +
    "\072\uff99\073\uff99\101\uff99\001\002\000\040\002\uff9b\007" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\033\uff9b\063\uff9b\072\uff9b\073\uff9b\101" +
    "\uff9b\001\002\000\004\006\153\001\002\000\036\007\155" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\033\uffa2\063\uffa2\072\uffa2\073\uffa2\101\uffa2" +
    "\001\002\000\034\014\052\015\024\016\060\017\041\021" +
    "\034\025\040\026\055\027\025\033\051\063\053\072\050" +
    "\073\037\101\047\001\002\000\040\002\uff9d\007\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\033\uff9d\063\uff9d\072\uff9d\073\uff9d\101\uff9d\001" +
    "\002\000\004\007\uffa1\001\002\000\004\007\160\001\002" +
    "\000\040\002\uffa0\007\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\021\uffa0\025\uffa0\026\uffa0\027\uffa0\033\uffa0\063\uffa0" +
    "\072\uffa0\073\uffa0\101\uffa0\001\002\000\012\063\053\064" +
    "\uff94\072\050\073\101\001\002\000\010\064\uff95\066\104" +
    "\070\103\001\002\000\010\063\053\072\050\073\101\001" +
    "\002\000\010\064\uff97\066\104\070\103\001\002\000\010" +
    "\064\uff98\066\104\070\103\001\002\000\036\007\170\014" +
    "\052\015\024\016\060\017\041\021\034\025\040\026\055" +
    "\027\025\033\051\063\053\072\050\073\037\101\047\001" +
    "\002\000\004\007\171\001\002\000\040\002\uff9f\007\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\021\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\033\uff9f\063\uff9f\072\uff9f\073\uff9f\101\uff9f" +
    "\001\002\000\040\002\uff9e\007\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\021\uff9e\025\uff9e\026\uff9e\027\uff9e\033\uff9e" +
    "\063\uff9e\072\uff9e\073\uff9e\101\uff9e\001\002\000\010\064" +
    "\uff96\066\104\070\103\001\002\000\036\007\175\014\052" +
    "\015\024\016\060\017\041\021\034\025\040\026\055\027" +
    "\025\033\051\063\053\072\050\073\037\101\047\001\002" +
    "\000\004\007\176\001\002\000\040\002\uff9a\007\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\033\uff9a\063\uff9a\072\uff9a\073\uff9a\101\uff9a\001" +
    "\002\000\040\002\uff9c\007\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\025\uff9c\026\uff9c\027\uff9c\033\uff9c\063" +
    "\uff9c\072\uff9c\073\uff9c\101\uff9c\001\002\000\040\002\uff80" +
    "\007\uff80\014\uff80\015\uff80\016\uff80\017\uff80\021\uff80\025" +
    "\uff80\026\uff80\027\uff80\033\uff80\063\uff80\072\uff80\073\uff80" +
    "\101\uff80\001\002\000\004\072\201\001\002\000\004\064" +
    "\202\001\002\000\040\002\uff81\007\uff81\014\uff81\015\uff81" +
    "\016\uff81\017\uff81\021\uff81\025\uff81\026\uff81\027\uff81\033" +
    "\uff81\063\uff81\072\uff81\073\uff81\101\uff81\001\002\000\014" +
    "\010\205\011\204\063\053\072\050\073\101\001\002\000" +
    "\040\002\uffc0\007\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\021\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0\063\uffc0\072" +
    "\uffc0\073\uffc0\101\uffc0\001\002\000\040\002\uffc1\007\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\033\uffc1\063\uffc1\072\uffc1\073\uffc1\101\uffc1" +
    "\001\002\000\044\002\uffc2\007\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2" +
    "\063\uffc2\066\104\070\103\072\uffc2\073\uffc2\101\uffc2\001" +
    "\002\000\040\002\uff75\007\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\021\uff75\025\uff75\026\uff75\027\uff75\033\uff75\063" +
    "\uff75\072\uff75\073\uff75\101\uff75\001\002\000\010\022\212" +
    "\023\213\024\211\001\002\000\004\064\216\001\002\000" +
    "\004\064\215\001\002\000\004\064\214\001\002\000\040" +
    "\002\uff77\007\uff77\014\uff77\015\uff77\016\uff77\017\uff77\021" +
    "\uff77\025\uff77\026\uff77\027\uff77\033\uff77\063\uff77\072\uff77" +
    "\073\uff77\101\uff77\001\002\000\040\002\uff78\007\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\021\uff78\025\uff78\026\uff78" +
    "\027\uff78\033\uff78\063\uff78\072\uff78\073\uff78\101\uff78\001" +
    "\002\000\040\002\uff76\007\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\021\uff76\025\uff76\026\uff76\027\uff76\033\uff76\063" +
    "\uff76\072\uff76\073\uff76\101\uff76\001\002\000\004\002\uffd5" +
    "\001\002\000\040\002\uff7a\007\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\021\uff7a\025\uff7a\026\uff7a\027\uff7a\033\uff7a" +
    "\063\uff7a\072\uff7a\073\uff7a\101\uff7a\001\002\000\040\002" +
    "\uff7b\007\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\033\uff7b\063\uff7b\072\uff7b\073" +
    "\uff7b\101\uff7b\001\002\000\004\073\223\001\002\000\004" +
    "\064\uff90\001\002\000\004\064\225\001\002\000\004\006" +
    "\226\001\002\000\034\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\230\001\002" +
    "\000\040\002\uffa4\007\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\021\uffa4\025\uffa4\026\uffa4\027\uffa4\033\uffa4\063\uffa4" +
    "\072\uffa4\073\uffa4\101\uffa4\001\002\000\014\007\300\045" +
    "\304\065\301\073\303\106\305\001\002\000\006\005\265" +
    "\007\264\001\002\000\004\006\261\001\002\000\006\005" +
    "\236\007\235\001\002\000\006\005\243\007\242\001\002" +
    "\000\004\006\237\001\002\000\034\014\052\015\024\016" +
    "\060\017\041\021\034\025\040\026\055\027\025\033\051" +
    "\063\053\072\050\073\037\101\047\001\002\000\004\007" +
    "\241\001\002\000\004\002\uffd6\001\002\000\004\005\254" +
    "\001\002\000\036\006\245\014\052\015\024\016\060\017" +
    "\041\021\034\025\040\026\055\027\025\033\051\063\053" +
    "\072\050\073\037\101\047\001\002\000\004\007\253\001" +
    "\002\000\036\007\247\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\006\002\uffcc\007\251" +
    "\001\002\000\006\002\ufffe\007\250\001\002\000\004\002" +
    "\uffd0\001\002\000\006\002\ufffd\007\252\001\002\000\004" +
    "\002\uffcf\001\002\000\004\002\uffcb\001\002\000\004\006" +
    "\255\001\002\000\036\007\257\014\052\015\024\016\060" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\037\101\047\001\002\000\004\007\260" +
    "\001\002\000\004\002\uffd3\001\002\000\004\002\uffd2\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\263\001\002\000\004" +
    "\002\uffd8\001\002\000\004\005\275\001\002\000\036\006" +
    "\267\014\052\015\024\016\060\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\037\101" +
    "\047\001\002\000\004\007\274\001\002\000\036\007\271" +
    "\014\052\015\024\016\060\017\041\021\034\025\040\026" +
    "\055\027\025\033\051\063\053\072\050\073\037\101\047" +
    "\001\002\000\006\002\uffce\007\273\001\002\000\006\002" +
    "\001\007\272\001\002\000\004\002\uffd1\001\002\000\004" +
    "\002\uffda\001\002\000\004\002\uffcd\001\002\000\004\006" +
    "\276\001\002\000\004\007\277\001\002\000\004\002\uffd4" +
    "\001\002\000\004\005\346\001\002\000\010\012\344\013" +
    "\345\073\343\001\002\000\004\007\336\001\002\000\012" +
    "\045\304\065\301\073\312\106\305\001\002\000\004\072" +
    "\310\001\002\000\006\010\307\011\306\001\002\000\010" +
    "\005\uffc4\007\uffc4\073\uffc4\001\002\000\010\005\uffc5\007" +
    "\uffc5\073\uffc5\001\002\000\010\005\uffc3\007\uffc3\073\uffc3" +
    "\001\002\000\004\007\331\001\002\000\012\045\304\065" +
    "\301\073\314\106\305\001\002\000\004\007\324\001\002" +
    "\000\012\045\304\065\301\073\316\106\305\001\002\000" +
    "\004\007\317\001\002\000\010\045\304\065\301\106\305" +
    "\001\002\000\004\005\320\001\002\000\004\006\321\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\323\001\002\000\004" +
    "\002\uffdb\001\002\000\004\005\325\001\002\000\004\006" +
    "\326\001\002\000\034\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\330\001\002" +
    "\000\004\002\uffdc\001\002\000\004\005\332\001\002\000" +
    "\004\006\333\001\002\000\034\014\052\015\024\016\060" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\037\101\047\001\002\000\004\007\335" +
    "\001\002\000\004\002\uffdd\001\002\000\004\005\337\001" +
    "\002\000\004\006\340\001\002\000\034\014\052\015\024" +
    "\016\060\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\037\101\047\001\002\000\004" +
    "\007\342\001\002\000\004\002\uffde\001\002\000\010\005" +
    "\uffbd\007\uffbd\073\uffbd\001\002\000\010\005\uffbf\007\uffbf" +
    "\073\uffbf\001\002\000\010\005\uffbe\007\uffbe\073\uffbe\001" +
    "\002\000\004\006\347\001\002\000\034\014\052\015\024" +
    "\016\060\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\037\101\047\001\002\000\004" +
    "\007\351\001\002\000\004\002\uffd9\001\002\000\006\005" +
    "\uffca\007\uffca\001\002\000\004\006\354\001\002\000\034" +
    "\014\052\015\024\016\060\017\041\021\034\025\040\026" +
    "\055\027\025\033\051\063\053\072\050\073\037\101\047" +
    "\001\002\000\004\007\356\001\002\000\004\002\uffd7\001" +
    "\002\000\006\006\370\073\367\001\002\000\004\073\316" +
    "\001\002\000\004\007\362\001\002\000\004\005\363\001" +
    "\002\000\004\006\364\001\002\000\034\014\052\015\024" +
    "\016\060\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\037\101\047\001\002\000\004" +
    "\007\366\001\002\000\004\002\uffe8\001\002\000\006\006" +
    "\u0100\073\377\001\002\000\004\073\316\001\002\000\004" +
    "\007\372\001\002\000\004\005\373\001\002\000\004\006" +
    "\374\001\002\000\034\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\376\001\002" +
    "\000\004\002\uffe7\001\002\000\006\006\u0108\073\u0107\001" +
    "\002\000\004\073\316\001\002\000\004\007\u0102\001\002" +
    "\000\004\005\u0103\001\002\000\004\006\u0104\001\002\000" +
    "\034\014\052\015\024\016\060\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\037\101" +
    "\047\001\002\000\004\007\u0106\001\002\000\004\002\uffe6" +
    "\001\002\000\006\006\u0110\073\u010f\001\002\000\004\073" +
    "\316\001\002\000\004\007\u010a\001\002\000\004\005\u010b" +
    "\001\002\000\004\006\u010c\001\002\000\034\014\052\015" +
    "\024\016\060\017\041\021\034\025\040\026\055\027\025" +
    "\033\051\063\053\072\050\073\037\101\047\001\002\000" +
    "\004\007\u010e\001\002\000\004\002\uffe5\001\002\000\006" +
    "\006\u0118\073\u0117\001\002\000\004\073\316\001\002\000" +
    "\004\007\u0112\001\002\000\004\005\u0113\001\002\000\004" +
    "\006\u0114\001\002\000\034\014\052\015\024\016\060\017" +
    "\041\021\034\025\040\026\055\027\025\033\051\063\053" +
    "\072\050\073\037\101\047\001\002\000\004\007\u0116\001" +
    "\002\000\004\002\uffe4\001\002\000\006\006\u0120\073\u011f" +
    "\001\002\000\004\073\316\001\002\000\004\007\u011a\001" +
    "\002\000\004\005\u011b\001\002\000\004\006\u011c\001\002" +
    "\000\034\014\052\015\024\016\060\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\037" +
    "\101\047\001\002\000\004\007\u011e\001\002\000\004\002" +
    "\uffe3\001\002\000\006\006\u0128\073\u0127\001\002\000\004" +
    "\073\316\001\002\000\004\007\u0122\001\002\000\004\005" +
    "\u0123\001\002\000\004\006\u0124\001\002\000\034\014\052" +
    "\015\024\016\060\017\041\021\034\025\040\026\055\027" +
    "\025\033\051\063\053\072\050\073\037\101\047\001\002" +
    "\000\004\007\u0126\001\002\000\004\002\uffe2\001\002\000" +
    "\006\006\u0130\073\u012f\001\002\000\004\073\316\001\002" +
    "\000\004\007\u012a\001\002\000\004\005\u012b\001\002\000" +
    "\004\006\u012c\001\002\000\034\014\052\015\024\016\060" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\037\101\047\001\002\000\004\007\u012e" +
    "\001\002\000\004\002\uffe1\001\002\000\004\006\u0137\001" +
    "\002\000\004\073\316\001\002\000\004\007\u0132\001\002" +
    "\000\004\005\u0133\001\002\000\004\006\u0134\001\002\000" +
    "\034\014\052\015\024\016\060\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\037\101" +
    "\047\001\002\000\004\007\u0136\001\002\000\004\002\uffe0" +
    "\001\002\000\004\073\316\001\002\000\004\007\u0139\001" +
    "\002\000\004\005\u013a\001\002\000\004\006\u013b\001\002" +
    "\000\034\014\052\015\024\016\060\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\037" +
    "\101\047\001\002\000\004\007\u013d\001\002\000\004\002" +
    "\uffdf\001\002\000\004\006\u013f\001\002\000\004\007\u0140" +
    "\001\002\000\004\005\u0141\001\002\000\004\006\u0142\001" +
    "\002\000\004\007\u0143\001\002\000\004\002\uffff\001\002" +
    "\000\010\004\u0155\006\u0156\073\u0154\001\002\000\004\073" +
    "\316\001\002\000\004\006\u0147\001\002\000\004\073\316" +
    "\001\002\000\004\007\u0149\001\002\000\004\005\u014a\001" +
    "\002\000\004\006\u014b\001\002\000\034\014\052\015\024" +
    "\016\060\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\037\101\047\001\002\000\004" +
    "\007\u014d\001\002\000\004\002\ufff2\001\002\000\004\007" +
    "\u014f\001\002\000\004\005\u0150\001\002\000\004\006\u0151" +
    "\001\002\000\034\014\052\015\024\016\060\017\041\021" +
    "\034\025\040\026\055\027\025\033\051\063\053\072\050" +
    "\073\037\101\047\001\002\000\004\007\u0153\001\002\000" +
    "\004\002\ufffc\001\002\000\010\004\u0165\006\u0166\073\u0164" +
    "\001\002\000\004\006\u015d\001\002\000\004\073\316\001" +
    "\002\000\004\007\u0158\001\002\000\004\005\u0159\001\002" +
    "\000\004\006\u015a\001\002\000\034\014\052\015\024\016" +
    "\060\017\041\021\034\025\040\026\055\027\025\033\051" +
    "\063\053\072\050\073\037\101\047\001\002\000\004\007" +
    "\u015c\001\002\000\004\002\ufffb\001\002\000\004\073\316" +
    "\001\002\000\004\007\u015f\001\002\000\004\005\u0160\001" +
    "\002\000\004\006\u0161\001\002\000\034\014\052\015\024" +
    "\016\060\017\041\021\034\025\040\026\055\027\025\033" +
    "\051\063\053\072\050\073\037\101\047\001\002\000\004" +
    "\007\u0163\001\002\000\004\002\ufff1\001\002\000\010\004" +
    "\u0175\006\u0176\073\u0174\001\002\000\004\006\u016d\001\002" +
    "\000\004\073\316\001\002\000\004\007\u0168\001\002\000" +
    "\004\005\u0169\001\002\000\004\006\u016a\001\002\000\034" +
    "\014\052\015\024\016\060\017\041\021\034\025\040\026" +
    "\055\027\025\033\051\063\053\072\050\073\037\101\047" +
    "\001\002\000\004\007\u016c\001\002\000\004\002\ufffa\001" +
    "\002\000\004\073\316\001\002\000\004\007\u016f\001\002" +
    "\000\004\005\u0170\001\002\000\004\006\u0171\001\002\000" +
    "\034\014\052\015\024\016\060\017\041\021\034\025\040" +
    "\026\055\027\025\033\051\063\053\072\050\073\037\101" +
    "\047\001\002\000\004\007\u0173\001\002\000\004\002\ufff0" +
    "\001\002\000\010\004\u0186\006\u0185\073\u0184\001\002\000" +
    "\004\006\u017d\001\002\000\004\073\316\001\002\000\004" +
    "\007\u0178\001\002\000\004\005\u0179\001\002\000\004\006" +
    "\u017a\001\002\000\034\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\u017c\001\002" +
    "\000\004\002\ufff9\001\002\000\004\073\316\001\002\000" +
    "\004\007\u017f\001\002\000\004\005\u0180\001\002\000\004" +
    "\006\u0181\001\002\000\034\014\052\015\024\016\060\017" +
    "\041\021\034\025\040\026\055\027\025\033\051\063\053" +
    "\072\050\073\037\101\047\001\002\000\004\007\u0183\001" +
    "\002\000\004\002\uffef\001\002\000\010\004\u0195\006\u0196" +
    "\073\u0194\001\002\000\004\073\316\001\002\000\004\006" +
    "\u0187\001\002\000\004\073\316\001\002\000\004\007\u0189" +
    "\001\002\000\004\005\u018a\001\002\000\004\006\u018b\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\u018d\001\002\000\004" +
    "\002\uffee\001\002\000\004\007\u018f\001\002\000\004\005" +
    "\u0190\001\002\000\004\006\u0191\001\002\000\034\014\052" +
    "\015\024\016\060\017\041\021\034\025\040\026\055\027" +
    "\025\033\051\063\053\072\050\073\037\101\047\001\002" +
    "\000\004\007\u0193\001\002\000\004\002\ufff8\001\002\000" +
    "\010\004\u01a5\006\u01a6\073\u01a4\001\002\000\004\006\u019d" +
    "\001\002\000\004\073\316\001\002\000\004\007\u0198\001" +
    "\002\000\004\005\u0199\001\002\000\004\006\u019a\001\002" +
    "\000\034\014\052\015\024\016\060\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\037" +
    "\101\047\001\002\000\004\007\u019c\001\002\000\004\002" +
    "\ufff7\001\002\000\004\073\316\001\002\000\004\007\u019f" +
    "\001\002\000\004\005\u01a0\001\002\000\004\006\u01a1\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\u01a3\001\002\000\004" +
    "\002\uffed\001\002\000\010\004\u01b6\006\u01b5\073\u01b4\001" +
    "\002\000\004\006\u01ad\001\002\000\004\073\316\001\002" +
    "\000\004\007\u01a8\001\002\000\004\005\u01a9\001\002\000" +
    "\004\006\u01aa\001\002\000\034\014\052\015\024\016\060" +
    "\017\041\021\034\025\040\026\055\027\025\033\051\063" +
    "\053\072\050\073\037\101\047\001\002\000\004\007\u01ac" +
    "\001\002\000\004\002\ufff6\001\002\000\004\073\316\001" +
    "\002\000\004\007\u01af\001\002\000\004\005\u01b0\001\002" +
    "\000\004\006\u01b1\001\002\000\034\014\052\015\024\016" +
    "\060\017\041\021\034\025\040\026\055\027\025\033\051" +
    "\063\053\072\050\073\037\101\047\001\002\000\004\007" +
    "\u01b3\001\002\000\004\002\uffec\001\002\000\010\004\u01c5" +
    "\006\u01c6\073\u01c4\001\002\000\004\073\316\001\002\000" +
    "\004\006\u01b7\001\002\000\004\073\316\001\002\000\004" +
    "\007\u01b9\001\002\000\004\005\u01ba\001\002\000\004\006" +
    "\u01bb\001\002\000\034\014\052\015\024\016\060\017\041" +
    "\021\034\025\040\026\055\027\025\033\051\063\053\072" +
    "\050\073\037\101\047\001\002\000\004\007\u01bd\001\002" +
    "\000\004\002\uffeb\001\002\000\004\007\u01bf\001\002\000" +
    "\004\005\u01c0\001\002\000\004\006\u01c1\001\002\000\034" +
    "\014\052\015\024\016\060\017\041\021\034\025\040\026" +
    "\055\027\025\033\051\063\053\072\050\073\037\101\047" +
    "\001\002\000\004\007\u01c3\001\002\000\004\002\ufff5\001" +
    "\002\000\006\004\u01d5\006\u01d4\001\002\000\004\006\u01cd" +
    "\001\002\000\004\073\316\001\002\000\004\007\u01c8\001" +
    "\002\000\004\005\u01c9\001\002\000\004\006\u01ca\001\002" +
    "\000\034\014\052\015\024\016\060\017\041\021\034\025" +
    "\040\026\055\027\025\033\051\063\053\072\050\073\037" +
    "\101\047\001\002\000\004\007\u01cc\001\002\000\004\002" +
    "\ufff4\001\002\000\004\073\316\001\002\000\004\007\u01cf" +
    "\001\002\000\004\005\u01d0\001\002\000\004\006\u01d1\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\u01d3\001\002\000\004" +
    "\002\uffea\001\002\000\004\073\316\001\002\000\004\006" +
    "\u01d6\001\002\000\004\073\316\001\002\000\004\007\u01d8" +
    "\001\002\000\004\005\u01d9\001\002\000\004\006\u01da\001" +
    "\002\000\034\014\052\015\024\016\060\017\041\021\034" +
    "\025\040\026\055\027\025\033\051\063\053\072\050\073" +
    "\037\101\047\001\002\000\004\007\u01dc\001\002\000\004" +
    "\002\uffe9\001\002\000\004\007\u01de\001\002\000\004\005" +
    "\u01df\001\002\000\004\006\u01e0\001\002\000\034\014\052" +
    "\015\024\016\060\017\041\021\034\025\040\026\055\027" +
    "\025\033\051\063\053\072\050\073\037\101\047\001\002" +
    "\000\004\007\u01e2\001\002\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e0\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\351\004\013\005\016\006\015\007\011\001\001\000" +
    "\014\003\233\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\027\012\034" +
    "\013\045\016\042\017\056\020\055\025\043\026\032\027" +
    "\041\030\053\032\035\034\060\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\132\012\034\013\045\016\042\017\056" +
    "\020\055\025\043\026\032\027\041\030\053\032\035\034" +
    "\060\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\101\027\041\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\066\012\034\013\045\016\042\017" +
    "\056\020\055\025\043\026\032\027\041\030\053\032\035" +
    "\034\060\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\110\030\053\001\001\000\006\027\105\030\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\144\026\137\027\041\030\053\031\135\001\001\000" +
    "\010\026\171\027\041\030\053\001\001\000\002\001\001" +
    "\000\012\026\161\027\041\030\053\031\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\146\012\034\013" +
    "\045\016\042\017\056\020\055\025\043\026\032\027\041" +
    "\030\053\032\035\034\060\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\153\001" +
    "\001\000\044\011\155\012\034\013\045\016\042\017\056" +
    "\020\055\025\043\026\032\027\041\030\053\032\035\034" +
    "\060\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\004\046\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\164\027\041\030\053" +
    "\001\001\000\002\001\001\000\010\026\163\027\041\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\166\012\034\013\045\016\042\017\056\020\055\025" +
    "\043\026\032\027\041\030\053\032\035\034\060\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\173\012\034\013\045\016\042\017\056\020" +
    "\055\025\043\026\032\027\041\030\053\032\035\034\060" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\205\027\041\030\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\226\012\034" +
    "\013\045\016\042\017\056\020\055\025\043\026\032\027" +
    "\041\030\053\032\035\034\060\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\301\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\237" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\243\012\034" +
    "\013\045\016\042\017\056\020\055\025\043\026\032\027" +
    "\041\030\053\032\035\034\060\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\044\011" +
    "\245\012\034\013\045\016\042\017\056\020\055\025\043" +
    "\026\032\027\041\030\053\032\035\034\060\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\255\012\034\013\045\016\042\017\056\020\055\025" +
    "\043\026\032\027\041\030\053\032\035\034\060\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\261" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\265\012\034" +
    "\013\045\016\042\017\056\020\055\025\043\026\032\027" +
    "\041\030\053\032\035\034\060\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\044\011" +
    "\267\012\034\013\045\016\042\017\056\020\055\025\043" +
    "\026\032\027\041\030\053\032\035\034\060\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\310\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\312\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\014\003\314\004\013\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\321" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\326\012\034\013\045\016\042\017\056\020\055\025" +
    "\043\026\032\027\041\030\053\032\035\034\060\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\333\012\034\013\045\016\042\017\056\020" +
    "\055\025\043\026\032\027\041\030\053\032\035\034\060" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\340\012\034\013\045\016\042\017" +
    "\056\020\055\025\043\026\032\027\041\030\053\032\035" +
    "\034\060\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\347\012\034\013\045\016\042\017\056\020\055" +
    "\025\043\026\032\027\041\030\053\032\035\034\060\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\354\012\034\013\045\016\042\017\056" +
    "\020\055\025\043\026\032\027\041\030\053\032\035\034" +
    "\060\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\360\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\364\012\034\013\045\016\042\017\056\020\055" +
    "\025\043\026\032\027\041\030\053\032\035\034\060\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\370\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\374\012\034\013\045\016\042\017\056\020\055\025\043" +
    "\026\032\027\041\030\053\032\035\034\060\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0100\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u0104\012" +
    "\034\013\045\016\042\017\056\020\055\025\043\026\032" +
    "\027\041\030\053\032\035\034\060\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0108\004\013\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u010c\012\034\013" +
    "\045\016\042\017\056\020\055\025\043\026\032\027\041" +
    "\030\053\032\035\034\060\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0110\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u0114\012\034\013\045\016" +
    "\042\017\056\020\055\025\043\026\032\027\041\030\053" +
    "\032\035\034\060\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0118\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u011c\012\034\013\045\016\042\017" +
    "\056\020\055\025\043\026\032\027\041\030\053\032\035" +
    "\034\060\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u0120\004\013\005\016\006\015\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\u0124\012\034\013\045\016\042\017\056\020" +
    "\055\025\043\026\032\027\041\030\053\032\035\034\060" +
    "\035\044\036\026\037\025\040\031\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0128\004\013\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u012c\012\034\013\045\016\042\017\056\020\055\025" +
    "\043\026\032\027\041\030\053\032\035\034\060\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0130" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u0134" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u0137\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u013b\012\034\013\045\016\042" +
    "\017\056\020\055\025\043\026\032\027\041\030\053\032" +
    "\035\034\060\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u014d\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\014\003\u0147\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u014b\012\034\013\045\016" +
    "\042\017\056\020\055\025\043\026\032\027\041\030\053" +
    "\032\035\034\060\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u0151\012\034\013\045\016\042\017\056\020\055\025\043" +
    "\026\032\027\041\030\053\032\035\034\060\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u0156\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u015a\012\034\013\045\016\042\017\056\020\055" +
    "\025\043\026\032\027\041\030\053\032\035\034\060\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u015d\004\013\005" +
    "\016\006\015\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\u0161\012\034\013" +
    "\045\016\042\017\056\020\055\025\043\026\032\027\041" +
    "\030\053\032\035\034\060\035\044\036\026\037\025\040" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0166\004" +
    "\013\005\016\006\015\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u016a\012" +
    "\034\013\045\016\042\017\056\020\055\025\043\026\032" +
    "\027\041\030\053\032\035\034\060\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u016d\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u0171\012\034\013\045\016\042\017" +
    "\056\020\055\025\043\026\032\027\041\030\053\032\035" +
    "\034\060\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0176\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u017a\012\034\013\045\016" +
    "\042\017\056\020\055\025\043\026\032\027\041\030\053" +
    "\032\035\034\060\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u017d\004\013\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\u0181\012\034\013\045\016\042\017\056\020\055\025" +
    "\043\026\032\027\041\030\053\032\035\034\060\035\044" +
    "\036\026\037\025\040\031\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u018d" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\014\003\u0187\004\013\005\016\006\015\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\u018b\012\034\013\045\016\042\017\056" +
    "\020\055\025\043\026\032\027\041\030\053\032\035\034" +
    "\060\035\044\036\026\037\025\040\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\u0191\012\034" +
    "\013\045\016\042\017\056\020\055\025\043\026\032\027" +
    "\041\030\053\032\035\034\060\035\044\036\026\037\025" +
    "\040\031\043\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0196" +
    "\004\013\005\016\006\015\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u019a" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\u019d\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u01a1\012\034\013\045\016\042" +
    "\017\056\020\055\025\043\026\032\027\041\030\053\032" +
    "\035\034\060\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u01a6\004\013\005\016" +
    "\006\015\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\u01aa\012\034\013\045" +
    "\016\042\017\056\020\055\025\043\026\032\027\041\030" +
    "\053\032\035\034\060\035\044\036\026\037\025\040\031" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u01ad\004\013\005\016\006\015\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\u01b1\012\034\013\045\016\042\017\056\020\055" +
    "\025\043\026\032\027\041\030\053\032\035\034\060\035" +
    "\044\036\026\037\025\040\031\043\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01bd\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\014\003\u01b7\004\013\005\016\006\015\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\011\u01bb\012\034\013\045\016\042\017" +
    "\056\020\055\025\043\026\032\027\041\030\053\032\035" +
    "\034\060\035\044\036\026\037\025\040\031\043\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\u01c1\012" +
    "\034\013\045\016\042\017\056\020\055\025\043\026\032" +
    "\027\041\030\053\032\035\034\060\035\044\036\026\037" +
    "\025\040\031\043\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u01c6\004\013\005\016\006\015\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\u01ca\012\034\013\045\016\042\017\056\020\055\025\043" +
    "\026\032\027\041\030\053\032\035\034\060\035\044\036" +
    "\026\037\025\040\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u01cd\004\013\005\016\006" +
    "\015\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\u01d1\012\034\013\045\016" +
    "\042\017\056\020\055\025\043\026\032\027\041\030\053" +
    "\032\035\034\060\035\044\036\026\037\025\040\031\043" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u01dc\004\013\005\016\006\015\007\011\001\001\000" +
    "\002\001\001\000\014\003\u01d6\004\013\005\016\006\015" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\u01da\012\034\013\045\016\042" +
    "\017\056\020\055\025\043\026\032\027\041\030\053\032" +
    "\035\034\060\035\044\036\026\037\025\040\031\043\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\u01e0" +
    "\012\034\013\045\016\042\017\056\020\055\025\043\026" +
    "\032\027\041\030\053\032\035\034\060\035\044\036\026" +
    "\037\025\040\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0;
    int direccionDeMemoria = 20; 
    int ifs = 0;
    int elses=0;
    int whiles = 0;
    int repeats = 0;
    int a=0,n=0;
    String id_sal="",id_ent="";
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
    message="Error de Sintaxis";
        compilador.setError("Se esperaba "+message+" Linea "+(left)+" Columna: "+(right));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");       
        message="Error de Sintaxis";
        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");
        message="Error de Sintaxis";
        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public String newTemporal2(Lexema a, Lexema b){
             String resultado;
           compilador.tres(a.lexema + " = " + b.tres);
             resultado = "t" + contadorTemporales;
           
           return resultado;
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " =  "+op.lexema+" "+a.tres+","+b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

     public String newTemporal1(Object a, Object op, Object b){
        String resultado;

            System.out.println(a);
            System.out.println(op);
            System.out.println(b);
            contadorTemporales++;
            compilador.tres("t" + contadorTemporales +" = "+a+" "+op+" "+b);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public String agregarVariableObj(Lexema a, Lexema b,Lexema c){
                String resultado="";
           //compilador.addCodigoObjeto(a.lexema + " = " + b.tres);
           //  resultado = "t" + contadorTemporales;
           //System.err.println("A:"+a.lexema+"|B:"+b.lexema+"|C:"+c.lexema+"|");  
           if(c.lexema.equals("#")){
               if(b.lexema.equals("verdadero")){
                   resultado="\n    " +a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    " +"MOVLW D'1' "+"\n    " +"MOVWF "+a.lexema+"\n    "+"CLRW";
               }else{
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'0' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }  
           }
           else{
               if(c.lexema.equals("=")){
                   resultado="\n    "+a.lexema+" EQU "+direccionDeMemoria+"H"+"\n    "+"MOVLW D'"+b.lexema+"' "+"\n    "+"MOVWF "+a.lexema+"\n    "+"CLRW";
               }
               else{
                   if(c.lexema.equals(":")){
                        //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+" Corta:"+b.lexema.substring(2, 3));  
                        if (b.lexema.substring(2, 3).equals("a")) {
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTB"+","+b.lexema.substring(3, 4);
                        }
                        else{
                            resultado="\n    "+"#DEFINE "+a.lexema+" PORTA"+","+b.lexema.substring(3, 4);
                        }
                   }
                   
               }               
           }
           //System.err.println("A: "+a.lexema+" B: "+b.lexema+" C: "+c.lexema+"|");  
           compilador.addCodigoObjeto(resultado);
           
           return resultado;

    }


    public String agregarCodigoObjeto(String EstCodigo){
            compilador.addCodigoObjeto(EstCodigo);     
            return EstCodigo;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // motorelec ::= MOTORELECT error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <MOTORELECT> , se esperaba una estructura MOTORELECT ( SAR | CAR | DETENER) renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // motorelec ::= MOTORELECT PAREIZQ DETENER PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // motorelec ::= MOTORELECT PAREIZQ CAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // motorelec ::= MOTORELECT PAREIZQ SAR PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("motorelec",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cont ::= CONTADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia <contador> , se esperaba final o inicio'(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cont ::= CONTADOR FINAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cont ::= CONTADOR INICIO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cont",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // retart ::= RETARDO INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre '(' renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // retart ::= RETARDO PAREIZQ PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta el valor de el retardo  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // retart ::= RETARDO PAREIZQ INTEGERNUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error en sentencia retardo falta un parentesis de cierre ')'  renglon "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // retart ::= RETARDO PAREIZQ INTEGERNUM COMA TIEMPO PAREDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("  CALL Retardo_"+n.lexema+t.lexema);
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("retart",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // srvo ::= SERVO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error en sentencia servo  "+(eleft+1)+" columna: "+(eright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // srvo ::= SERVO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("srvo",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // f ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo entero");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe y/o no esta declarada");
    }

    n.tres=n.lexema;
    RESULT=n.lexema;                                


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // f ::= PAREIZQ exp PAREDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

RESULT = e;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // f ::= INTEGERNUM 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema x = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
x.tres=x.lexema;
RESULT = x.lexema;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // t ::= f 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT = s;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // t ::= t MULTIPLICACION f 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema l = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    q = parser.newTemporal1 (q,l.lexema,h);
RESULT = q;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp ::= t 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
RESULT = w;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp ::= exp RESTA t 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//r.tres=r.lexema;
    r = parser.newTemporal1 (r,g.lexema,v);
RESULT = r;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp ::= exp SUMA t 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema op = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
//a.tres=a.lexema;
    a = parser.newTemporal1 (a,op.lexema,b);
RESULT = a;
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // oprel ::= COMPARA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema co = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    co.tres=co.lexema;
        RESULT = co.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // oprel ::= MAYORQUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema ma = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    ma.tres=ma.lexema;
        RESULT = ma.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // oprel ::= MENORQUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema me = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    me.tres=me.lexema;
        RESULT = me.lexema;

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // oplog ::= NOT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // oplog ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // oplog ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cond_s ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
parser.agregarCodigoObjeto("\n   BTFSS "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT = ""+id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_s",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cond_f ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
 parser.agregarCodigoObjeto("\n   BTFSC "+id.lexema+",0\n" +"   GOTO SALIDA"+parser.ifs+"\n");
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond_f",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cond ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.agregarCodigoObjeto("    C"+parser.whiles+"\n    BTFSS "+id.lexema+",0"+"\n     GOTO FUERA"+parser.whiles+"\n");
 
if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es tipo boleano o le falta una comparacion valida");

                }
    }        
    else{
        compilador.setError("Error Sintactico: La Variable <"+id.lexema+"> Que se encuentra en la condicion en renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe");
    }
//compilador.Mostrar(id.lexema);
RESULT =id.lexema;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cond ::= oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le faltan componentes en Renglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cond ::= exp oprel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operando o expresion en Reglon:  "+(idleft+1)+" columna: "+(idright+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cond ::= exp exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico: La condicion le falta el operador  en Reglon:  "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cond ::= oprel exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico: La condicion le falta un operando o expresion en Reglon:  "+(idleft+1)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cond ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError ("Error Sintactico: El operador IGUAL '=' no es un operador de comparacion pruebe con: '=='en Reglon:  "+(igleft+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= exp oprel exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          

        Object b;
        b= parser.newTemporal1(a,op,y);
        RESULT=b;



    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // s_ciclo ::= CICLO PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // s_ciclo ::= CICLO PAREIZQ LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // s_ciclo ::= CICLO PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no esta completa se esperaba Ciclo (condicion){codigo} en Renglon"+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // s_ciclo ::= CICLO PAREIZQ PAREDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 compilador.setError("Error Sintactico: La sentencia ciclo no tiene condicion ni sentencias dentro de el  renglon: "+(idleft+1)+" columna: "+(idright)); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // s_ciclo ::= CICLO PAREIZQ cond PAREDER LLAVEIZQ NT$0 cuerpo NT$1 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.agregarCodigoObjeto("    GOTO C"+parser.whiles+"\n   FUERA"+parser.whiles+"\n"); parser.whiles++;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ciclo",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

    
    compilador.tres("GO TO ciclo"+parser.whiles);
    compilador.tres("salida:");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$0 ::= 
            {
              Object RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema ci = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

        
        ci.tres="\nciclo"+parser.whiles+":";
        compilador.tres(ci.tres);
            compilador.tres("SI "+co+" = falso GO TO "+"salida");

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // s_ef ::= EF PAREIZQ cond_f PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);
parser.ifs++; parser.elses++; i.tres="EF"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ef",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // s_ed ::= ED PAREIZQ cond_s PAREDER LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		
parser.agregarCodigoObjeto("    SALIDA"+parser.ifs);

parser.ifs++; parser.elses++; i.tres="ED"+parser.ifs+":"; compilador.tres(i.tres+"\n"+a+" = "+"falso GOTO "+"EF"+parser.elses);
compilador.tres("EF"+parser.elses+":");

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("s_ed",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // p_salida ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_sal=n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("psalida")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo psalida");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);
RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // p_salida ::= PSALIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    parser.id_sal=r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_salida",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // puertosalida ::= SALIDA PAREIZQ ID COMA p_salida PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema k = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
    parser.agregarCodigoObjeto("   BTFSS "+k.lexema+",0\n" +
"   BCF "+parser.id_sal+"\n" +
"   BTFSC "+k.lexema+",0\n" +
"   BSF "+parser.id_sal+"\n");
    if(!parser.tabla.containsKey(k.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(k.lexema)){
                  
       String tmp = compilador.Buscar(k.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+k.lexema+"> en el renglon: "+(kleft+1)+" columna: "+(kright+1)+". No es de tipo Boleano");

                }
    }    
    
    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertosalida",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // p_entrada ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+n.lexema;
if(parser.tabla.containsKey(n.lexema)){
                  
       String tmp = compilador.Buscar(n.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("pentrada")){

                     compilador.setError("Error Semantico: La Variable <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+". No es tipo pentrada");

                }
    }        
    else{
        compilador.setError("Error Semantico: La Variable <"+n.lexema+"> Que se encuentra en renglon: "+(nleft+1)+" columna: "+(nright+1)+". No existe o es un tipo incorrecto");
    }

                                //compilador.Mostrar(id.lexema);

RESULT = n.lexema;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // p_entrada ::= PENTRADA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    parser.id_ent=""+r.lexema;
    RESULT = r.lexema;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p_entrada",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		  
    compilador.setError("Error Sintactico en la asginacion de puertos <"+n.lexema+"> en el renglon: "+(nleft+1)+" columna: "+(nright+1)+" falta un parentesis ')' ");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // puertoentrada ::= ENTRADA PAREIZQ ID COMA p_entrada PAREDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		  
        parser.agregarCodigoObjeto("    BCF "+ id.lexema+",0\n"+"  BTFSC "+parser.id_ent+"\n"+"   BSF "+id.lexema+",0\n");
    if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


    id.tres = id.lexema;
    parser.tabla.put(id.lexema,id);
    
    compilador.tres(id.lexema + " = " + p);

    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("puertoentrada",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alto ::= ALTO PAREIZQ INTEGERNUM PAREDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 parser.agregarCodigoObjeto("     MOVLW B'"+i.lexema+"'\n       MOVWF PORTB"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("alto",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= alto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= as_fvbol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= as_asig 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= cont 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= retart 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= srvo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= motorelec 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= exp 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= s_ciclo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= s_ef 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= s_ed 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= puertosalida 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= puertoentrada 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // as_puerto ::= ID DOSPUNTOS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error Semantico : el tipo <"+p.lexema+">. No existe  renglon: "+(pleft+1)+" columna: "+(pright+1)+"se espera un tipo puerto");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // as_puerto ::= ID DOSPUNTOS PSALIDA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor); 
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);
// generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);    

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "psalida";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico : El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // as_puerto ::= ID DOSPUNTOS PENTRADA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);            
        parser.tabla.put(id.lexema,id);    
    // generacion de codigo intermedio 
    id.tres = id.lexema;
    p.tres= p.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,p);

    parser.agregarVariableObj(id,p,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }
    if(!parser.tabla.containsKey(p.lexema)){
        id.valor = ""+p;            
        id.tipo = "pentrada";
        compilador.agregarid(id.lexema,id.tipo,id.valor);
        //System.out.println(id.tipo+" el puerto: "+id.valor);   
        parser.tabla.put(p.lexema,id);      
    }        
    else{
        compilador.setError("Error Semantico(Unidad); El puerto: <"+p.lexema+">. Que se encuentra renglon: "+(pleft+1)+" columna: "+(pright+1)+". Ya fue asignado anteriormente.");
    }

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_puerto",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // as_fvbol ::= ID IGUAL FALSO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema g = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		  parser.agregarCodigoObjeto("    BCF "+i.lexema+",0\n");
     if(!parser.tabla.containsKey(i.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(i.lexema)){
                  
       String tmp = compilador.Buscar(i.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+i.lexema+"> en el renglon: "+(ileft+1)+" columna: "+(iright+1)+". No es de tipo Boleano");

                }
    }        

    compilador.tres(i.lexema+" "+g.lexema+" "+f.lexema);
    


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // as_fvbol ::= ID IGUAL VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		          
        parser.agregarCodigoObjeto("    BSF "+id.lexema+",0\n");
         if(!parser.tabla.containsKey(id.lexema)){
                  
       

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("Boleano")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        

   compilador.tres(id.lexema+" "+ig.lexema+" "+v.lexema);


    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_fvbol",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // as_asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema ig = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

 if(!parser.tabla.containsKey(id.lexema)){
                  
                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No existe necesita ser declarada");

                }
    if(parser.tabla.containsKey(id.lexema)){
                  
       String tmp = compilador.Buscar(id.lexema);
                //JOptionPane.showMessageDialog(null,tmp);
                if (!tmp.equals("entero")){

                     compilador.setError("Error Semantico: La Variable <"+id.lexema+"> en el renglon: "+(idleft+1)+" columna: "+(idright+1)+". No es de tipo Boleano");

                }
    }        


        compilador.tres(id.lexema+" "+ig.lexema+" "+e);





    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_asig",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // as_dato ::= ID IGUAL INTEGERNUM 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema valor = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = ""+valor;            
    id.tipo = "entero";
    RESULT = valor;
    compilador.agregarid(id.lexema,id.tipo,id.valor);       
    parser.tabla.put(id.lexema,id);

    id.tres = id.lexema;
    valor.tres= valor.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,valor);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,valor,o);
    //codigo gen cod
  }
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_dato",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // as_bol ::= ID GATO FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "FALSO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);          
    parser.tabla.put(id.lexema,id);
    id.tres = id.lexema;
    f.tres= f.lexema;
    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,f);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,f,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // as_bol ::= ID GATO VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema o = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema v = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

  if(!parser.tabla.containsKey(id.lexema)){
    id.valor = "VERDADERO";            
    id.tipo = "Boleano";
    compilador.agregarid(id.lexema,id.tipo,id.valor);
 

    id.tres = id.lexema;
    v.tres= v.lexema;

    parser.tabla.put(id.lexema,id);
    parser.newTemporal2(id,v);

    parser.direccionDeMemoria++;
    parser.agregarVariableObj(id,v,o);
    }        
    else{
        compilador.setError("Error Semantico(Unidad); La variable: <"+id.lexema+">. Que se encuentra renglon: "+(idleft+1)+" columna: "+(idright+1)+". Ya fue declarada anteriormente.");
    }  

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("as_bol",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asig ::= as_puerto 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asig ::= as_dato 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asig ::= as_bol 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asig",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion ::= asig 
            {
              Object RESULT =null;
		 parser.agregarCodigoObjeto("\nBUCLE\n"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= asig asignacion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 compilador.setError("Error Sintactico : sentencia BUCLE hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia BUCLE tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inicio ::= DECLARA LLAVEIZQ LLAVEDER LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error Sintactico : sentencia DECLARA tiene llaves de mas "+"'}'"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicio ::= DECLARA asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inicio ::= DECLARA LLAVEIZQ asignacion BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inicio ::= DECLARA LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico : sentencia DECLARA  hace falta la llave de apertura ' { ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicio ::= DECLARA LLAVEIZQ BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 compilador.setError("Error Sintactico :, sentencia DECLARA hace falta la llave de cierre ' } ' "); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicio ::= DECLARA LLAVEIZQ ID LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		compilador.setError("Error sintactico: renglon: Estructura DECLARA vacia");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicio ::= DECLARA LLAVEIZQ ID ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inicio ::= DECLARA LLAVEIZQ ID ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicio ::= DECLARA LLAVEIZQ ID ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inicio ::= DECLARA LLAVEIZQ ID asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. No corresponde a la estructura DECLARA");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inicio ::= DECLARA ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicio ::= DECLARA ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicio ::= DECLARA ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicio ::= DECLARA ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicio ::= DECLARA ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicio ::= DECLARA ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicio ::= DECLARA ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicio ::= DECLARA ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicio ::= DECLARA ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio ::= ID ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-17)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicio ::= ID ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio ::= ID ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio ::= ID ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= ID ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= ID ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= ID ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= ID ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ID ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= ID DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. La estructura debe empezar con DECLARA.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= ID ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-16)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= ID ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= ID ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= ID ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= ID ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= ID ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= ID ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= ID ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= ID ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= ID LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		compilador.setError("Error sintactico <"+id.lexema+">: renglon: "+(idleft+1)+" columna: "+(idright+1)+"\n. Sentencia DECLARA esta incompleta.");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ cuerpo LLAVEDER 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= DECLARA LLAVEIZQ asignacion LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		compilador.setError("Error Sintactico: El documento esta vacio no hay nada para compilar");
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= DECLARA LLAVEIZQ LLAVEDER BUCLE LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;
		 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

