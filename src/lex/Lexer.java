/* The following code was generated by JFlex 1.6.1 */

package lex;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/sanchez/Documentos/LYAII/Compilador/picMotors/src/lex/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\3\1\5\1\6\1\5\1\5\22\0\1\3\2\0\1\24"+
    "\2\0\1\54\1\55\1\34\1\35\1\53\1\52\1\45\1\56\1\40"+
    "\1\4\1\27\1\27\1\27\1\27\1\27\1\27\1\27\1\27\2\2"+
    "\1\51\1\37\1\44\1\42\1\41\2\0\1\7\1\36\1\16\1\20"+
    "\1\22\1\25\1\47\1\46\1\31\2\1\1\10\1\15\1\17\1\12"+
    "\1\26\1\1\1\21\1\14\1\11\1\50\1\23\2\1\1\43\1\1"+
    "\4\0\1\1\1\0\1\7\1\36\1\16\1\20\1\22\1\25\1\47"+
    "\1\46\1\31\2\1\1\10\1\15\1\17\1\12\1\26\1\1\1\21"+
    "\1\14\1\11\1\50\1\23\2\1\1\43\1\1\1\33\1\0\1\32"+
    "\7\0\1\6\252\0\2\30\115\0\1\13\u1ea8\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\2\7\7\2\1\10\2\2\1\1\1\2\1\11\1\12"+
    "\1\13\1\14\1\2\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\2\1\24\1\25\1\26\1\27\2\1"+
    "\1\30\2\2\1\31\2\0\3\2\2\7\1\0\3\2"+
    "\1\0\1\2\1\32\3\2\1\33\1\34\3\2\1\0"+
    "\1\2\1\0\3\2\1\0\3\2\1\35\1\36\1\37"+
    "\1\40\1\2\1\0\1\41\1\2\1\42\1\0\1\43"+
    "\1\0\1\2\1\43\2\2\1\44\1\0\1\2\1\45"+
    "\1\2\1\0\11\2\1\0\1\2\1\0\3\2\1\0"+
    "\3\2\1\0\2\2\1\46\2\0\3\2\1\0\3\2"+
    "\1\0\6\2\1\0\2\2\1\0\1\2\1\0\1\2"+
    "\2\47\2\2\1\50\1\0\3\2\1\0\2\2\1\0"+
    "\1\51\1\2\1\51\1\2\1\0\3\2\2\52\5\2"+
    "\1\0\2\2\2\53\2\54\2\2\1\0\2\2\1\55"+
    "\2\56\1\57\2\60\1\2\1\0\6\2\1\0\2\2"+
    "\1\0\4\2\2\61\2\2\1\0\3\2\1\62\1\63"+
    "\1\64\2\65\1\66\1\0\2\2\1\0\2\2\1\67"+
    "\1\2\2\70\1\71\1\72\2\73\1\2\1\0\1\2"+
    "\1\74\1\2\1\75\1\0\1\2\1\76\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\57\0\u02f0\0\u031f\0\u034e\0\u037d\0\57\0\57"+
    "\0\57\0\57\0\u03ac\0\57\0\57\0\u03db\0\u040a\0\136"+
    "\0\u0439\0\57\0\u0468\0\57\0\57\0\57\0\57\0\u0497"+
    "\0\215\0\u04c6\0\u04f5\0\u0524\0\136\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\57\0\136\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\136\0\u0758\0\u0787\0\u07b6\0\136\0\136"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\57\0\57\0\57"+
    "\0\57\0\u0a48\0\u0497\0\57\0\u0a77\0\136\0\u0aa6\0\57"+
    "\0\u0ad5\0\u0b04\0\136\0\u0b33\0\u0b62\0\136\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\136\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\57\0\136\0\u14bf\0\u14ee\0\136\0\u151d\0\u154c"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\57\0\u1695"+
    "\0\136\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\57\0\136"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\57\0\136\0\57\0\136\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\136\0\57\0\136\0\136\0\57\0\136\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\57"+
    "\0\136\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\136"+
    "\0\136\0\136\0\57\0\136\0\136\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\136\0\u1f36\0\57\0\136\0\136"+
    "\0\136\0\57\0\136\0\u1f65\0\u1f94\0\u1fc3\0\136\0\u1ff2"+
    "\0\136\0\u2021\0\u2050\0\136\0\u207f\0\u20ae\0\u20dd\0\u210c"+
    "\0\u213b\0\u216a\0\57\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\0\1\7"+
    "\2\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\4\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\3\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\60\0\2\3\4\0"+
    "\4\3\1\0\10\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\10\0\1\4\24\0"+
    "\1\4\33\0\1\52\53\0\2\3\4\0\1\3\1\53"+
    "\2\3\1\0\3\3\1\54\4\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\5\3\1\55\2\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\15\0\1\56\12\0\1\57\35\0\2\3\4\0"+
    "\1\60\3\3\1\0\6\3\1\61\1\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\3\3\1\62\1\63\1\64\7\3"+
    "\1\0\3\3\1\65\1\66\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\1\67\2\3\1\70"+
    "\1\0\10\3\1\0\3\3\1\71\1\72\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\3\3"+
    "\1\73\1\0\10\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\7\0\2\3\4\0"+
    "\4\3\1\0\6\3\1\74\1\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\6\3\1\75\1\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\3\3\1\76"+
    "\1\77\3\3\1\0\1\100\2\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\7\0\2\3\4\0"+
    "\1\101\3\3\1\0\6\3\1\102\1\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\1\103\3\3\1\0\10\3\1\0"+
    "\3\3\1\104\1\105\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\106\1\107\4\3"+
    "\1\110\1\111\1\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\25\0\1\112\40\0"+
    "\2\3\4\0\4\3\1\0\3\3\1\113\4\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\3\3\1\114\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\2\3\1\115\50\0\1\116\56\0\1\117\55\0"+
    "\1\120\1\121\15\0\2\3\4\0\1\122\3\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\6\0\55\123\1\124\1\123\5\52"+
    "\2\0\50\52\1\0\2\3\4\0\2\3\1\125\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\4\3"+
    "\1\0\4\3\1\126\3\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\16\0\1\127"+
    "\10\0\1\130\56\0\1\131\36\0\2\3\4\0\1\3"+
    "\1\132\2\3\1\0\5\3\1\133\2\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\5\3\1\134\2\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\2\3\1\135\1\3"+
    "\1\0\4\3\1\136\3\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\30\0\1\137"+
    "\35\0\2\3\4\0\4\3\1\0\6\3\1\140\1\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\5\3"+
    "\1\141\2\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\4\3"+
    "\1\0\3\3\1\142\4\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\24\0\1\143"+
    "\41\0\2\3\4\0\4\3\1\0\2\3\1\144\5\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\2\3\1\145\1\3"+
    "\1\0\2\3\1\146\5\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\2\3\1\147\1\3\1\0\10\3\1\0\1\3"+
    "\1\150\1\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\2\3\1\151\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\4\3"+
    "\1\0\5\3\1\152\2\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\4\3\1\0\5\3\1\153\2\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\1\3\1\154\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\25\0\1\155\40\0\2\3\4\0\4\3"+
    "\1\0\3\3\1\156\4\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\15\0\1\157"+
    "\50\0\2\3\4\0\1\160\3\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\3\3\1\161\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\3\3"+
    "\1\162\4\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\36\0\2\163\26\0\2\3"+
    "\4\0\4\3\1\0\10\3\1\0\3\3\1\163\1\164"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\1\3\1\165\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\2\3\1\166\5\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\167\1\170"+
    "\1\3\1\171\5\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\7\0\2\3\4\0"+
    "\3\3\1\172\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\36\0\2\173"+
    "\50\0\1\174\34\0\2\3\4\0\4\3\1\0\10\3"+
    "\1\0\3\3\1\173\1\175\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\7\3"+
    "\1\176\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\3\3\1\177"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\25\0\1\200\40\0\2\3"+
    "\4\0\4\3\1\0\3\3\1\201\4\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\1\202\3\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\2\3\1\203\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\16\0\1\204\47\0\2\3\4\0"+
    "\1\3\1\205\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\6\3\1\206\1\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\1\3\1\207\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\1\210\3\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\4\3"+
    "\1\0\6\3\1\211\1\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\4\3\1\0\5\3\1\212\2\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\10\3\1\0\3\3"+
    "\1\213\1\214\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\4\3\1\215\3\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\216\1\217"+
    "\7\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\15\0\1\220\50\0\2\3\4\0"+
    "\1\221\3\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\35\0\1\222"+
    "\30\0\2\3\4\0\4\3\1\0\10\3\1\0\2\3"+
    "\1\223\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\2\3\1\224"+
    "\5\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\1\3\1\225\1\3\7\0\2\3\4\0"+
    "\4\3\1\0\10\3\1\0\2\3\1\226\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\24\0\1\227"+
    "\41\0\2\3\4\0\4\3\1\0\2\3\1\230\5\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\6\3"+
    "\1\231\1\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\1\3"+
    "\1\232\2\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\17\0\1\233"+
    "\46\0\2\3\4\0\2\3\1\234\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\6\3"+
    "\1\235\1\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\26\0\1\236\50\0\1\237"+
    "\45\0\2\3\4\0\4\3\1\0\4\3\1\240\3\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\3\3\1\241\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\5\3\1\242\2\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\17\0\1\243\46\0"+
    "\2\3\4\0\2\3\1\244\1\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\2\3\1\245"+
    "\5\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\1\246\3\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\20\0\1\247\45\0\2\3"+
    "\4\0\3\3\1\250\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\3\3\1\251\4\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\1\252\3\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\5\3"+
    "\1\253\2\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\2\3"+
    "\1\254\1\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\1\255\3\3\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\15\0"+
    "\1\256\50\0\2\3\4\0\1\257\3\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\1\260\3\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\20\0\1\261\45\0\2\3\4\0"+
    "\3\3\1\262\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\16\0\1\263"+
    "\47\0\2\3\4\0\1\3\1\264\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\6\3"+
    "\1\265\1\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\4\3"+
    "\1\0\5\3\1\266\2\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\36\0\2\267"+
    "\26\0\2\3\4\0\4\3\1\0\10\3\1\0\3\3"+
    "\1\267\1\270\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\1\271\3\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\6\3\1\272"+
    "\1\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\15\0\1\273\50\0\2\3\4\0"+
    "\1\274\3\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\4\3\1\0\5\3\1\275\2\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\15\0\1\276\50\0\2\3\4\0\1\277\3\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\6\3\1\300\1\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\27\0\1\301\36\0"+
    "\2\3\4\0\4\3\1\0\5\3\1\302\2\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\2\3\1\303\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\4\3\1\304\3\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\7\0\2\3\4\0"+
    "\4\3\1\0\6\3\1\305\1\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\5\3\1\306\2\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\4\3\1\307"+
    "\3\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\10\3\1\0\3\3\1\310\1\311\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\4\3\1\312\3\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\44\0\1\313\21\0"+
    "\2\3\4\0\4\3\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\314\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\4\3\1\315\3\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\4\3\1\316"+
    "\3\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\1\317\3\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\20\0\1\320\45\0\2\3"+
    "\4\0\3\3\1\321\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\3\3\1\322\4\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\1\3\1\323\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\15\0\1\324\50\0\2\3\4\0"+
    "\1\325\3\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\4\3\1\0\6\3\1\326\1\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\3\3\1\327\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\4\3\1\0\5\3\1\330"+
    "\2\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\1\331\3\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\3\3"+
    "\1\332\1\0\10\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\27\0\1\333\36\0"+
    "\2\3\4\0\4\3\1\0\5\3\1\334\2\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\1\335\3\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\16\0\1\336\47\0\2\3\4\0\1\3"+
    "\1\337\2\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\4\3\1\0\6\3\1\340\1\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\10\3\1\0\3\3"+
    "\1\341\1\342\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\1\3\1\343\6\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\3\3\1\344\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\1\3\4\0"+
    "\1\3\2\0\3\3\7\0\2\3\4\0\4\3\1\0"+
    "\6\3\1\345\1\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\21\0\2\346\43\0"+
    "\2\3\4\0\4\3\1\346\1\347\7\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\5\3\1\350\2\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\7\0\2\3\4\0\4\3\1\0\5\3"+
    "\1\351\2\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\30\0\1\352\35\0\2\3"+
    "\4\0\4\3\1\0\6\3\1\353\1\3\1\0\3\3"+
    "\1\0\1\3\4\0\1\3\4\0\1\3\2\0\3\3"+
    "\7\0\2\3\4\0\4\3\1\0\5\3\1\354\2\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\23\0\1\355\42\0\2\3\4\0\4\3"+
    "\1\0\1\3\1\356\6\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\7\0\2\3"+
    "\4\0\1\357\3\3\1\0\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\1\3\4\0\1\3\2\0\3\3\7\0"+
    "\2\3\4\0\4\3\1\0\2\3\1\360\5\3\1\0"+
    "\3\3\1\0\1\3\4\0\1\3\4\0\1\3\2\0"+
    "\3\3\7\0\2\3\4\0\3\3\1\361\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\36\0\2\362\26\0\2\3\4\0\4\3"+
    "\1\0\10\3\1\0\3\3\1\362\1\363\4\0\1\3"+
    "\4\0\1\3\2\0\3\3\7\0\2\3\4\0\2\3"+
    "\1\364\1\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\30\0\1\365"+
    "\35\0\2\3\4\0\4\3\1\0\6\3\1\366\1\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\25\0\1\367\40\0\2\3\4\0\4\3"+
    "\1\0\3\3\1\370\4\3\1\0\3\3\1\0\1\3"+
    "\4\0\1\3\4\0\1\3\2\0\3\3\17\0\1\371"+
    "\46\0\2\3\4\0\2\3\1\372\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\4\0\1\3"+
    "\2\0\3\3\20\0\1\373\45\0\2\3\4\0\3\3"+
    "\1\374\1\0\10\3\1\0\3\3\1\0\1\3\4\0"+
    "\1\3\4\0\1\3\2\0\3\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8601];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\14\1\1\11\4\1\4\11"+
    "\1\1\2\11\4\1\1\11\1\1\4\11\6\1\2\0"+
    "\3\1\1\11\1\1\1\0\3\1\1\0\12\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\4\11\1\1\1\0"+
    "\1\11\2\1\1\0\1\11\1\0\5\1\1\0\3\1"+
    "\1\0\11\1\1\0\1\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\2\0\3\1\1\0\3\1\1\0\6\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\4\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\11\3\1\1\0"+
    "\3\1\1\11\6\1\1\0\2\1\1\11\1\1\1\11"+
    "\3\1\1\0\3\1\1\11\2\1\1\11\2\1\1\0"+
    "\6\1\1\0\2\1\1\0\4\1\1\11\3\1\1\0"+
    "\6\1\1\11\2\1\1\0\2\1\1\0\4\1\1\11"+
    "\3\1\1\11\2\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public Symbol token(int simbolo){
		Lexema lexema = new Lexema( yytext() );
		compilador.setError("La cadena "+yytext()+" es invalida, se encontro en la linea "+(yyline+1)+", y en la columna "+(yycolumn+1));
		return new Symbol(simbolo,yyline,yycolumn,lexema);
	}
	public Symbol token(int simbolo,String componenteLexico){
		Cup.vars++;
		Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,lexema);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.ERROR);
            }
          case 64: break;
          case 2: 
            { return token(sym.ID,"ID");
            }
          case 65: break;
          case 3: 
            { return token(sym.INTEGERNUM,"INTEGERNUM");
            }
          case 66: break;
          case 4: 
            { /*Ignore*/
            }
          case 67: break;
          case 5: 
            { return token(sym.DIVISION,"DIVISION");
            }
          case 68: break;
          case 6: 
            { return token(sym.OR,"OR");
            }
          case 69: break;
          case 7: 
            { return token(sym.TIEMPO,"TIEMPO");
            }
          case 70: break;
          case 8: 
            { return token(sym.GATO,"GATO");
            }
          case 71: break;
          case 9: 
            { return token(sym.LLAVEDER,"LLAVEDER");
            }
          case 72: break;
          case 10: 
            { return token(sym.LLAVEIZQ,"LLAVEIZQ");
            }
          case 73: break;
          case 11: 
            { return token(sym.PAREIZQ,"PAREIZQ");
            }
          case 74: break;
          case 12: 
            { return token(sym.PAREDER,"PAREDER");
            }
          case 75: break;
          case 13: 
            { return token(sym.PUNTOYCOMA,"PUNTOYCOMA");
            }
          case 76: break;
          case 14: 
            { return token(sym.PUNTO,"PUNTO");
            }
          case 77: break;
          case 15: 
            { return token(sym.MAYORQUE,"MAYORQUE");
            }
          case 78: break;
          case 16: 
            { return token(sym.IGUAL,"IGUAL");
            }
          case 79: break;
          case 17: 
            { return token(sym.AND,"AND");
            }
          case 80: break;
          case 18: 
            { return token(sym.MENORQUE,"MENORQUE");
            }
          case 81: break;
          case 19: 
            { return token(sym.COMA,"COMA");
            }
          case 82: break;
          case 20: 
            { return token(sym.DOSPUNTOS,"DOSPUNTOS");
            }
          case 83: break;
          case 21: 
            { return token(sym.SUMA,"SUMA");
            }
          case 84: break;
          case 22: 
            { return token(sym.MULTIPLICACION,"MULTIPLICACION");
            }
          case 85: break;
          case 23: 
            { return token(sym.RESTA,"RESTA");
            }
          case 86: break;
          case 24: 
            { 
            }
          case 87: break;
          case 25: 
            { return token(sym.O,"O");
            }
          case 88: break;
          case 26: 
            { return token(sym.NOT,"NOT");
            }
          case 89: break;
          case 27: 
            { return token(sym.ED,"ED");
            }
          case 90: break;
          case 28: 
            { return token(sym.EF,"EF");
            }
          case 91: break;
          case 29: 
            { return token(sym.MAYORIGUALQUE,"MAYORIGUALQUE");
            }
          case 92: break;
          case 30: 
            { return token(sym.COMPARA,"COMPARA");
            }
          case 93: break;
          case 31: 
            { return token(sym.DISTINTODE,"DISTINTODE");
            }
          case 94: break;
          case 32: 
            { return token(sym.MENORIGUALQUE,"MENORIGUALQUE");
            }
          case 95: break;
          case 33: 
            { return token(sym.CADENA,"CADENA");
            }
          case 96: break;
          case 34: 
            { return token(sym.Y,"Y");
            }
          case 97: break;
          case 35: 
            { return token(sym.SAR,"SAR");
            }
          case 98: break;
          case 36: 
            { return token(sym.MODULO,"MODULO");
            }
          case 99: break;
          case 37: 
            { return token(sym.CAR,"CAR");
            }
          case 100: break;
          case 38: 
            { return token(sym.ALTO,"ALTO");
            }
          case 101: break;
          case 39: 
            { return token(sym.PSALIDA,"PSALIDA");
            }
          case 102: break;
          case 40: 
            { return token(sym.PENTRADA,"PENTRADA");
            }
          case 103: break;
          case 41: 
            { return token(sym.SERVO,"SERVO");
            }
          case 104: break;
          case 42: 
            { return token(sym.CICLO,"CICLO");
            }
          case 105: break;
          case 43: 
            { return token(sym.FALSO,"FALSO");
            }
          case 106: break;
          case 44: 
            { return token(sym.FINAL,"FINAL");
            }
          case 107: break;
          case 45: 
            { return token(sym.BUCLE,"BUCLE");
            }
          case 108: break;
          case 46: 
            { return token(sym.UNTIL,"UNTIL");
            }
          case 109: break;
          case 47: 
            { return token(sym.DO,"DO");
            }
          case 110: break;
          case 48: 
            { return token(sym.SALIDA,"SALIDA");
            }
          case 111: break;
          case 49: 
            { return token(sym.INICIO,"INICIO");
            }
          case 112: break;
          case 50: 
            { return token(sym.DETENER,"DETENER");
            }
          case 113: break;
          case 51: 
            { return token(sym.DECLARA,"DECLARA");
            }
          case 114: break;
          case 52: 
            { return token(sym.RETARDO,"RETARDO");
            }
          case 115: break;
          case 53: 
            { return token(sym.REPEAT,"REPEAT");
            }
          case 116: break;
          case 54: 
            { return token (sym.ENTRADA, "ENTRADA");
            }
          case 117: break;
          case 55: 
            { return token(sym.BOLEANO,"BOLEANO");
            }
          case 118: break;
          case 56: 
            { return token(sym.WHILE,"WHILE");
            }
          case 119: break;
          case 57: 
            { return token(sym.CARACTER,"CARACTER");
            }
          case 120: break;
          case 58: 
            { return token(sym.CONTADOR,"CONTADOR");
            }
          case 121: break;
          case 59: 
            { return token(sym.VARIABLE,"VARIABLE");
            }
          case 122: break;
          case 60: 
            { return token(sym.PROGRAMA,"PROGRAMA");
            }
          case 123: break;
          case 61: 
            { return token(sym.VERDADERO,"VERDADERO");
            }
          case 124: break;
          case 62: 
            { return token(sym.MOTORELECT,"MOTORELECT");
            }
          case 125: break;
          case 63: 
            { return token(sym.PROCEDURE,"PROCEDURE");
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
